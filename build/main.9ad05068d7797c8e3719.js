/*! For license information please see main.9ad05068d7797c8e3719.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_game=self.webpackChunkweb_game||[]).push([["main"],{"./src/styles/main.scss":(e,t,n)=>{n.r(t)},"./node_modules/react-dom/cjs/react-dom-client.development.js":(e,t,n)=>{!function(){function e(e,t){for(e=e.memoizedState;null!==e&&0<t;)e=e.next,t--;return e}function r(e,t,n,o){if(n>=t.length)return o;var a=t[n],i=zc(e)?e.slice():Oc({},e);return i[a]=r(e[a],t,n+1,o),i}function o(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void console.warn("copyWithRename() expects paths to be the same except for the deepest key");return a(e,t,n,0)}console.warn("copyWithRename() expects paths of the same length")}function a(e,t,n,r){var o=t[r],i=zc(e)?e.slice():Oc({},e);return r+1===t.length?(i[n[r]]=i[o],zc(i)?i.splice(o,1):delete i[o]):i[o]=a(e[o],t,n,r+1),i}function i(e,t,n){var r=t[n],o=zc(e)?e.slice():Oc({},e);return n+1===t.length?(zc(o)?o.splice(r,1):delete o[r],o):(o[r]=i(e[r],t,n+1),o)}function l(){return!1}function s(){return null}function u(e,t,n,r){return new Qi(e,t,n,r)}function c(){console.error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks")}function d(){console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")}function f(){}function p(){}function h(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")}function m(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function y(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_c&&e[_c]||e["@@iterator"])?e:null}function g(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===Pc?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case sc:return"Fragment";case lc:return"Portal";case cc:return"Profiler";case uc:return"StrictMode";case mc:return"Suspense";case yc:return"SuspenseList"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case pc:return(e.displayName||"Context")+".Provider";case fc:return(e._context.displayName||"Context")+".Consumer";case hc:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case gc:return null!==(t=e.displayName||null)?t:g(e.type)||"Memo";case vc:t=e._payload,e=e._init;try{return g(e(t))}catch(e){}}return null}function v(e){return"number"==typeof e.tag?b(e):"string"==typeof e.name?e.name:null}function b(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t._context.displayName||"Context")+".Consumer";case 10:return(t.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 26:case 27:case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return g(t);case 8:return t===uc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;break;case 29:if(null!=(t=e._debugInfo))for(var n=t.length-1;0<=n;n--)if("string"==typeof t[n].name)return t[n].name;if(null!==e.return)return b(e.return)}return null}function w(){}function S(e){if(void 0===Ac)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ac=t&&t[1]||"",Mc=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ac+e+Mc}function k(e,t){if(!e||Nc)return"";var n,r=Ic.get(e);if(void 0!==r)return r;Nc=!0,r=Error.prepareStackTrace,Error.prepareStackTrace=void 0,n=Lc.H,Lc.H=null,function(){if(0===Dc){wc=console.log,Sc=console.info,kc=console.warn,Ec=console.error,xc=console.group,Rc=console.groupCollapsed,Cc=console.groupEnd;var e={configurable:!0,enumerable:!0,value:w,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Dc++}();try{var o={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};o.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(o.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(o.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var i=o.DetermineComponentFrameRoot(),l=i[0],s=i[1];if(l&&s){var u=l.split("\n"),c=s.split("\n");for(i=a=0;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;for(;i<c.length&&!c[i].includes("DetermineComponentFrameRoot");)i++;if(a===u.length||i===c.length)for(a=u.length-1,i=c.length-1;1<=a&&0<=i&&u[a]!==c[i];)i--;for(;1<=a&&0<=i;a--,i--)if(u[a]!==c[i]){if(1!==a||1!==i)do{if(a--,0>--i||u[a]!==c[i]){var d="\n"+u[a].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),"function"==typeof e&&Ic.set(e,d),d}}while(1<=a&&0<=i);break}}}finally{Nc=!1,Lc.H=n,function(){if(0==--Dc){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:Oc({},e,{value:wc}),info:Oc({},e,{value:Sc}),warn:Oc({},e,{value:kc}),error:Oc({},e,{value:Ec}),group:Oc({},e,{value:xc}),groupCollapsed:Oc({},e,{value:Rc}),groupEnd:Oc({},e,{value:Cc})})}0>Dc&&console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=r}return u=(u=e?e.displayName||e.name:"")?S(u):"","function"==typeof e&&Ic.set(e,u),u}function E(e){switch(e.tag){case 26:case 27:case 5:return S(e.type);case 16:return S("Lazy");case 13:return S("Suspense");case 19:return S("SuspenseList");case 0:case 15:return k(e.type,!1);case 11:return k(e.type.render,!1);case 1:return k(e.type,!0);default:return""}}function x(e){try{var t="";do{t+=E(e);var n=e._debugInfo;if(n)for(var r=n.length-1;0<=r;r--){var o=n[r];if("string"==typeof o.name){var a=t,i=o.env;t=a+S(o.name+(i?" ["+i+"]":""))}}e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function R(){if(null===Fc)return null;var e=Fc._debugOwner;return null!=e?v(e):null}function C(){return null===Fc?"":x(Fc)}function T(e,t,n,r,o,a,i){var l=Fc;Lc.getCurrentStack=null===e?null:C,jc=!1,Fc=e;try{return t(n,r,o,a,i)}finally{Fc=l}throw Error("runWithFiberInDEV should never be called in production. This is a bug in React.")}function _(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function P(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function L(e){if(_(e)!==e)throw Error("Unable to find node on an unmounted component.")}function O(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=O(e)))return t;e=e.sibling}return null}function D(e){return{current:e}}function A(e,t){0>Wc?console.error("Unexpected pop."):(t!==Bc[Wc]&&console.error("Unexpected Fiber popped."),e.current=$c[Wc],$c[Wc]=null,Bc[Wc]=null,Wc--)}function M(e,t,n){Wc++,$c[Wc]=e.current,Bc[Wc]=n,e.current=t}function N(e){return null===e&&console.error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."),e}function I(e,t){M(Yc,t,e),M(qc,e,e),M(Vc,null,e);var n=t.nodeType;switch(n){case 9:case 11:n=9===n?"#document":"#fragment",t=(t=t.documentElement)&&(t=t.namespaceURI)?zs(t):sb;break;default:if(n=(t=8===n?t.parentNode:t).tagName,t=t.namespaceURI)t=Us(t=zs(t),n);else switch(n){case"svg":t=ub;break;case"math":t=cb;break;default:t=sb}}n={context:t,ancestorInfo:n=st(null,n=n.toLowerCase())},A(Vc,e),M(Vc,n,e)}function F(e){A(Vc,e),A(qc,e),A(Yc,e)}function j(){return N(Vc.current)}function z(e){null!==e.memoizedState&&M(Qc,e,e);var t=N(Vc.current),n=e.type,r=Us(t.context,n);t!==(r={context:r,ancestorInfo:n=st(t.ancestorInfo,n)})&&(M(qc,e,e),M(Vc,r,e))}function U(e){qc.current===e&&(A(Vc,e),A(qc,e)),Qc.current===e&&(A(Qc,e),Bb._currentValue=$b)}function H(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}function $(e){try{return B(e),!1}catch(e){return!0}}function B(e){return""+e}function W(e,t){if($(e))return console.error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",t,H(e)),B(e)}function V(e,t){if($(e))return console.error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",t,H(e)),B(e)}function q(e){if($(e))return console.error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",H(e)),B(e)}function Y(e){if("function"==typeof ld&&sd(e),cd&&"function"==typeof cd.setStrictMode)try{cd.setStrictMode(ud,e)}catch(e){fd||(fd=!0,console.error("React instrumentation encountered an error: %s",e))}}function Q(){null!==dd&&"function"==typeof dd.markCommitStopped&&dd.markCommitStopped()}function G(e){null!==dd&&"function"==typeof dd.markComponentRenderStarted&&dd.markComponentRenderStarted(e)}function J(){null!==dd&&"function"==typeof dd.markComponentRenderStopped&&dd.markComponentRenderStopped()}function X(e){null!==dd&&"function"==typeof dd.markRenderStarted&&dd.markRenderStarted(e)}function K(){null!==dd&&"function"==typeof dd.markRenderStopped&&dd.markRenderStopped()}function Z(e,t){null!==dd&&"function"==typeof dd.markStateUpdateScheduled&&dd.markStateUpdateScheduled(e,t)}function ee(e){return 1&e?"SyncHydrationLane":2&e?"Sync":4&e?"InputContinuousHydration":8&e?"InputContinuous":16&e?"DefaultHydration":32&e?"Default":64&e?"TransitionHydration":4194176&e?"Transition":62914560&e?"Retry":67108864&e?"SelectiveHydration":134217728&e?"IdleHydration":268435456&e?"Idle":536870912&e?"Offscreen":1073741824&e?"Deferred":void 0}function te(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return console.error("Should have found matching lanes. This is a bug in React."),e}}function ne(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~o)?r=te(n):0!=(a&=l)?r=te(a):e||0!=(i=l&~i)&&(r=te(i)):0!=(l=n&~o)?r=te(l):0!==a?r=te(a):e||0!=(i=n&~i)&&(r=te(i)),0===r?0:0===t||t===r||t&o||!((o=r&-r)>=(i=t&-t)||32===o&&4194176&i)?r:t}function re(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function oe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return console.error("Should have found matching lanes. This is a bug in React."),-1}}function ae(){var e=gd;return!(4194176&(gd<<=1))&&(gd=128),e}function ie(){var e=vd;return!(62914560&(vd<<=1))&&(vd=4194304),e}function le(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function se(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function ue(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-hd(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function ce(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-hd(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function de(e,t,n){if(pd)for(e=e.pendingUpdatersLaneMap;0<n;){var r=31-hd(n),o=1<<r;e[r].add(t),n&=~o}}function fe(e,t){if(pd)for(var n=e.pendingUpdatersLaneMap,r=e.memoizedUpdaters;0<t;){var o=31-hd(t);e=1<<o,0<(o=n[o]).size&&(o.forEach((function(e){var t=e.alternate;null!==t&&r.has(t)||r.add(e)})),o.clear()),t&=~e}}function pe(e){return e&=-e,0!==bd&&bd<e?0!==wd&&wd<e?134217727&e?Sd:kd:wd:bd}function he(){var e=Uc.p;return 0!==e?e:void 0===(e=window.event)?Sd:Bu(e.type)}function me(e){delete e[xd],delete e[Rd],delete e[Td],delete e[_d],delete e[Pd]}function ye(e){var t=e[xd];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cd]||n[xd]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=au(e);null!==e;){if(n=e[xd])return n;e=au(e)}return t}n=(e=n).parentNode}return null}function ge(e){if(e=e[xd]||e[Cd]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function ve(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error("getNodeFromInstance: Invalid argument.")}function be(e){var t=e[Ld];return t||(t=e[Ld]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function we(e){e[Od]=!0}function Se(e,t){ke(e,t),ke(e+"Capture",t)}function ke(e,t){Ad[e]&&console.error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",e),Ad[e]=t;var n=e.toLowerCase();for(Md[n]=e,"onDoubleClick"===e&&(Md.ondblclick=e),e=0;e<t.length;e++)Dd.add(t[e])}function Ee(e,t){Id[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||("select"===e?console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."):console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")),t.onChange||t.readOnly||t.disabled||null==t.checked||console.error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}function xe(e){return!!Gc.call(zd,e)||!Gc.call(jd,e)&&(Fd.test(e)?zd[e]=!0:(jd[e]=!0,console.error("Invalid attribute name: `%s`",e),!1))}function Re(e,t,n){if(xe(t)){if(!e.hasAttribute(t)){switch(typeof n){case"symbol":case"object":case"function":return n;case"boolean":if(!1===n)return n}return void 0===n?void 0:null}return""===(e=e.getAttribute(t))&&!0===n||(W(n,t),e===""+n?n:e)}}function Ce(e,t,n){if(xe(t))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}W(n,t),e.setAttribute(t,""+n)}}function Te(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}W(n,t),e.setAttribute(t,""+n)}}function _e(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}W(r,n),e.setAttributeNS(t,n,""+r)}}function Pe(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":return e;case"object":return q(e),e;default:return""}}function Le(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Oe(e){e._valueTracker||(e._valueTracker=function(e){var t=Le(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t);q(e[t]);var r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){q(e),r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){q(e),r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function De(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Le(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ae(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Me(e){return e.replace(Ud,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function Ne(e,t){void 0===t.checked||void 0===t.defaultChecked||$d||(console.error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",R()||"A component",t.type),$d=!0),void 0===t.value||void 0===t.defaultValue||Hd||(console.error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",R()||"A component",t.type),Hd=!0)}function Ie(e,t,n,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?(W(i,"type"),e.type=i):e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+Pe(t)):e.value!==""+Pe(t)&&(e.value=""+Pe(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?je(e,i,Pe(t)):null!=n?je(e,i,Pe(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?(W(l,"name"),e.name=""+Pe(l)):e.removeAttribute("name")}function Fe(e,t,n,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(W(a,"type"),e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+Pe(n):"",t=null!=t?""+Pe(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(W(i,"name"),e.name=i)}function je(e,t,n){"number"===t&&Ae(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function ze(e,t){null==t.value&&("object"==typeof t.children&&null!==t.children?rc.Children.forEach(t.children,(function(e){null==e||"string"==typeof e||"number"==typeof e||"bigint"==typeof e||Wd||(Wd=!0,console.error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."))})):null==t.dangerouslySetInnerHTML||Vd||(Vd=!0,console.error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))),null==t.selected||Bd||(console.error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),Bd=!0)}function Ue(){var e=R();return e?"\n\nCheck the render method of `"+e+"`.":""}function He(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Pe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function $e(e,t){for(e=0;e<Yd.length;e++){var n=Yd[e];if(null!=t[n]){var r=zc(t[n]);t.multiple&&!r?console.error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Ue()):!t.multiple&&r&&console.error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Ue())}}void 0===t.value||void 0===t.defaultValue||qd||(console.error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"),qd=!0)}function Be(e,t){void 0===t.value||void 0===t.defaultValue||Qd||(console.error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",R()||"A component"),Qd=!0),null!=t.children&&null==t.value&&console.error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.")}function We(e,t,n){null==t||((t=""+Pe(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+Pe(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function Ve(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(zc(r)){if(1<r.length)throw Error("<textarea> can only have at most one child.");r=r[0]}n=r}null==n&&(n=""),t=n}n=Pe(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function qe(e,t){return void 0===e.serverProps&&0===e.serverTail.length&&1===e.children.length&&3<e.distanceFromLeaf&&e.distanceFromLeaf>15-t?qe(e.children[0],t):e}function Ye(e){return"  "+"  ".repeat(e)}function Qe(e){return"+ "+"  ".repeat(e)}function Ge(e){return"- "+"  ".repeat(e)}function Je(e){switch(e.tag){case 26:case 27:case 5:return e.type;case 16:return"Lazy";case 13:return"Suspense";case 19:return"SuspenseList";case 0:case 15:case 1:return(e=e.type).displayName||e.name||null;case 11:return(e=e.type.render).displayName||e.name||null;default:return null}}function Xe(e,t){return Gd.test(e)?(e=JSON.stringify(e)).length>t-2?8>t?'{"..."}':"{"+e.slice(0,t-7)+'..."}':"{"+e+"}":e.length>t?5>t?'{"..."}':e.slice(0,t-3)+"...":e}function Ke(e,t,n){var r=120-2*n;if(null===t)return Qe(n)+Xe(e,r)+"\n";if("string"==typeof t){for(var o=0;o<t.length&&o<e.length&&t.charCodeAt(o)===e.charCodeAt(o);o++);return o>r-8&&10<o&&(e="..."+e.slice(o-8),t="..."+t.slice(o-8)),Qe(n)+Xe(e,r)+"\n"+Ge(n)+Xe(t,r)+"\n"}return Ye(n)+Xe(e,r)+"\n"}function Ze(e){return Object.prototype.toString.call(e).replace(/^\[object (.*)\]$/,(function(e,t){return t}))}function et(e,t){switch(typeof e){case"string":return(e=JSON.stringify(e)).length>t?5>t?'"..."':e.slice(0,t-4)+'..."':e;case"object":if(null===e)return"null";if(zc(e))return"[...]";if(e.$$typeof===ic)return(t=g(e.type))?"<"+t+">":"<...>";var n=Ze(e);if("Object"===n){for(var r in n="",t-=2,e)if(e.hasOwnProperty(r)){var o=JSON.stringify(r);if(o!=='"'+r+'"'&&(r=o),t-=r.length-2,0>(t-=(o=et(e[r],15>t?t:15)).length)){n+=""===n?"...":", ...";break}n+=(""===n?"":",")+r+":"+o}return"{"+n+"}"}return n;case"function":return(t=e.displayName||e.name)?"function "+t:"function";default:return String(e)}}function tt(e,t){return"string"!=typeof e||Gd.test(e)?"{"+et(e,t-2)+"}":e.length>t-2?5>t?'"..."':'"'+e.slice(0,t-5)+'..."':'"'+e+'"'}function nt(e,t,n){var r,o=120-n.length-e.length,a=[];for(r in t)if(t.hasOwnProperty(r)&&"children"!==r){var i=tt(t[r],120-n.length-r.length-1);o-=r.length+i.length+2,a.push(r+"="+i)}return 0===a.length?n+"<"+e+">\n":0<o?n+"<"+e+" "+a.join(" ")+">\n":n+"<"+e+"\n"+n+"  "+a.join("\n"+n+"  ")+"\n"+n+">\n"}function rt(e,t,n){var r,o="",a=Oc({},t);for(r in e)if(e.hasOwnProperty(r)){delete a[r];var i=120-2*n-r.length-2,l=et(e[r],i);t.hasOwnProperty(r)?(i=et(t[r],i),o+=Qe(n)+r+": "+l+"\n",o+=Ge(n)+r+": "+i+"\n"):o+=Qe(n)+r+": "+l+"\n"}for(var s in a)a.hasOwnProperty(s)&&(e=et(a[s],120-2*n-s.length-2),o+=Ge(n)+s+": "+e+"\n");return o}function ot(e,t){var n=Je(e);if(null===n){for(n="",e=e.child;e;)n+=ot(e,t),e=e.sibling;return n}return Ye(t)+"<"+n+">\n"}function at(e,t){var n=qe(e,t);if(n!==e&&(1!==e.children.length||e.children[0]!==n))return Ye(t)+"...\n"+at(n,t+1);n="";var r=e.fiber._debugInfo;if(r)for(var o=0;o<r.length;o++){var a=r[o].name;"string"==typeof a&&(n+=Ye(t)+"<"+a+">\n",t++)}if(r="",o=e.fiber.pendingProps,6===e.fiber.tag)r=Ke(o,e.serverProps,t),t++;else if(null!==(a=Je(e.fiber)))if(void 0===e.serverProps){var i=120-2*(r=t)-a.length-2,l="";for(u in o)if(o.hasOwnProperty(u)&&"children"!==u){var s=tt(o[u],15);if(0>(i-=u.length+s.length+2)){l+=" ...";break}l+=" "+u+"="+s}r=Ye(r)+"<"+a+l+">\n",t++}else null===e.serverProps?(r=nt(a,o,Qe(t)),t++):"string"==typeof e.serverProps?console.error("Should not have matched a non HostText fiber to a Text node. This is a bug in React."):(r=function(e,t,n,r){var o="",a=new Map;for(u in n)n.hasOwnProperty(u)&&a.set(u.toLowerCase(),u);if(1===a.size&&a.has("children"))o+=nt(e,t,Ye(r));else{for(var i in t)if(t.hasOwnProperty(i)&&"children"!==i){var l=120-2*(r+1)-i.length-1,s=a.get(i.toLowerCase());if(void 0!==s){a.delete(i.toLowerCase());var u=t[i];s=n[s];var c=tt(u,l);l=tt(s,l),"object"==typeof u&&null!==u&&"object"==typeof s&&null!==s&&"Object"===Ze(u)&&"Object"===Ze(s)&&(2<Object.keys(u).length||2<Object.keys(s).length||-1<c.indexOf("...")||-1<l.indexOf("..."))?o+=Ye(r+1)+i+"={{\n"+rt(u,s,r+2)+Ye(r+1)+"}}\n":(o+=Qe(r+1)+i+"="+c+"\n",o+=Ge(r+1)+i+"="+l+"\n")}else o+=Ye(r+1)+i+"="+tt(t[i],l)+"\n"}a.forEach((function(e){if("children"!==e){var t=120-2*(r+1)-e.length-1;o+=Ge(r+1)+e+"="+tt(n[e],t)+"\n"}})),o=""===o?Ye(r)+"<"+e+">\n":Ye(r)+"<"+e+"\n"+o+Ye(r)+">\n"}return e=n.children,t=t.children,"string"==typeof e||"number"==typeof e||"bigint"==typeof e?(a="","string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(a=""+t),o+=Ke(a,""+e,r+1)):"string"!=typeof t&&"number"!=typeof t&&"bigint"!=typeof t||(o=null==e?o+Ke(""+t,null,r+1):o+Ke(""+t,void 0,r+1)),o}(a,o,e.serverProps,t),t++);var u="";for(o=e.fiber.child,a=0;o&&a<e.children.length;)(i=e.children[a]).fiber===o?(u+=at(i,t),a++):u+=ot(o,t),o=o.sibling;for(o&&0<e.children.length&&(u+=Ye(t)+"...\n"),o=e.serverTail,null===e.serverProps&&t--,e=0;e<o.length;e++)u="string"==typeof(a=o[e])?u+(Ge(t)+Xe(a,120-2*t)+"\n"):u+nt(a.type,a.props,Ge(t));return n+r+u}function it(e){try{return"\n\n"+at(e,0)}catch(e){return""}}function lt(e,t,n){for(var r=t,o=null,a=0;r;)r===e&&(a=0),o={fiber:r,children:null!==o?[o]:[],serverProps:r===t?n:r===e?null:void 0,serverTail:[],distanceFromLeaf:a},a++,r=r.return;return null!==o?it(o).replaceAll(/^[+-]/gm,">"):""}function st(e,t){e=Oc({},e||ef);var n={tag:t};return-1!==Xd.indexOf(t)&&(e.aTagInScope=null,e.buttonTagInScope=null,e.nobrTagInScope=null),-1!==Kd.indexOf(t)&&(e.pTagInButtonScope=null),-1!==Jd.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(e.listItemTagAutoclosing=null,e.dlItemTagAutoclosing=null),e.current=n,"form"===t&&(e.formTag=n),"a"===t&&(e.aTagInScope=n),"button"===t&&(e.buttonTagInScope=n),"nobr"===t&&(e.nobrTagInScope=n),"p"===t&&(e.pTagInButtonScope=n),"li"===t&&(e.listItemTagAutoclosing=n),"dd"!==t&&"dt"!==t||(e.dlItemTagAutoclosing=n),"#document"===t||"html"===t?e.containerTagInScope=null:e.containerTagInScope||(e.containerTagInScope=n),e}function ut(e,t){switch(t){case"select":return"hr"===e||"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===Zd.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frameset":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}function ct(e,t){for(;e;){switch(e.tag){case 5:case 26:case 27:if(e.type===t)return e}e=e.return}return null}function dt(e,t){var n=(t=t||ef).current;if(t=(n=ut(e,n&&n.tag)?null:n)?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,t),!(t=n||t))return!0;t=t.tag;var r=String(!!n)+"|"+e+"|"+t;if(tf[r])return!1;tf[r]=!0;var o=(r=Fc)?ct(r.return,t):null;return r=null!==r&&null!==o?lt(o,r,null):"",o="<"+e+">",n?(n="","table"===t&&"tr"===e&&(n+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),console.error("In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",o,t,n,r)):console.error("In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",o,t,r),!1}function ft(e,t){if(ut("#text",t))return!0;var n="#text|"+t;if(tf[n])return!1;tf[n]=!0;var r=(n=Fc)?ct(n,t):null;return n=null!==n&&null!==r?lt(r,n,6!==n.tag?{children:null}:null):"",/\S/.test(e)?console.error("In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",t,n):console.error("In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",t,n),!1}function pt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function ht(e,t,n){var r=0===t.indexOf("--");r||(-1<t.indexOf("-")?ff.hasOwnProperty(t)&&ff[t]||(ff[t]=!0,console.error("Unsupported style property %s. Did you mean %s?",t,t.replace(uf,"ms-").replace(cf,(function(e,t){return t.toUpperCase()})))):sf.test(t)?ff.hasOwnProperty(t)&&ff[t]||(ff[t]=!0,console.error("Unsupported vendor-prefixed style property %s. Did you mean %s?",t,t.charAt(0).toUpperCase()+t.slice(1))):!df.test(n)||pf.hasOwnProperty(n)&&pf[n]||(pf[n]=!0,console.error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',t,n.replace(df,""))),"number"==typeof n&&(isNaN(n)?hf||(hf=!0,console.error("`NaN` is an invalid value for the `%s` css style property.",t)):isFinite(n)||mf||(mf=!0,console.error("`Infinity` is an invalid value for the `%s` css style property.",t)))),null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||yf.has(t)?"float"===t?e.cssFloat=n:(V(n,t),e[t]=(""+n).trim()):e[t]=n+"px"}function mt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");if(t&&Object.freeze(t),e=e.style,null!=n){if(t){var r={};if(n)for(var o in n)if(n.hasOwnProperty(o)&&!t.hasOwnProperty(o))for(var a=of[o]||[o],i=0;i<a.length;i++)r[a[i]]=o;for(var l in t)if(t.hasOwnProperty(l)&&(!n||n[l]!==t[l]))for(o=of[l]||[l],a=0;a<o.length;a++)r[o[a]]=l;for(var s in l={},t)for(o=of[s]||[s],a=0;a<o.length;a++)l[o[a]]=s;for(var u in s={},r)if(o=r[u],(a=l[u])&&o!==a&&!s[i=o+","+a]){s[i]=!0,i=console;var c=t[o];i.error.call(i,"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==c||"boolean"==typeof c||""===c?"Removing":"Updating",o,a)}}for(var d in n)!n.hasOwnProperty(d)||null!=t&&t.hasOwnProperty(d)||(0===d.indexOf("--")?e.setProperty(d,""):"float"===d?e.cssFloat="":e[d]="");for(var f in t)u=t[f],t.hasOwnProperty(f)&&n[f]!==u&&ht(e,f,u)}else for(r in t)t.hasOwnProperty(r)&&ht(e,r,t[r])}function yt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function gt(e){return gf.get(e)||e}function vt(e,t){if(Gc.call(wf,t)&&wf[t])return!0;if(kf.test(t)){if(e="aria-"+t.slice(4).toLowerCase(),null==(e=bf.hasOwnProperty(e)?e:null))return console.error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),wf[t]=!0;if(t!==e)return console.error("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,e),wf[t]=!0}if(Sf.test(t)){if(e=t.toLowerCase(),null==(e=bf.hasOwnProperty(e)?e:null))return wf[t]=!0,!1;t!==e&&(console.error("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,e),wf[t]=!0)}return!0}function bt(e,t,n,r){if(Gc.call(xf,t)&&xf[t])return!0;var o=t.toLowerCase();if("onfocusin"===o||"onfocusout"===o)return console.error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),xf[t]=!0;if("function"==typeof n&&("form"===e&&"action"===t||"input"===e&&"formAction"===t||"button"===e&&"formAction"===t))return!0;if(null!=r){if(e=r.possibleRegistrationNames,r.registrationNameDependencies.hasOwnProperty(t))return!0;if(null!=(r=e.hasOwnProperty(o)?e[o]:null))return console.error("Invalid event handler property `%s`. Did you mean `%s`?",t,r),xf[t]=!0;if(Rf.test(t))return console.error("Unknown event handler property `%s`. It will be ignored.",t),xf[t]=!0}else if(Rf.test(t))return Cf.test(t)&&console.error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),xf[t]=!0;if(Tf.test(t)||_f.test(t))return!0;if("innerhtml"===o)return console.error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),xf[t]=!0;if("aria"===o)return console.error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),xf[t]=!0;if("is"===o&&null!=n&&"string"!=typeof n)return console.error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof n),xf[t]=!0;if("number"==typeof n&&isNaN(n))return console.error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),xf[t]=!0;if(vf.hasOwnProperty(o)){if((o=vf[o])!==t)return console.error("Invalid DOM property `%s`. Did you mean `%s`?",t,o),xf[t]=!0}else if(t!==o)return console.error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,o),xf[t]=!0;switch(t){case"dangerouslySetInnerHTML":case"children":case"style":case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"innerText":case"textContent":return!0}switch(typeof n){case"boolean":switch(t){case"autoFocus":case"checked":case"multiple":case"muted":case"selected":case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"capture":case"download":case"inert":return!0;default:return"data-"===(o=t.toLowerCase().slice(0,5))||"aria-"===o||(n?console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',n,t,t,n,t):console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),xf[t]=!0)}case"function":case"symbol":return xf[t]=!0,!1;case"string":if("false"===n||"true"===n){switch(t){case"checked":case"selected":case"multiple":case"muted":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":case"inert":break;default:return!0}console.error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",n,t,"false"===n?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,n),xf[t]=!0}}return!0}function wt(e){return Pf.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}function St(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function kt(e){var t=ge(e);if(t&&(e=t.stateNode)){var n=e[Rd]||null;e:switch(e=t.stateNode,t.type){case"input":if(Ie(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(W(t,"name"),n=n.querySelectorAll('input[name="'+Me(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Rd]||null;if(!o)throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");Ie(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&De(r)}break e;case"textarea":We(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&He(e,!!n.multiple,t,!1)}}}function Et(e,t,n){if(Af)return e(t,n);Af=!0;try{return e(t)}finally{if(Af=!1,(null!==Of||null!==Df)&&(Sl(),Of&&(t=Of,e=Df,Df=Of=null,kt(t),e)))for(t=0;t<e.length;t++)kt(e[t])}}function xt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Rd]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof n+"` type.");return n}function Rt(){if(Hf)return Hf;var e,t,n=Uf,r=n.length,o="value"in zf?zf.value:zf.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Hf=o.slice(e,1<t?1-t:void 0)}function Ct(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Tt(){return!0}function _t(){return!1}function Pt(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Tt:_t,this.isPropagationStopped=_t,this}return Oc(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Tt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Tt)},persist:function(){},isPersistent:Tt}),t}function Lt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=np[e])&&!!t[e]}function Ot(){return Lt}function Dt(e,t){switch(e){case"keyup":return-1!==up.indexOf(t.keyCode);case"keydown":return t.keyCode!==cp;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function At(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}function Mt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!bp[e.type]:"textarea"===t}function Nt(e,t,n,r){Of?Df?Df.push(r):Df=[r]:Of=r,0<(t=ys(t,"onChange")).length&&(n=new Bf("onChange","change",null,n,r),e.push({event:n,listeners:t}))}function It(e){us(e,0)}function Ft(e){if(De(ve(e)))return e}function jt(e,t){if("change"===e)return t}function zt(){wp&&(wp.detachEvent("onpropertychange",Ut),Sp=wp=null)}function Ut(e){if("value"===e.propertyName&&Ft(Sp)){var t=[];Nt(t,Sp,e,St(e)),Et(It,t)}}function Ht(e,t,n){"focusin"===e?(zt(),Sp=n,(wp=t).attachEvent("onpropertychange",Ut)):"focusout"===e&&zt()}function $t(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ft(Sp)}function Bt(e,t){if("click"===e)return Ft(t)}function Wt(e,t){if("input"===e||"change"===e)return Ft(t)}function Vt(e,t){if(Ep(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!Gc.call(t,o)||!Ep(e[o],t[o]))return!1}return!0}function qt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Yt(e,t){var n,r=qt(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=qt(r)}}function Qt(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Qt(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Gt(e){for(var t=Ae((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Ae((e=t.contentWindow).document)}return t}function Jt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Xt(e,t){var n=Gt(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Qt(t.ownerDocument.documentElement,t)){if(null!==r&&Jt(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var o=t.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!n.extend&&a>r&&(o=r,r=a,a=o),o=Yt(t,a);var i=Yt(t,r);o&&i&&(1!==n.rangeCount||n.anchorNode!==o.node||n.anchorOffset!==o.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(o.node,o.offset),n.removeAllRanges(),a>r?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}function Kt(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_p||null==Rp||Rp!==Ae(r)||(r="selectionStart"in(r=Rp)&&Jt(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Tp&&Vt(Tp,r)||(Tp=r,0<(r=ys(Cp,"onSelect")).length&&(t=new Bf("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Rp)))}function Zt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}function en(e){if(Lp[e])return Lp[e];if(!Pp[e])return e;var t,n=Pp[e];for(t in n)if(n.hasOwnProperty(t)&&t in Op)return Lp[e]=n[t];return e}function tn(e,t){zp.set(e,t),Se(t,[e])}function nn(){for(var e=Vp,t=qp=Vp=0;t<e;){var n=Wp[t];Wp[t++]=null;var r=Wp[t];Wp[t++]=null;var o=Wp[t];Wp[t++]=null;var a=Wp[t];if(Wp[t++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&ln(n,o,a)}}function rn(e,t,n,r){Wp[Vp++]=e,Wp[Vp++]=t,Wp[Vp++]=n,Wp[Vp++]=r,qp|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function on(e,t,n,r){return rn(e,t,n,r),sn(e)}function an(e,t){return rn(e,null,null,t),sn(e)}function ln(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||e._visibility&Hp||(o=!0)),e=a,a=a.return;o&&null!==t&&3===e.tag&&(a=e.stateNode,o=31-hd(n),null===(e=(a=a.hiddenUpdates)[o])?a[o]=[t]:e.push(t),t.lane=536870912|n)}function sn(e){if(mv>hv)throw wv=mv=0,Sv=yv=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");wv>bv&&(wv=0,Sv=null,console.error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.")),null===e.alternate&&4098&e.flags&&Jl(e);for(var t=e,n=t.return;null!==n;)null===t.alternate&&!!(4098&t.flags)&&Jl(e),n=(t=n).return;return 3===t.tag?t.stateNode:null}function un(e){if(null===Qp)return e;var t=Qp(e);return void 0===t?e:t.current}function cn(e){if(null===Qp)return e;var t=Qp(e);return void 0===t?null!=e&&"function"==typeof e.render&&(t=un(e.render),e.render!==t)?(t={$$typeof:hc,render:t},void 0!==e.displayName&&(t.displayName=e.displayName),t):e:t.current}function dn(e,t){if(null===Qp)return!1;var n=e.elementType,r=!1,o="object"==typeof(t=t.type)&&null!==t?t.$$typeof:null;switch(e.tag){case 1:"function"==typeof t&&(r=!0);break;case 0:("function"==typeof t||o===vc)&&(r=!0);break;case 11:(o===hc||o===vc)&&(r=!0);break;case 14:case 15:(o===gc||o===vc)&&(r=!0);break;default:return!1}return!(!r||(e=Qp(n),void 0===e||e!==Qp(t)))}function fn(e){null!==Qp&&"function"==typeof WeakSet&&(null===Gp&&(Gp=new WeakSet),Gp.add(e))}function pn(e,t,n){var r=e.alternate,o=e.child,a=e.sibling,i=e.tag,l=e.type,s=null;switch(i){case 0:case 15:case 1:s=l;break;case 11:s=l.render}if(null===Qp)throw Error("Expected resolveFamily to be set during hot reload.");var u=!1;l=!1,null!==s&&void 0!==(s=Qp(s))&&(n.has(s)?l=!0:t.has(s)&&(1===i?l=!0:u=!0)),null!==Gp&&(Gp.has(e)||null!==r&&Gp.has(r))&&(l=!0),l&&(e._debugNeedsRemount=!0),(l||u)&&null!==(r=an(e,2))&&ml(r,e,2),null===o||l||pn(o,t,n),null!==a&&pn(a,t,n)}function hn(){var e=ih;return ih=0,e}function mn(e){var t=ih;return ih=e,t}function yn(e){var t=ih;return ih+=e,t}function gn(e){ah=nh(),0>e.actualStartTime&&(e.actualStartTime=ah)}function vn(e){if(0<=ah){var t=nh()-ah;e.actualDuration+=t,e.selfBaseDuration=t,ah=-1}}function bn(e){if(0<=ah){var t=nh()-ah;e.actualDuration+=t,ah=-1}}function wn(){if(0<=ah){var e=nh()-ah;ah=-1,ih+=e}}function Sn(){ah=nh()}function kn(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}function En(e,t){if("object"==typeof e&&null!==e){var n=wh.get(e);return void 0!==n?n:(t={value:e,source:t,stack:x(t)},wh.set(e,t),t)}return{value:e,source:t,stack:x(t)}}function xn(e,t){_n(),Sh[kh++]=xh,Sh[kh++]=Eh,Eh=e,xh=t}function Rn(e,t,n){_n(),Rh[Ch++]=_h,Rh[Ch++]=Ph,Rh[Ch++]=Th,Th=e;var r=_h;e=Ph;var o=32-hd(r)-1;r&=~(1<<o),n+=1;var a=32-hd(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,_h=1<<32-hd(t)+o|n<<o|r,Ph=a+e}else _h=1<<a|n<<o|r,Ph=e}function Cn(e){_n(),null!==e.return&&(xn(e,1),Rn(e,1,0))}function Tn(e){for(;e===Eh;)Eh=Sh[--kh],Sh[kh]=null,xh=Sh[--kh],Sh[kh]=null;for(;e===Th;)Th=Rh[--Ch],Rh[Ch]=null,Ph=Rh[--Ch],Rh[Ch]=null,_h=Rh[--Ch],Rh[Ch]=null}function _n(){Dh||console.error("Expected to be hydrating. This is a bug in React. Please file an issue.")}function Pn(e,t){if(null===e.return){if(null===Mh)Mh={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t};else{if(Mh.fiber!==e)throw Error("Saw multiple hydration diff roots in a pass. This is a bug in React.");Mh.distanceFromLeaf>t&&(Mh.distanceFromLeaf=t)}return Mh}var n=Pn(e.return,t+1).children;return 0<n.length&&n[n.length-1].fiber===e?((n=n[n.length-1]).distanceFromLeaf>t&&(n.distanceFromLeaf=t),n):(t={fiber:e,children:[],serverProps:void 0,serverTail:[],distanceFromLeaf:t},n.push(t),t)}function Ln(e,t){Ah||((e=Pn(e,0)).serverProps=null,null!==t&&(t=nu(t),e.serverTail.push(t)))}function On(e){var t="",n=Mh;throw null!==n&&(Mh=null,t=it(n)),In(En(Error("Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch"+t),e)),Fh}function Dn(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[xd]=e,t[Rd]=r,bs(n,r),n){case"dialog":cs("cancel",t),cs("close",t);break;case"iframe":case"object":case"embed":cs("load",t);break;case"video":case"audio":for(n=0;n<Fv.length;n++)cs(Fv[n],t);break;case"source":cs("error",t);break;case"img":case"image":case"link":cs("error",t),cs("load",t);break;case"details":cs("toggle",t);break;case"input":Ee("input",r),cs("invalid",t),Ne(0,r),Fe(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),Oe(t);break;case"option":ze(0,r);break;case"select":Ee("select",r),cs("invalid",t),$e(t,r);break;case"textarea":Ee("textarea",r),cs("invalid",t),Be(0,r),Ve(t,r.value,r.defaultValue,r.children),Oe(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||xs(t.textContent,n)?(null!=r.popover&&(cs("beforetoggle",t),cs("toggle",t)),null!=r.onScroll&&cs("scroll",t),null!=r.onScrollEnd&&cs("scrollend",t),null!=r.onClick&&(t.onclick=Rs),t=!0):t=!1,t||On(e)}function An(e){for(Lh=e.return;Lh;)switch(Lh.tag){case 3:case 27:return void(Ih=!0);case 5:case 13:return void(Ih=!1);default:Lh=Lh.return}}function Mn(e){if(e!==Lh)return!1;if(!Dh)return An(e),Dh=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Hs(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Oh){for(n=Oh;n;){t=Pn(e,0);var r=nu(n);t.serverTail.push(r),n="Suspense"===r.type?ou(n):tu(n.nextSibling)}On(e)}if(An(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");Oh=ou(e)}else Oh=Lh?tu(e.stateNode.nextSibling):null;return!0}function Nn(){Oh=Lh=null,Ah=Dh=!1}function In(e){null===Nh?Nh=[e]:Nh.push(e)}function Fn(){var e=Mh;null!==e&&(Mh=null,e=it(e),console.error("A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s","https://react.dev/link/hydration-mismatch",e))}function jn(e){return"fulfilled"===(e=e.status)||"rejected"===e}function zn(){}function Un(e,t,n){null!==Lc.actQueue&&(Lc.didUsePromise=!0);var r=e.thenables;switch(void 0===(n=r[n])?r.push(t):n!==t&&(e.didWarnAboutUncachedPromise||(e.didWarnAboutUncachedPromise=!0,console.error("A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.")),t.then(zn,zn),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw $n(e=t.reason),e;default:if("string"==typeof t.status)t.then(zn,zn);else{if(null!==(e=Lg)&&100<e.shellSuspendCounter)throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw $n(e=t.reason),e}throw Hh=t,$h=!0,jh}}function Hn(){if(null===Hh)throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");var e=Hh;return Hh=null,$h=!1,e}function $n(e){if(e===jh)throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.")}function Bn(e){var t=um;return null!=e&&(um=null===t?e:t.concat(e)),t}function Wn(e,t,n){for(var r=Object.keys(e.props),o=0;o<r.length;o++){var a=r[o];if("children"!==a&&"key"!==a){null===t&&((t=Zi(e,n.mode,0))._debugInfo=um,t.return=n),T(t,(function(e){console.error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",e)}),a);break}}}function Vn(e){var t=sm;return sm+=1,null===lm&&(lm={didWarnAboutUncachedPromise:!1,thenables:[]}),Un(lm,e,t)}function qn(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Yn(e,t){if(t.$$typeof===ac)throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');throw e=Object.prototype.toString.call(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.")}function Qn(e,t){var n=b(e)||"Component";fm[n]||(fm[n]=!0,t=t.displayName||t.name||"Component",3===e.tag?console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",t,t,t):console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",t,t,n,t,n))}function Gn(e,t){var n=b(e)||"Component";pm[n]||(pm[n]=!0,t=String(t),3===e.tag?console.error("Symbols are not valid as a React child.\n  root.render(%s)",t):console.error("Symbols are not valid as a React child.\n  <%s>%s</%s>",n,t,n))}function Jn(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=Ji(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=nl(n,e.mode,r)).return=e,t._debugOwner=e,t._debugInfo=um,t):((t=o(t,n)).return=e,t._debugInfo=um,t)}function s(e,t,n,r){var a=n.type;return a===sc?(Wn(n,t=d(e,t,n.props.children,r,n.key),e),t):null!==t&&(t.elementType===a||dn(t,n)||"object"==typeof a&&null!==a&&a.$$typeof===vc&&im(a)===t.type)?(qn(t=o(t,n.props),n),t.return=e,t._debugOwner=n._owner,t._debugInfo=um,t):(qn(t=Zi(n,e.mode,r),n),t.return=e,t._debugInfo=um,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=rl(n,e.mode,r)).return=e,t._debugInfo=um,t):((t=o(t,n.children||[])).return=e,t._debugInfo=um,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=el(n,e.mode,r,a)).return=e,t._debugOwner=e,t._debugInfo=um,t):((t=o(t,n)).return=e,t._debugInfo=um,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=nl(""+t,e.mode,n)).return=e,t._debugOwner=e,t._debugInfo=um,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ic:return qn(n=Zi(t,e.mode,n),t),n.return=e,e=Bn(t._debugInfo),n._debugInfo=um,um=e,n;case lc:return(t=rl(t,e.mode,n)).return=e,t._debugInfo=um,t;case vc:var r=Bn(t._debugInfo);return e=f(e,t=im(t),n),um=r,e}if(zc(t)||y(t))return(n=el(t,e.mode,n,null)).return=e,n._debugOwner=e,e=Bn(t._debugInfo),n._debugInfo=um,um=e,n;if("function"==typeof t.then)return r=Bn(t._debugInfo),e=f(e,Vn(t),n),um=r,e;if(t.$$typeof===pc)return f(e,Ia(e,t),n);Yn(e,t)}return"function"==typeof t&&Qn(e,t),"symbol"==typeof t&&Gn(e,t),null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ic:return n.key===o?(o=Bn(n._debugInfo),e=s(e,t,n,r),um=o,e):null;case lc:return n.key===o?c(e,t,n,r):null;case vc:return o=Bn(n._debugInfo),e=h(e,t,n=im(n),r),um=o,e}if(zc(n)||y(n))return null!==o?null:(o=Bn(n._debugInfo),e=d(e,t,n,r,null),um=o,e);if("function"==typeof n.then)return o=Bn(n._debugInfo),e=h(e,t,Vn(n),r),um=o,e;if(n.$$typeof===pc)return h(e,t,Ia(e,n),r);Yn(e,n)}return"function"==typeof n&&Qn(e,n),"symbol"==typeof n&&Gn(e,n),null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ic:return n=e.get(null===r.key?n:r.key)||null,e=Bn(r._debugInfo),t=s(t,n,r,o),um=e,t;case lc:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case vc:var a=Bn(r._debugInfo);return t=m(e,t,n,r=im(r),o),um=a,t}if(zc(r)||y(r))return n=e.get(n)||null,e=Bn(r._debugInfo),t=d(t,n,r,o,null),um=e,t;if("function"==typeof r.then)return a=Bn(r._debugInfo),t=m(e,t,n,Vn(r),o),um=a,t;if(r.$$typeof===pc)return m(e,t,n,Ia(t,r),o);Yn(t,r)}return"function"==typeof r&&Qn(t,r),"symbol"==typeof r&&Gn(t,r),null}function g(e,t,n,r){if("object"!=typeof n||null===n)return r;switch(n.$$typeof){case ic:case lc:p(e,t,n);var o=n.key;if("string"!=typeof o)break;if(null===r){(r=new Set).add(o);break}if(!r.has(o)){r.add(o);break}T(t,(function(){console.error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",o)}));break;case vc:g(e,t,n=im(n),r)}return r}function v(l,s,u,c){if("object"==typeof u&&null!==u&&u.type===sc&&null===u.key&&(Wn(u,null,l),u=u.props.children),"object"==typeof u&&null!==u){switch(u.$$typeof){case ic:var d=Bn(u._debugInfo);e:{for(var p=u.key;null!==s;){if(s.key===p){if((p=u.type)===sc){if(7===s.tag){n(l,s.sibling),(c=o(s,u.props.children)).return=l,c._debugOwner=u._owner,c._debugInfo=um,Wn(u,c,l),l=c;break e}}else if(s.elementType===p||dn(s,u)||"object"==typeof p&&null!==p&&p.$$typeof===vc&&im(p)===s.type){n(l,s.sibling),qn(c=o(s,u.props),u),c.return=l,c._debugOwner=u._owner,c._debugInfo=um,l=c;break e}n(l,s);break}t(l,s),s=s.sibling}u.type===sc?((c=el(u.props.children,l.mode,c,u.key)).return=l,c._debugOwner=l,c._debugInfo=um,Wn(u,c,l),l=c):(qn(c=Zi(u,l.mode,c),u),c.return=l,c._debugInfo=um,l=c)}return l=i(l),um=d,l;case lc:e:{for(u=(d=u).key;null!==s;){if(s.key===u){if(4===s.tag&&s.stateNode.containerInfo===d.containerInfo&&s.stateNode.implementation===d.implementation){n(l,s.sibling),(c=o(s,d.children||[])).return=l,l=c;break e}n(l,s);break}t(l,s),s=s.sibling}(c=rl(d,l.mode,c)).return=l,l=c}return i(l);case vc:return d=Bn(u._debugInfo),l=v(l,s,u=im(u),c),um=d,l}if(zc(u))return d=Bn(u._debugInfo),l=function(o,i,l,s){for(var u=null,c=null,d=null,p=i,y=i=0,v=null;null!==p&&y<l.length;y++){p.index>y?(v=p,p=null):v=p.sibling;var b=h(o,p,l[y],s);if(null===b){null===p&&(p=v);break}u=g(o,b,l[y],u),e&&p&&null===b.alternate&&t(o,p),i=a(b,i,y),null===d?c=b:d.sibling=b,d=b,p=v}if(y===l.length)return n(o,p),Dh&&xn(o,y),c;if(null===p){for(;y<l.length;y++)null!==(p=f(o,l[y],s))&&(u=g(o,p,l[y],u),i=a(p,i,y),null===d?c=p:d.sibling=p,d=p);return Dh&&xn(o,y),c}for(p=r(p);y<l.length;y++)null!==(v=m(p,o,y,l[y],s))&&(u=g(o,v,l[y],u),e&&null!==v.alternate&&p.delete(null===v.key?y:v.key),i=a(v,i,y),null===d?c=v:d.sibling=v,d=v);return e&&p.forEach((function(e){return t(o,e)})),Dh&&xn(o,y),c}(l,s,u,c),um=d,l;if(y(u)){if(d=Bn(u._debugInfo),"function"!=typeof(p=y(u)))throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");var b=p.call(u);return b===u?0===l.tag&&"[object GeneratorFunction]"===Object.prototype.toString.call(l.type)&&"[object Generator]"===Object.prototype.toString.call(b)||(cm||console.error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."),cm=!0):u.entries!==p||bh||(console.error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),bh=!0),l=function(o,i,l,s){if(null==l)throw Error("An iterable object provided no iterator.");for(var u=null,c=null,d=i,p=i=0,y=null,v=null,b=l.next();null!==d&&!b.done;p++,b=l.next()){d.index>p?(y=d,d=null):y=d.sibling;var w=h(o,d,b.value,s);if(null===w){null===d&&(d=y);break}v=g(o,w,b.value,v),e&&d&&null===w.alternate&&t(o,d),i=a(w,i,p),null===c?u=w:c.sibling=w,c=w,d=y}if(b.done)return n(o,d),Dh&&xn(o,p),u;if(null===d){for(;!b.done;p++,b=l.next())null!==(d=f(o,b.value,s))&&(v=g(o,d,b.value,v),i=a(d,i,p),null===c?u=d:c.sibling=d,c=d);return Dh&&xn(o,p),u}for(d=r(d);!b.done;p++,b=l.next())null!==(y=m(d,o,p,b.value,s))&&(v=g(o,y,b.value,v),e&&null!==y.alternate&&d.delete(null===y.key?p:y.key),i=a(y,i,p),null===c?u=y:c.sibling=y,c=y);return e&&d.forEach((function(e){return t(o,e)})),Dh&&xn(o,p),u}(l,s,b,c),um=d,l}if("function"==typeof u.then)return d=Bn(u._debugInfo),l=v(l,s,Vn(u),c),um=d,l;if(u.$$typeof===pc)return v(l,s,Ia(l,u),c);Yn(l,u)}return"string"==typeof u&&""!==u||"number"==typeof u||"bigint"==typeof u?(d=""+u,null!==s&&6===s.tag?(n(l,s.sibling),(c=o(s,d)).return=l,l=c):(n(l,s),(c=nl(d,l.mode,c)).return=l,c._debugOwner=l,c._debugInfo=um,l=c),i(l)):("function"==typeof u&&Qn(l,u),"symbol"==typeof u&&Gn(l,u),n(l,s))}return function(e,t,n,r){var o=um;um=null;try{sm=0;var a=v(e,t,n,r);return lm=null,a}catch(t){if(t===jh)throw t;var i=u(29,t,null,e.mode);i.lanes=r,i.return=e;var l=i._debugInfo=um;if(i._debugOwner=e._debugOwner,null!=l)for(var s=l.length-1;0<=s;s--)if("string"==typeof l[s].stack){i._debugOwner=l[s];break}return i}finally{um=o}}}function Xn(e,t){var n=Yg;M(gm,n,e),M(ym,t,e),Yg=n|t.baseLanes}function Kn(e){M(gm,Yg,e),M(ym,ym.current,e)}function Zn(e){Yg=gm.current,A(ym,e),A(gm,e)}function er(e){var t=e.alternate;M(km,km.current&wm,e),M(vm,e,e),null===bm&&(null===t||null!==ym.current||null!==t.memoizedState)&&(bm=e)}function tr(e){if(22===e.tag){if(M(km,km.current,e),M(vm,e,e),null===bm){var t=e.alternate;null!==t&&null!==t.memoizedState&&(bm=e)}}else nr(e)}function nr(e){M(km,km.current,e),M(vm,vm.current,e)}function rr(e){A(vm,e),bm===e&&(bm=null),A(km,e)}function or(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===rb||n.data===ob))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function ar(){return{controller:new _m,data:new Map,refCount:0}}function ir(e){e.controller.signal.aborted&&console.warn("A cache instance was retained after it was already freed. This likely indicates a bug in React."),e.refCount++}function lr(e){e.refCount--,0>e.refCount&&console.warn("A cache instance was released after it was already freed. This likely indicates a bug in React."),0===e.refCount&&Pm(Lm,(function(){e.controller.abort()}))}function sr(){if(0==--Am&&null!==Dm){null!==Nm&&(Nm.status="fulfilled");var e=Dm;Dm=null,Mm=0,Nm=null;for(var t=0;t<e.length;t++)(0,e[t])()}}function ur(){var e=jm.current;return null!==e?e:Lg.pooledCache}function cr(e,t){M(jm,null===t?jm.current:t.pool,e)}function dr(){var e=ur();return null===e?null:{parent:Om._currentValue,pool:e}}function fr(){var e=ty;null===ny?ny=[e]:ny.push(e)}function pr(){var e=ty;if(null!==ny&&(ry++,ny[ry]!==e)){var t=b(Wm);if(!zm.has(t)&&(zm.add(t),null!==ny)){for(var n="",r=0;r<=ry;r++){var o=ny[r],a=r===ry?e:o;for(o=r+1+". "+o;30>o.length;)o+=" ";n+=o+=a+"\n"}console.error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}}function hr(e){null==e||zc(e)||console.error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",ty,typeof e)}function mr(){var e=b(Wm);$m.has(e)||($m.add(e),console.error("ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",e))}function yr(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.")}function gr(e,t){if(oy)return!1;if(null===t)return console.error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",ty),!1;e.length!==t.length&&console.error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",ty,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!Ep(e[n],t[n]))return!1;return!0}function vr(e,t,n,r,o,a){Bm=a,Wm=t,ny=null!==e?e._debugHookTypes:null,ry=-1,oy=null!==e&&e.type!==t.type,"[object AsyncFunction]"!==Object.prototype.toString.call(n)&&"[object AsyncGeneratorFunction]"!==Object.prototype.toString.call(n)||(a=b(Wm),Hm.has(a)||(Hm.add(a),console.error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."))),t.memoizedState=null,t.updateQueue=null,t.lanes=0,Lc.H=null!==e&&null!==e.memoizedState?uy:null!==ny?sy:ly,Gm=a=(t.mode&Zp)!==Jp;var i=Wh(n,r,o);if(Gm=!1,Qm&&(i=wr(t,n,r,o)),a){Y(!0);try{i=wr(t,n,r,o)}finally{Y(!1)}}return br(e,t),i}function br(e,t){t._debugHookTypes=ny,null===t.dependencies?null!==Km&&(t.dependencies={lanes:0,firstContext:null,_debugThenableState:Km}):t.dependencies._debugThenableState=Km,Lc.H=iy;var n=null!==Vm&&null!==Vm.next;if(Bm=0,ny=ty=qm=Vm=Wm=null,ry=-1,null!==e&&(31457280&e.flags)!=(31457280&t.flags)&&console.error("Internal React error: Expected static flag was missing. Please notify the React team."),Ym=!1,Xm=0,Km=null,n)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");null===e||Ly||null!==(e=e.dependencies)&&Aa(e)&&(Ly=!0),$h?($h=!1,e=!0):e=!1,e&&(t=b(t)||"Unknown",Um.has(t)||Hm.has(t)||(Um.add(t),console.error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.")))}function wr(e,t,n,r){Wm=e;var o=0;do{if(Qm&&(Km=null),Xm=0,Qm=!1,o>=ey)throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");if(o+=1,oy=!1,qm=Vm=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}ry=-1,Lc.H=cy,a=Wh(t,n,r)}while(Qm);return a}function Sr(){var e=Lc.H,t=e.useState()[0];return t="function"==typeof t.then?Tr(t):t,e=e.useState()[0],(null!==Vm?Vm.memoizedState:null)!==e&&(Wm.flags|=1024),t}function kr(){var e=0!==Jm;return Jm=0,e}function Er(e,t,n){t.updateQueue=e.updateQueue,t.flags=(t.mode&eh)!==Jp?-201328645&t.flags:-2053&t.flags,e.lanes&=~n}function xr(e){if(Ym){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Ym=!1}Bm=0,ny=qm=Vm=Wm=null,ry=-1,ty=null,Qm=!1,Xm=Jm=0,Km=null}function Rr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===qm?Wm.memoizedState=qm=e:qm=qm.next=e,qm}function Cr(){if(null===Vm){var e=Wm.alternate;e=null!==e?e.memoizedState:null}else e=Vm.next;var t=null===qm?Wm.memoizedState:qm.next;if(null!==t)qm=t,Vm=e;else{if(null===e){if(null===Wm.alternate)throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");throw Error("Rendered more hooks than during the previous render.")}e={memoizedState:(Vm=e).memoizedState,baseState:Vm.baseState,baseQueue:Vm.baseQueue,queue:Vm.queue,next:null},null===qm?Wm.memoizedState=qm=e:qm=qm.next=e}return qm}function Tr(e){var t=Xm;return Xm+=1,null===Km&&(Km={didWarnAboutUncachedPromise:!1,thenables:[]}),e=Un(Km,e,t),t=Wm,null===(null===qm?t.memoizedState:qm.next)&&(t=t.alternate,Lc.H=null!==t&&null!==t.memoizedState?uy:ly),e}function _r(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Tr(e);if(e.$$typeof===pc)return Na(e)}throw Error("An unsupported type was passed to use(): "+String(e))}function Pr(e){var t=null,n=Wm.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Wm.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n=ay(),Wm.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index])||oy)for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=Tc;else n.length!==e&&console.error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",n.length,e);return t.index++,n}function Lr(e,t){return"function"==typeof t?t(e):t}function Or(e,t,n){var r=Rr();if(void 0!==n){var o=n(t);if(Gm){Y(!0);try{n(t)}finally{Y(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=Io.bind(null,Wm,e),[r.memoizedState,e]}function Dr(e){return Ar(Cr(),Vm,e)}function Ar(e,t,n){var r=e.queue;if(null===r)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}t.baseQueue!==o&&console.error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var l=i=null,s=null,u=t=o.next,c=!1;do{var d=-536870913&u.lane;if(d!==u.lane?(Dg&d)===d:(Bm&d)===d){var f=u.revertLane;if(0===f)null!==s&&(s=s.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),d===Mm&&(c=!0);else{if((Bm&f)===f){u=u.next,f===Mm&&(c=!0);continue}d={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(l=s=d,i=a):s=s.next=d,Wm.lanes|=f,Gg|=f}d=u.action,Gm&&n(a,d),a=u.hasEagerState?u.eagerState:n(a,d)}else f={lane:d,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===s?(l=s=f,i=a):s=s.next=f,Wm.lanes|=d,Gg|=d;u=u.next}while(null!==u&&u!==t);if(null===s?i=a:s.next=l,!Ep(a,e.memoizedState)&&(Ly=!0,c&&null!==(n=Nm)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Mr(e){var t=Cr(),n=t.queue;if(null===n)throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);Ep(a,t.memoizedState)||(Ly=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Nr(e,t,n){var r=Wm,o=Rr();if(Dh){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");var a=n();Fm||a===n()||(console.error("The result of getServerSnapshot should be cached to avoid an infinite loop"),Fm=!0)}else{if(a=t(),Fm||(n=t(),Ep(a,n)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Fm=!0)),null===Lg)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");60&Dg||Fr(r,t,a)}return o.memoizedState=a,n={value:a,getSnapshot:t},o.queue=n,co(zr.bind(null,r,n,e),[e]),r.flags|=2048,io(xm|Tm,jr.bind(null,r,n,a,t),{destroy:void 0},null),a}function Ir(e,t,n){var r=Wm,o=Cr(),a=Dh;if(a){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");n=n()}else if(n=t(),!Fm){var i=t();Ep(n,i)||(console.error("The result of getSnapshot should be cached to avoid an infinite loop"),Fm=!0)}(i=!Ep((Vm||o).memoizedState,n))&&(o.memoizedState=n,Ly=!0),o=o.queue;var l=zr.bind(null,r,o,e);if(uo(2048,Tm,l,[e]),o.getSnapshot!==t||i||null!==qm&&qm.memoizedState.tag&xm){if(r.flags|=2048,io(xm|Tm,jr.bind(null,r,o,n,t),{destroy:void 0},null),null===Lg)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");a||60&Bm||Fr(r,t,n)}return n}function Fr(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Wm.updateQueue)?(t=ay(),Wm.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function jr(e,t,n,r){t.value=n,t.getSnapshot=r,Ur(t)&&Hr(e)}function zr(e,t,n){return n((function(){Ur(t)&&Hr(e)}))}function Ur(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Ep(e,n)}catch(e){return!0}}function Hr(e){var t=an(e,2);null!==t&&ml(t,e,2)}function $r(e){var t=Rr();if("function"==typeof e){var n=e;if(e=n(),Gm){Y(!0);try{n()}finally{Y(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Lr,lastRenderedState:e},t}function Br(e){var t=(e=$r(e)).queue,n=Fo.bind(null,Wm,t);return t.dispatch=n,[e.memoizedState,n]}function Wr(e){var t=Rr();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=zo.bind(null,Wm,!0,n),n.dispatch=t,[e,t]}function Vr(e,t){return qr(Cr(),0,e,t)}function qr(e,t,n,r){return e.baseState=n,Ar(e,Vm,"function"==typeof r?r:Lr)}function Yr(e,t){var n=Cr();return null!==Vm?qr(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])}function Qr(e,t,n,r,o){if(Uo(e))throw Error("Cannot update form state while rendering.");if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==Lc.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,Gr(t,a)):(a.next=n.next,t.pending=n.next=a)}}function Gr(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=Lc.T,i={};Lc.T=i,Lc.T._updatedFibers=new Set;try{var l=n(o,r),s=Lc.S;null!==s&&s(i,l),Jr(e,t,l)}catch(n){Kr(e,t,n)}finally{Lc.T=a,null===a&&i._updatedFibers&&(e=i._updatedFibers.size,i._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}else try{Jr(e,t,i=n(o,r))}catch(n){Kr(e,t,n)}}function Jr(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?(n.then((function(n){Xr(e,t,n)}),(function(n){return Kr(e,t,n)})),t.isTransition||console.error("An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`")):Xr(e,t,n)}function Xr(e,t,n){t.status="fulfilled",t.value=n,Zr(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Gr(e,n)))}function Kr(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Zr(t),t=t.next}while(t!==r)}e.action=null}function Zr(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function eo(e,t){return t}function to(e,t){if(Dh){var n=Lg.formState;if(null!==n){e:{var r=Wm;if(Dh){if(Oh){t:{for(var o=Oh,a=Ih;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=tu(o.nextSibling))){o=null;break t}}o=(a=o.data)===ab||a===ib?o:null}if(o){Oh=tu(o.nextSibling),r=o.data===ab;break e}}On(r)}r=!1}r&&(t=n[0])}}return(n=Rr()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:eo,lastRenderedState:t},n.queue=r,n=Fo.bind(null,Wm,r),r.dispatch=n,r=$r(!1),a=zo.bind(null,Wm,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Rr()).queue=o,n=Qr.bind(null,Wm,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function no(e){return ro(Cr(),Vm,e)}function ro(e,t,n){t=Ar(e,t,eo)[0],e=Dr(Lr)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?Tr(t):t;var r=Cr(),o=r.queue,a=o.dispatch;return n!==r.memoizedState&&(Wm.flags|=2048,io(xm|Tm,oo.bind(null,o,n),{destroy:void 0},null)),[t,a,e]}function oo(e,t){e.action=t}function ao(e){var t=Cr(),n=Vm;if(null!==n)return ro(t,n,e);Cr(),t=t.memoizedState;var r=(n=Cr()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function io(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Wm.updateQueue)&&(t=ay(),Wm.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function lo(e){return e={current:e},Rr().memoizedState=e}function so(e,t,n,r){var o=Rr();Wm.flags|=e,o.memoizedState=io(xm|t,n,{destroy:void 0},void 0===r?null:r)}function uo(e,t,n,r){var o=Cr();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==Vm&&null!==r&&gr(r,Vm.memoizedState.deps)?o.memoizedState=io(t,n,a,r):(Wm.flags|=e,o.memoizedState=io(xm|t,n,a,r))}function co(e,t){(Wm.mode&eh)!==Jp&&(Wm.mode&th)===Jp?so(142608384,Tm,e,t):so(8390656,Tm,e,t)}function fo(e,t){var n=4194308;return(Wm.mode&eh)!==Jp&&(n|=67108864),so(n,Cm,e,t)}function po(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return t.hasOwnProperty("current")||console.error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(t).join(", ")+"}"),e=e(),t.current=e,function(){t.current=null}}function ho(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null;var r=4194308;(Wm.mode&eh)!==Jp&&(r|=67108864),so(r,Cm,po.bind(null,t,e),n)}function mo(e,t,n){"function"!=typeof t&&console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null"),n=null!=n?n.concat([e]):null,uo(4,Cm,po.bind(null,t,e),n)}function yo(e,t){return Rr().memoizedState=[e,void 0===t?null:t],e}function go(e,t){var n=Cr();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&gr(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function vo(e,t){var n=Rr();t=void 0===t?null:t;var r=e();if(Gm){Y(!0);try{e()}finally{Y(!1)}}return n.memoizedState=[r,t],r}function bo(e,t){var n=Cr();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&gr(t,r[1]))return r[0];if(r=e(),Gm){Y(!0);try{e()}finally{Y(!1)}}return n.memoizedState=[r,t],r}function wo(e,t){return Eo(Rr(),e,t)}function So(e,t){return xo(Cr(),Vm.memoizedState,e,t)}function ko(e,t){var n=Cr();return null===Vm?Eo(n,e,t):xo(n,Vm.memoizedState,e,t)}function Eo(e,t,n){return void 0===n||1073741824&Bm?e.memoizedState=t:(e.memoizedState=n,e=hl(),Wm.lanes|=e,Gg|=e,n)}function xo(e,t,n,r){return Ep(n,t)?n:null!==ym.current?(e=Eo(e,n,r),Ep(e,t)||(Ly=!0),e):42&Bm?(e=hl(),Wm.lanes|=e,Gg|=e,t):(Ly=!0,e.memoizedState=n)}function Ro(e,t,n,r,o){var a=Uc.p;Uc.p=0!==a&&a<wd?a:wd;var i,l,s,u=Lc.T,c={};Lc.T=c,zo(e,!1,t,n),c._updatedFibers=new Set;try{var d=o(),f=Lc.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?jo(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),pl(e)):jo(e,t,r,pl(e))}catch(n){jo(e,t,{then:function(){},status:"rejected",reason:n},pl(e))}finally{Uc.p=a,Lc.T=u,null===u&&c._updatedFibers&&(e=c._updatedFibers.size,c._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."))}}function Co(e,t,n,r){if(5!==e.tag)throw Error("Expected the form instance to be a HostComponent. This is a bug in React.");var o=To(e).queue;Ro(e,o,t,$b,null===n?f:function(){return _o(e),n(r)})}function To(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:$b,baseState:$b,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Lr,lastRenderedState:$b},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Lr,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function _o(e){null===Lc.T&&console.error("requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."),jo(e,To(e).next.queue,{},pl(e))}function Po(){var e=$r(!1);return e=Ro.bind(null,Wm,e.queue,!0,!1),Rr().memoizedState=e,[!1,e]}function Lo(){var e=Dr(Lr)[0],t=Cr().memoizedState;return["boolean"==typeof e?e:Tr(e),t]}function Oo(){var e=Mr(Lr)[0],t=Cr().memoizedState;return["boolean"==typeof e?e:Tr(e),t]}function Do(){return Na(Bb)}function Ao(){var e=Rr(),t=Lg.identifierPrefix;if(Dh){var n=Ph;t=":"+t+"R"+(n=(_h&~(1<<32-hd(_h)-1)).toString(32)+n),0<(n=Jm++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Zm++).toString(32)+":";return e.memoizedState=t}function Mo(){return Rr().memoizedState=No.bind(null,Wm)}function No(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var r=pl(n),o=Ha(n,e=Ua(r),r);return null!==o&&(ml(o,n,r),$a(o,n,r)),n=ar(),null!=t&&null!==o&&console.error("The seed argument is not enabled outside experimental channels."),void(e.payload={cache:n})}n=n.return}}function Io(e,t,n,r){"function"==typeof r&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."),n={lane:r=pl(e),revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Uo(e)?Ho(t,n):null!==(n=on(e,t,n,r))&&(ml(n,e,r),$o(n,t,r)),Z(e,r)}function Fo(e,t,n,r){"function"==typeof r&&console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."),jo(e,t,n,r=pl(e)),Z(e,r)}function jo(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Uo(e))Ho(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer)){var i=Lc.H;Lc.H=fy;try{var l=t.lastRenderedState,s=a(l,n);if(o.hasEagerState=!0,o.eagerState=s,Ep(s,l))return rn(e,t,o,0),null===Lg&&nn(),!1}catch(e){}finally{Lc.H=i}}if(null!==(n=on(e,t,o,r)))return ml(n,e,r),$o(n,t,r),!0}return!1}function zo(e,t,n,r){if(null===Lc.T&&0===Mm&&console.error("An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."),r={lane:2,revertLane:is(),action:r,hasEagerState:!1,eagerState:null,next:null},Uo(e)){if(t)throw Error("Cannot update optimistic state while rendering.");console.error("Cannot call startTransition while rendering.")}else null!==(t=on(e,n,r,2))&&ml(t,e,2);Z(e,2)}function Uo(e){var t=e.alternate;return e===Wm||null!==t&&t===Wm}function Ho(e,t){Qm=Ym=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function $o(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ce(e,n)}}function Bo(e){if(null!==e&&"function"!=typeof e){var t=String(e);xy.has(t)||(xy.add(t),console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",e))}}function Wo(e,t,n,r){var o=e.memoizedState,a=n(r,o);if(e.mode&Zp){Y(!0);try{a=n(r,o)}finally{Y(!1)}}void 0===a&&(t=g(t)||"Component",wy.has(t)||(wy.add(t),console.error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",t))),o=null==a?o:Oc({},o,a),e.memoizedState=o,0===e.lanes&&(e.updateQueue.baseState=o)}function Vo(e,t,n,r,o,a,i){var l=e.stateNode;if("function"==typeof l.shouldComponentUpdate){if(n=l.shouldComponentUpdate(r,a,i),e.mode&Zp){Y(!0);try{n=l.shouldComponentUpdate(r,a,i)}finally{Y(!1)}}return void 0===n&&console.error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",g(t)||"Component"),n}return!(t.prototype&&t.prototype.isPureReactComponent&&Vt(n,r)&&Vt(o,a))}function qo(e,t,n,r){var o=t.state;"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==o&&(e=b(e)||"Component",my.has(e)||(my.add(e),console.error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",e)),Ry.enqueueReplaceState(t,t.state,null))}function Yo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=Oc({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}function Qo(e,t){Cy(e),e=Ty?"An error occurred in the <"+Ty+"> component.":"An error occurred in one of your React components.";var n=Lc.getCurrentStack,r=null!=t.componentStack?t.componentStack:"";Lc.getCurrentStack=function(){return r};try{console.warn("%s\n\n%s\n",e,"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries.")}finally{Lc.getCurrentStack=n}}function Go(e,t){var n=Ty?"The above error occurred in the <"+Ty+"> component.":"The above error occurred in one of your React components.",r="React will try to recreate this component tree from scratch using the error boundary you provided, "+(_y||"Anonymous")+".",o=Lc.getCurrentStack,a=null!=t.componentStack?t.componentStack:"";Lc.getCurrentStack=function(){return a};try{"object"==typeof e&&null!==e&&"string"==typeof e.environmentName?function(e,t,n){var r=0;switch(e){case"dir":case"dirxml":case"groupEnd":case"table":return Qb.apply(console[e],[console].concat(t));case"assert":r=1}return"string"==typeof(t=t.slice(0))[r]?t.splice(r,1,Wb+t[r],Vb,Yb+n+Yb,qb):t.splice(r,0,Wb,Vb,Yb+n+Yb,qb),t.unshift(console),Qb.apply(console[e],t)}("error",["%o\n\n%s\n\n%s\n",e,n,r],e.environmentName)():console.error("%o\n\n%s\n\n%s\n",e,n,r)}finally{Lc.getCurrentStack=o}}function Jo(e){Cy(e)}function Xo(e,t){try{Ty=t.source?b(t.source):null,_y=null;var n=t.value;null!==Lc.actQueue?Lc.thrownErrors.push(n):(0,e.onUncaughtError)(n,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Ko(e,t,n){try{Ty=n.source?b(n.source):null,_y=b(t),(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Zo(e,t,n){return(n=Ua(n)).tag=Gy,n.payload={element:null},n.callback=function(){T(t.source,Xo,e,t)},n}function ea(e){return(e=Ua(e)).tag=Gy,e}function ta(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){fn(n),T(r.source,Ko,t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){fn(n),T(r.source,Ko,t,n,r),"function"!=typeof o&&(null===sv?sv=new Set([this]):sv.add(this)),Kh(this,r),"function"==typeof o||!(2&n.lanes)&&console.error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",b(n)||"Unknown")})}function na(e,t,n,r){t.child=null===e?mm(t,null,n,r):hm(t,e.child,n,r)}function ra(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Ma(t),G(t),r=vr(e,t,n,i,a,o),l=kr(),J(),null===e||Ly?(Dh&&l&&Cn(t),t.flags|=1,na(e,t,r,o),t.child):(Er(e,t,o),xa(e,t,o))}function oa(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Gi(a)||void 0!==a.defaultProps||null!==n.compare?((e=Ki(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(n=un(a),t.tag=15,t.type=n,pa(t,a),aa(e,t,n,r,o))}if(a=e.child,!Ra(e,o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:Vt)(i,r)&&e.ref===t.ref)return xa(e,t,o)}return t.flags|=1,(e=Ji(a,r)).ref=t.ref,e.return=t,t.child=e}function aa(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Vt(a,r)&&e.ref===t.ref&&t.type===e.type){if(Ly=!1,t.pendingProps=r=a,!Ra(e,o))return t.lanes=e.lanes,xa(e,t,o);131072&e.flags&&(Ly=!0)}}return ua(e,t,n,r,o)}function ia(e,t,n){var r=t.pendingProps,o=r.children,a=!!(t.stateNode._pendingVisibility&$p),i=null!==e?e.memoizedState:null;if(sa(e,t),"hidden"===r.mode||a){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return la(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,la(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&cr(t,null!==i?i.cachePool:null),null!==i?Xn(t,i):Kn(t),tr(t)}else null!==i?(cr(t,i.cachePool),Xn(t,i),nr(t),t.memoizedState=null):(null!==e&&cr(t,null),Kn(t),nr(t));return na(e,t,o,n),t.child}function la(e,t,n,r){var o=ur();return o=null===o?null:{parent:Om._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&cr(t,null),Kn(t),tr(t),null!==e&&Da(e,t,r,!0),null}function sa(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");null!==e&&e.ref===n||(t.flags|=2097664)}}function ua(e,t,n,r,o){if(n.prototype&&"function"==typeof n.prototype.render){var a=g(n)||"Unknown";Oy[a]||(console.error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",a,a),Oy[a]=!0)}return t.mode&Zp&&uh.recordLegacyContextWarning(t,null),null===e&&(pa(t,t.type),n.contextTypes&&(a=g(n)||"Unknown",Ay[a]||(Ay[a]=!0,console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",a)))),Ma(t),G(t),n=vr(e,t,n,r,void 0,o),r=kr(),J(),null===e||Ly?(Dh&&r&&Cn(t),t.flags|=1,na(e,t,n,o),t.child):(Er(e,t,o),xa(e,t,o))}function ca(e,t,n,r,o,a){return Ma(t),G(t),ry=-1,oy=null!==e&&e.type!==t.type,t.updateQueue=null,n=wr(t,r,n,o),br(e,t),r=kr(),J(),null===e||Ly?(Dh&&r&&Cn(t),t.flags|=1,na(e,t,n,a),t.child):(Er(e,t,a),xa(e,t,a))}function da(e,t,n,r,o){switch(s(t)){case!1:var a=t.stateNode,i=new t.type(t.memoizedProps,a.context).state;a.updater.enqueueSetState(a,i,null);break;case!0:t.flags|=128,t.flags|=65536,a=Error("Simulated error coming from DevTools");var l=o&-o;if(t.lanes|=l,null===(i=Lg))throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");ta(l=ea(l),i,t,En(a,t)),Ba(t,l)}if(Ma(t),null===t.stateNode){if(i=Yp,a=n.contextType,"contextType"in n&&null!==a&&(void 0===a||a.$$typeof!==pc)&&!Ey.has(n)&&(Ey.add(n),l=void 0===a?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof a?" However, it is set to a "+typeof a+".":a.$$typeof===fc?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(a).join(", ")+"}.",console.error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",g(n)||"Component",l)),"object"==typeof a&&null!==a&&(i=Na(a)),a=new n(r,i),t.mode&Zp){Y(!0);try{a=new n(r,i)}finally{Y(!1)}}if(i=t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=Ry,t.stateNode=a,a._reactInternals=t,a._reactInternalInstance=hy,"function"==typeof n.getDerivedStateFromProps&&null===i&&(i=g(n)||"Component",yy.has(i)||(yy.add(i),console.error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",i,null===a.state?"null":"undefined",i))),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate){var u=l=i=null;if("function"==typeof a.componentWillMount&&!0!==a.componentWillMount.__suppressDeprecationWarning?i="componentWillMount":"function"==typeof a.UNSAFE_componentWillMount&&(i="UNSAFE_componentWillMount"),"function"==typeof a.componentWillReceiveProps&&!0!==a.componentWillReceiveProps.__suppressDeprecationWarning?l="componentWillReceiveProps":"function"==typeof a.UNSAFE_componentWillReceiveProps&&(l="UNSAFE_componentWillReceiveProps"),"function"==typeof a.componentWillUpdate&&!0!==a.componentWillUpdate.__suppressDeprecationWarning?u="componentWillUpdate":"function"==typeof a.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==i||null!==l||null!==u){a=g(n)||"Component";var c="function"==typeof n.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";vy.has(a)||(vy.add(a),console.error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",a,c,null!==i?"\n  "+i:"",null!==l?"\n  "+l:"",null!==u?"\n  "+u:""))}}a=t.stateNode,i=g(n)||"Component",a.render||(n.prototype&&"function"==typeof n.prototype.render?console.error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?",i):console.error("No `render` method found on the %s instance: you may have forgotten to define `render`.",i)),!a.getInitialState||a.getInitialState.isReactClassApproved||a.state||console.error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",i),a.getDefaultProps&&!a.getDefaultProps.isReactClassApproved&&console.error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",i),a.contextType&&console.error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",i),n.childContextTypes&&!ky.has(n)&&(ky.add(n),console.error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",i)),n.contextTypes&&!Sy.has(n)&&(Sy.add(n),console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",i)),"function"==typeof a.componentShouldUpdate&&console.error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",i),n.prototype&&n.prototype.isPureReactComponent&&void 0!==a.shouldComponentUpdate&&console.error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",g(n)||"A pure component"),"function"==typeof a.componentDidUnmount&&console.error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",i),"function"==typeof a.componentDidReceiveProps&&console.error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",i),"function"==typeof a.componentWillRecieveProps&&console.error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",i),"function"==typeof a.UNSAFE_componentWillRecieveProps&&console.error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",i),l=a.props!==r,void 0!==a.props&&l&&console.error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",i),a.defaultProps&&console.error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",i,i),"function"!=typeof a.getSnapshotBeforeUpdate||"function"==typeof a.componentDidUpdate||gy.has(n)||(gy.add(n),console.error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",g(n))),"function"==typeof a.getDerivedStateFromProps&&console.error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof a.getDerivedStateFromError&&console.error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof n.getSnapshotBeforeUpdate&&console.error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",i),(l=a.state)&&("object"!=typeof l||zc(l))&&console.error("%s.state: must be set to an object or null",i),"function"==typeof a.getChildContext&&"object"!=typeof n.childContextTypes&&console.error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",i),(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ja(t),i=n.contextType,a.context="object"==typeof i&&null!==i?Na(i):Yp,a.state===r&&(i=g(n)||"Component",by.has(i)||(by.add(i),console.error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",i))),t.mode&Zp&&uh.recordLegacyContextWarning(t,a),uh.recordUnsafeLifecycleWarnings(t,a),a.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Wo(t,n,i,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&(console.error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",b(t)||"Component"),Ry.enqueueReplaceState(a,a.state,null)),Va(t,r,a,o),Wa(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&eh)!==Jp&&(t.flags|=67108864),a=!0}else if(null===e){a=t.stateNode;var d=t.memoizedProps;l=Yo(n,d),a.props=l;var f=a.context;u=n.contextType,i=Yp,"object"==typeof u&&null!==u&&(i=Na(u)),u="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate,d=t.pendingProps!==d,u||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(d||f!==i)&&qo(t,a,r,i),Jy=!1;var p=t.memoizedState;a.state=p,Va(t,r,a,o),Wa(),f=t.memoizedState,d||p!==f||Jy?("function"==typeof c&&(Wo(t,n,c,r),f=t.memoizedState),(l=Jy||Vo(t,n,l,r,p,f,i))?(u||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&eh)!==Jp&&(t.flags|=67108864)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&eh)!==Jp&&(t.flags|=67108864),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=i,a=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),(t.mode&eh)!==Jp&&(t.flags|=67108864),a=!1)}else{a=t.stateNode,za(e,t),u=Yo(n,i=t.memoizedProps),a.props=u,c=t.pendingProps,p=a.context,f=n.contextType,l=Yp,"object"==typeof f&&null!==f&&(l=Na(f)),(f="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==c||p!==l)&&qo(t,a,r,l),Jy=!1,p=t.memoizedState,a.state=p,Va(t,r,a,o),Wa();var h=t.memoizedState;i!==c||p!==h||Jy||null!==e&&null!==e.dependencies&&Aa(e.dependencies)?("function"==typeof d&&(Wo(t,n,d,r),h=t.memoizedState),(u=Jy||Vo(t,n,u,r,p,h,l)||null!==e&&null!==e.dependencies&&Aa(e.dependencies))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,a=u):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),a=!1)}if(l=a,sa(e,t),i=!!(128&t.flags),l||i){if(l=t.stateNode,Lc.getCurrentStack=null===t?null:C,jc=!1,Fc=t,i&&"function"!=typeof n.getDerivedStateFromError)n=null,ah=-1;else{if(G(t),n=qh(l),t.mode&Zp){Y(!0);try{qh(l)}finally{Y(!1)}}J()}t.flags|=1,null!==e&&i?(t.child=hm(t,e.child,null,o),t.child=hm(t,null,n,o)):na(e,t,n,o),t.memoizedState=l.state,e=t.child}else e=xa(e,t,o);return o=t.stateNode,a&&o.props!==r&&(Ny||console.error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",b(t)||"a component"),Ny=!0),e}function fa(e,t,n,r){return Nn(),t.flags|=256,na(e,t,n,r),t.child}function pa(e,t){t&&t.childContextTypes&&console.error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",t.displayName||t.name||"Component"),"function"==typeof t.getDerivedStateFromProps&&(e=g(t)||"Unknown",My[e]||(console.error("%s: Function components do not support getDerivedStateFromProps.",e),My[e]=!0)),"object"==typeof t.contextType&&null!==t.contextType&&(t=g(t)||"Unknown",Dy[t]||(console.error("%s: Function components do not support contextType.",t),Dy[t]=!0))}function ha(e){return{baseLanes:e,cachePool:dr()}}function ma(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=Kg),e}function ya(e,t,n){var r,o=t.pendingProps;l(t)&&(t.flags|=128);var a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(km.current&Sm)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Dh){if(a?er(t):nr(t),Dh){var s,c=Oh;if(!(s=!c)){e:{var d=c;for(s=Ih;8!==d.nodeType;){if(!s){s=null;break e}if(null===(d=tu(d.nextSibling))){s=null;break e}}s=d}null!==s?(_n(),t.memoizedState={dehydrated:s,treeContext:null!==Th?{id:_h,overflow:Ph}:null,retryLane:536870912},(d=u(18,null,null,Jp)).stateNode=s,d.return=t,t.child=d,Lh=t,Oh=null,s=!0):s=!1,s=!s}s&&(Ln(t,c),On(t))}if(null!==(c=t.memoizedState)&&null!==(c=c.dehydrated))return c.data===ob?t.lanes=16:t.lanes=536870912,null;rr(t)}return c=o.children,o=o.fallback,a?(nr(t),c=va({mode:"hidden",children:c},a=t.mode),o=el(o,a,n,null),c.return=t,o.return=t,c.sibling=o,t.child=c,(a=t.child).memoizedState=ha(n),a.childLanes=ma(e,r,n),t.memoizedState=jy,o):(er(t),ga(t,c))}var f=e.memoizedState;if(null!==f&&null!==(c=f.dehydrated)){if(i)256&t.flags?(er(t),t.flags&=-257,t=ba(e,t,n)):null!==t.memoizedState?(nr(t),t.child=e.child,t.flags|=128,t=null):(nr(t),a=o.fallback,c=t.mode,o=va({mode:"visible",children:o.children},c),(a=el(a,c,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,hm(t,e.child,null,n),(o=t.child).memoizedState=ha(n),o.childLanes=ma(e,r,n),t.memoizedState=jy,t=a);else if(er(t),Dh&&console.error("We should not be hydrating here. This is a bug in React. Please file a bug."),c.data===ob){if(r=c.nextSibling&&c.nextSibling.dataset){s=r.dgst;var p=r.msg;d=r.stck;var h=r.cstck}r=s,o=d,s=a=h,(a=(c=p)?Error(c):Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")).stack=o||"",a.digest=r,o={value:a,source:null,stack:r=void 0===s?null:s},"string"==typeof r&&wh.set(a,o),In(o),t=ba(e,t,n)}else if(Ly||Da(e,t,n,!1),r=!!(n&e.childLanes),Ly||r){if(null!==(r=Lg)){if(42&(o=n&-n))o=1;else switch(o){case 2:o=1;break;case 8:o=4;break;case 32:o=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:o=64;break;case 268435456:o=134217728;break;default:o=0}if(0!==(o=o&(r.suspendedLanes|n)?0:o)&&o!==f.retryLane)throw f.retryLane=o,an(e,o),ml(r,e,o),Py}c.data===rb||Tl(),t=ba(e,t,n)}else c.data===rb?(t.flags|=128,t.child=e.child,t=Vl.bind(null,e),c._reactRetry=t,t=null):(e=f.treeContext,Oh=tu(c.nextSibling),Lh=t,Dh=!0,Nh=null,Ah=!1,Mh=null,Ih=!1,null!==e&&(_n(),Rh[Ch++]=_h,Rh[Ch++]=Ph,Rh[Ch++]=Th,_h=e.id,Ph=e.overflow,Th=t),(t=ga(t,o.children)).flags|=4096);return t}return a?(nr(t),a=o.fallback,c=t.mode,d=(s=e.child).sibling,(o=Ji(s,{mode:"hidden",children:o.children})).subtreeFlags=31457280&s.subtreeFlags,null!==d?a=Ji(d,a):(a=el(a,c,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(c=e.child.memoizedState)?c=ha(n):(null!==(s=c.cachePool)?(d=Om._currentValue,s=s.parent!==d?{parent:d,pool:d}:s):s=dr(),c={baseLanes:c.baseLanes|n,cachePool:s}),a.memoizedState=c,a.childLanes=ma(e,r,n),t.memoizedState=jy,o):(er(t),e=(n=e.child).sibling,(n=Ji(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ga(e,t){return(t=va({mode:"visible",children:t},e.mode)).return=e,e.child=t}function va(e,t){return tl(e,t,0,null)}function ba(e,t,n){return hm(t,e.child,null,n),(e=ga(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function wa(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),La(e.return,t,n)}function Sa(e,t){var n=zc(e);return e=!n&&"function"==typeof y(e),!n&&!e||(n=n?"array":"iterable",console.error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",n,t,n),!1)}function ka(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ea(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(r=r.children,void 0!==o&&"forwards"!==o&&"backwards"!==o&&"together"!==o&&!Iy[o])if(Iy[o]=!0,"string"==typeof o)switch(o.toLowerCase()){case"together":case"forwards":case"backwards":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',o,o.toLowerCase());break;case"forward":case"backward":console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',o,o.toLowerCase());break;default:console.error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o)}else console.error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',o);void 0===a||Fy[a]||("collapsed"!==a&&"hidden"!==a?(Fy[a]=!0,console.error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',a)):"forwards"!==o&&"backwards"!==o&&(Fy[a]=!0,console.error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',a)));e:if(("forwards"===o||"backwards"===o)&&null!=r&&!1!==r)if(zc(r)){for(var i=0;i<r.length;i++)if(!Sa(r[i],i))break e}else if(i=y(r),"function"==typeof i){if(i=i.call(r))for(var l=i.next(),s=0;!l.done;l=i.next()){if(!Sa(l.value,s))break e;s++}}else console.error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',o);if(na(e,t,r,n),(r=km.current)&Sm)r=r&wm|Sm,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&wa(e,n,t);else if(19===e.tag)wa(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=wm}switch(M(km,r,t),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===or(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ka(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===or(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ka(t,!0,n,null,a);break;case"together":ka(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function xa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ah=-1,Gg|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Da(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){for(n=Ji(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ji(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ra(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Aa(e))}function Ca(e,t,n){if(t._debugNeedsRemount&&null!==e){n=Ki(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes);var r=t.return;if(null===r)throw Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,n._debugInfo=t._debugInfo,t===r.child)r.child=n;else{var o=r.child;if(null===o)throw Error("Expected parent to have a child.");for(;o.sibling!==t;)if(null===(o=o.sibling))throw Error("Expected to find the previous sibling.");o.sibling=n}return null===(t=r.deletions)?(r.deletions=[e],r.flags|=16):t.push(e),n.flags|=2,n}if(null!==e)if(e.memoizedProps!==t.pendingProps||t.type!==e.type)Ly=!0;else{if(!(Ra(e,n)||128&t.flags))return Ly=!1,function(e,t,n){switch(t.tag){case 3:I(t,t.stateNode.containerInfo),_a(t,Om,e.memoizedState.cache),Nn();break;case 27:case 5:z(t);break;case 4:I(t,t.stateNode.containerInfo);break;case 10:_a(t,t.type,t.memoizedProps.value);break;case 12:n&t.childLanes&&(t.flags|=4),t.flags|=2048;var r=t.stateNode;r.effectDuration=-0,r.passiveEffectDuration=-0;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(er(t),t.flags|=128,null):n&t.child.childLanes?ya(e,t,n):(er(t),null!==(e=xa(e,t,n))?e.sibling:null);er(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Da(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return Ea(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),M(km,km.current,t),r)break;return null;case 22:case 23:return t.lanes=0,ia(e,t,n);case 24:_a(t,Om,e.memoizedState.cache)}return xa(e,t,n)}(e,t,n);Ly=!!(131072&e.flags)}else Ly=!1,(r=Dh)&&(_n(),r=!!(1048576&t.flags)),r&&(r=t.index,_n(),Rn(t,xh,r));switch(t.lanes=0,t.tag){case 16:e:{if(r=t.pendingProps,e=im(t.elementType),t.type=e,"function"!=typeof e){if(null!=e){if((o=e.$$typeof)===hc){t.tag=11,t.type=e=cn(e),t=ra(null,t,e,r,n);break e}if(o===gc){t.tag=14,t=oa(null,t,e,r,n);break e}}throw t="",null!==e&&"object"==typeof e&&e.$$typeof===vc&&(t=" Did you wrap a component in React.lazy() more than once?"),e=g(e)||e,Error("Element type is invalid. Received a promise that resolves to: "+e+". Lazy element type must resolve to a class or function."+t)}Gi(e)?(r=Yo(e,r),t.tag=1,t.type=e=un(e),t=da(null,t,e,r,n)):(t.tag=0,pa(t,e),t.type=e=un(e),t=ua(null,t,e,r,n))}return t;case 0:return ua(e,t,t.type,t.pendingProps,n);case 1:return da(e,t,r=t.type,o=Yo(r,t.pendingProps),n);case 3:e:{if(I(t,t.stateNode.containerInfo),null===e)throw Error("Should have a current fiber. This is a bug in React.");var a=t.pendingProps;r=(o=t.memoizedState).element,za(e,t),Va(t,a,null,n);var i=t.memoizedState;if(a=i.cache,_a(t,Om,a),a!==o.cache&&Oa(t,[Om],n,!0),Wa(),a=i.element,o.isDehydrated){if(o={element:a,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=fa(e,t,a,n);break e}if(a!==r){In(r=En(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."),t)),t=fa(e,t,a,n);break e}for(Oh=tu(t.stateNode.containerInfo.firstChild),Lh=t,Dh=!0,Nh=null,Ah=!1,Mh=null,Ih=!0,e=mm(t,null,a,n),t.child=e;e;)e.flags=-3&e.flags|4096,e=e.sibling}else{if(Nn(),a===r){t=xa(e,t,n);break e}na(e,t,a,n)}t=t.child}return t;case 26:return sa(e,t),null===e?(e=fu(t.type,null,t.pendingProps,null))?t.memoizedState=e:Dh||(e=t.type,n=t.pendingProps,(r=js(r=N(Yc.current)).createElement(e))[xd]=t,r[Rd]=n,_s(r,e,n),we(r),t.stateNode=r):t.memoizedState=fu(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return z(t),null===e&&Dh&&(o=N(Yc.current),r=j(),o=t.stateNode=su(t.type,t.pendingProps,o,r,!1),Ah||null!==(r=Fs(o,t.type,t.pendingProps,r))&&(Pn(t,0).serverProps=r),Lh=t,Ih=!0,Oh=tu(o.firstChild)),r=t.pendingProps.children,null!==e||Dh?na(e,t,r,n):t.child=hm(t,null,r,n),sa(e,t),t.child;case 5:return null===e&&Dh&&(a=j(),r=dt(t.type,a.ancestorInfo),(i=!(o=Oh))||(null!==(i=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Od])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;W(o.name,"name");var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=tu(e.nextSibling)))break}return null}(o,t.type,t.pendingProps,Ih))?(t.stateNode=i,Ah||null!==(a=Fs(i,t.type,t.pendingProps,a))&&(Pn(t,0).serverProps=a),Lh=t,Oh=tu(i.firstChild),Ih=!1,a=!0):a=!1,i=!a),i&&(r&&Ln(t,o),On(t))),z(t),o=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,Hs(o,a)?r=null:null!==i&&Hs(o,i)&&(t.flags|=32),null!==t.memoizedState&&(o=vr(e,t,Sr,null,null,n),Bb._currentValue=o),sa(e,t),na(e,t,r,n),t.child;case 6:return null===e&&Dh&&(e=t.pendingProps,e=null==(n=j().ancestorInfo.current)||ft(e,n.tag),(r=!(n=Oh))||(null!==(r=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=tu(e.nextSibling)))return null}return e}(n,t.pendingProps,Ih))?(t.stateNode=r,Lh=t,Oh=null,r=!0):r=!1,r=!r),r&&(e&&Ln(t,n),On(t))),null;case 13:return ya(e,t,n);case 4:return I(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=hm(t,null,r,n):na(e,t,r,n),t.child;case 11:return ra(e,t,t.type,t.pendingProps,n);case 7:return na(e,t,t.pendingProps,n),t.child;case 8:return na(e,t,t.pendingProps.children,n),t.child;case 12:return t.flags|=4,t.flags|=2048,(r=t.stateNode).effectDuration=-0,r.passiveEffectDuration=-0,na(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.type,a=(o=t.pendingProps).value,"value"in o||zy||(zy=!0,console.error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?")),_a(t,r,a),na(e,t,o.children,n),t.child;case 9:return o=t.type._context,"function"!=typeof(r=t.pendingProps.children)&&console.error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Ma(t),o=Na(o),G(t),r=Wh(r,o,void 0),J(),t.flags|=1,na(e,t,r,n),t.child;case 14:return oa(e,t,t.type,t.pendingProps,n);case 15:return aa(e,t,t.type,t.pendingProps,n);case 19:return Ea(e,t,n);case 22:return ia(e,t,n);case 24:return Ma(t),r=Na(Om),null===e?(null===(o=ur())&&(o=Lg,a=ar(),o.pooledCache=a,ir(a),null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},ja(t),_a(t,Om,o)):(!!(e.lanes&n)&&(za(e,t),Va(t,null,null,n),Wa()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),_a(t,Om,r)):(r=a.cache,_a(t,Om,r),r!==o.cache&&Oa(t,[Om],n,!0))),na(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function Ta(){Wy=By=null,Vy=!1}function _a(e,t,n){M(Uy,t._currentValue,e),t._currentValue=n,M(Hy,t._currentRenderer,e),void 0!==t._currentRenderer&&null!==t._currentRenderer&&t._currentRenderer!==$y&&console.error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=$y}function Pa(e,t){e._currentValue=Uy.current;var n=Hy.current;A(Hy,t),e._currentRenderer=n,A(Uy,t)}function La(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}e!==n&&console.error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.")}function Oa(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var i=o.child;a=a.firstContext;e:for(;null!==a;){var l=a;a=o;for(var s=0;s<t.length;s++)if(l.context===t[s]){a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),La(a.return,n,e),r||(i=null);break e}a=l.next}}else if(18===o.tag){if(null===(i=o.return))throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),La(i,n,e),i=null}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Da(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var i=o.alternate;if(null===i)throw Error("Should have a current fiber. This is a bug in React.");if(null!==(i=i.memoizedProps)){var l=o.type;Ep(o.pendingProps.value,i.value)||(null!==e?e.push(l):e=[l])}}else if(o===Qc.current){if(null===(i=o.alternate))throw Error("Should have a current fiber. This is a bug in React.");i.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Bb):e=[Bb])}o=o.return}null!==e&&Oa(t,e,n,r),t.flags|=262144}function Aa(e){for(e=e.firstContext;null!==e;){if(!Ep(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ma(e){By=e,Wy=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Na(e){return Vy&&console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),Fa(By,e)}function Ia(e,t){return null===By&&Ma(e),Fa(e,t)}function Fa(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===Wy){if(null===e)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");Wy=t,e.dependencies={lanes:0,firstContext:t,_debugThenableState:null},e.flags|=524288}else Wy=Wy.next=t;return n}function ja(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function za(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ua(e){return{lane:e,tag:qy,payload:null,callback:null,next:null}}function Ha(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,Ky===r&&!Xy){var o=b(e);console.error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",o),Xy=!0}return(Pg&wg)!==bg?(null===(o=r.pending)?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=sn(e),ln(e,null,n),t):(rn(e,r,t,n),sn(e))}function $a(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ce(e,n)}}function Ba(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Wa(){if(Zy&&null!==Nm)throw Nm}function Va(e,t,n,r){Zy=!1;var o=e.updateQueue;Jy=!1,Ky=o.shared;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(Dg&f)===f:(r&f)===f){0!==f&&f===Mm&&(Zy=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{f=e;var h=l,m=t,y=n;switch(h.tag){case Yy:if("function"==typeof(h=h.payload)){Vy=!0;var g=h.call(y,d,m);if(f.mode&Zp){Y(!0);try{h.call(y,d,m)}finally{Y(!1)}}Vy=!1,d=g;break e}d=h;break e;case Gy:f.flags=-65537&f.flags|128;case qy:if("function"==typeof(g=h.payload)){if(Vy=!0,h=g.call(y,d,m),f.mode&Zp){Y(!0);try{g.call(y,d,m)}finally{Y(!1)}}Vy=!1}else h=g;if(null==h)break e;d=Oc({},d,h);break e;case Qy:Jy=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),Gg|=i,e.lanes=i,e.memoizedState=d}Ky=null}function qa(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function Ya(e,t){var n=e.shared.hiddenCallbacks;if(null!==n)for(e.shared.hiddenCallbacks=null,e=0;e<n.length;e++)qa(n[e],t)}function Qa(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)qa(n[e],t)}function Ga(e){return(e.mode&Kp)!==Jp}function Ja(e,t){Ga(e)?(Sn(),Ka(t,e),wn()):Ka(t,e)}function Xa(e,t,n){Ga(e)?(Sn(),Za(n,e,t),wn()):Za(n,e,t)}function Ka(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{var a;if((n.tag&e)===e&&((e&Tm)!==Em?null!==dd&&"function"==typeof dd.markComponentPassiveEffectMountStarted&&dd.markComponentPassiveEffectMountStarted(t):(e&Cm)!==Em&&null!==dd&&"function"==typeof dd.markComponentLayoutEffectMountStarted&&dd.markComponentLayoutEffectMountStarted(t),r=void 0,(e&Rm)!==Em&&(kv=!0),r=T(t,nm,n),(e&Rm)!==Em&&(kv=!1),(e&Tm)!==Em?null!==dd&&"function"==typeof dd.markComponentPassiveEffectMountStopped&&dd.markComponentPassiveEffectMountStopped():(e&Cm)!==Em&&null!==dd&&"function"==typeof dd.markComponentLayoutEffectMountStopped&&dd.markComponentLayoutEffectMountStopped(),void 0!==r&&"function"!=typeof r))T(t,(function(e,t){console.error("%s must not return anything besides a function, which is used for clean-up.%s",e,t)}),a=n.tag&Cm?"useLayoutEffect":n.tag&Rm?"useInsertionEffect":"useEffect",null===r?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof r.then?"\n\nIt looks like you wrote "+a+"(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n"+a+"(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching":" You returned: "+r);n=n.next}while(n!==o)}}catch(e){Hl(t,t.return,e)}}function Za(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;void 0!==l&&(i.destroy=void 0,(e&Tm)!==Em?null!==dd&&"function"==typeof dd.markComponentPassiveEffectUnmountStarted&&dd.markComponentPassiveEffectUnmountStarted(t):(e&Cm)!==Em&&null!==dd&&"function"==typeof dd.markComponentLayoutEffectUnmountStarted&&dd.markComponentLayoutEffectUnmountStarted(t),(e&Rm)!==Em&&(kv=!0),T(t,om,t,n,l),(e&Rm)!==Em&&(kv=!1),(e&Tm)!==Em?null!==dd&&"function"==typeof dd.markComponentPassiveEffectUnmountStopped&&dd.markComponentPassiveEffectUnmountStopped():(e&Cm)!==Em&&null!==dd&&"function"==typeof dd.markComponentLayoutEffectUnmountStopped&&dd.markComponentLayoutEffectUnmountStopped())}r=r.next}while(r!==a)}}catch(e){Hl(t,t.return,e)}}function ei(e,t){Ga(e)?(Sn(),Ka(t,e),wn()):Ka(t,e)}function ti(e,t,n){Ga(e)?(Sn(),Za(n,e,t),wn()):Za(n,e,t)}function ni(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;e.type.defaultProps||"ref"in e.memoizedProps||Ny||(n.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",b(e)||"instance"),n.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",b(e)||"instance"));try{T(e,Qa,t,n)}catch(t){Hl(e,e.return,t)}}}function ri(e,t,n){return e.getSnapshotBeforeUpdate(t,n)}function oi(e,t){var n=t.memoizedProps,r=t.memoizedState;t=e.stateNode,e.type.defaultProps||"ref"in e.memoizedProps||Ny||(t.props!==e.memoizedProps&&console.error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",b(e)||"instance"),t.state!==e.memoizedState&&console.error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",b(e)||"instance"));try{var o=Yo(e.type,n,(e.elementType,e.type)),a=T(e,ri,t,o,r);n=eg,void 0!==a||n.has(e.type)||(n.add(e.type),T(e,(function(){console.error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",b(e))}))),t.__reactInternalSnapshotBeforeUpdate=a}catch(t){Hl(e,e.return,t)}}function ai(e,t,n){n.props=Yo(e.type,e.memoizedProps),n.state=e.memoizedState,Ga(e)?(Sn(),T(e,em,e,t,n),wn()):T(e,em,e,t,n)}function ii(e){var t=e.ref;if(null!==t){var n=e.stateNode;if("function"==typeof t)if(Ga(e))try{Sn(),e.refCleanup=t(n)}finally{wn()}else e.refCleanup=t(n);else"string"==typeof t?console.error("String refs are no longer supported."):t.hasOwnProperty("current")||console.error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",b(e)),t.current=n}}function li(e,t){try{T(e,ii,e)}catch(n){Hl(e,t,n)}}function si(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{if(Ga(e))try{Sn(),T(e,r)}finally{wn()}else T(e,r)}catch(n){Hl(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{if(Ga(e))try{Sn(),T(e,n,null)}finally{wn()}else T(e,n,null)}catch(n){Hl(e,t,n)}else n.current=null}function ui(e,t,n,r){var o=e.memoizedProps,a=o.id,i=o.onCommit;o=o.onRender,t=null===t?"mount":"update",lh&&(t="nested-update"),"function"==typeof o&&o(a,t,e.actualDuration,e.treeBaseDuration,e.actualStartTime,n),"function"==typeof i&&i(e.memoizedProps.id,t,r,n)}function ci(e,t,n,r){var o=e.memoizedProps;e=o.id,o=o.onPostCommit,t=null===t?"mount":"update",lh&&(t="nested-update"),"function"==typeof o&&o(e,t,r,n)}function di(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{T(e,Bs,r,t,n,e)}catch(t){Hl(e,e.return,t)}}function fi(e,t,n){try{T(e,Ws,e.stateNode,e.type,n,t,e)}catch(t){Hl(e,e.return,t)}}function pi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function hi(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||pi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function mi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Rs));else if(4!==r&&27!==r&&null!==(e=e.child))for(mi(e,t,n),e=e.sibling;null!==e;)mi(e,t,n),e=e.sibling}function yi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(yi(e,t,n),e=e.sibling;null!==e;)yi(e,t,n),e=e.sibling}function gi(e){if(27!==e.tag){e:{for(var t=e.return;null!==t;){if(pi(t)){var n=t;break e}t=t.return}throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}switch(n.tag){case 27:t=n.stateNode,yi(e,n=hi(e),t);break;case 5:t=n.stateNode,32&n.flags&&(Vs(t),n.flags&=-33),yi(e,n=hi(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,mi(e,n=hi(e),t);break;default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}}}function vi(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:_i(e,n),4&r&&Ja(n,Cm|xm);break;case 1:if(_i(e,n),4&r)if(e=n.stateNode,null===t)n.type.defaultProps||"ref"in n.memoizedProps||Ny||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",b(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",b(n)||"instance")),Ga(n)?(Sn(),T(n,Qh,n,e),wn()):T(n,Qh,n,e);else{var o=Yo(n.type,t.memoizedProps);t=t.memoizedState,n.type.defaultProps||"ref"in n.memoizedProps||Ny||(e.props!==n.memoizedProps&&console.error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",b(n)||"instance"),e.state!==n.memoizedState&&console.error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",b(n)||"instance")),Ga(n)?(Sn(),T(n,Jh,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate),wn()):T(n,Jh,n,e,o,t,e.__reactInternalSnapshotBeforeUpdate)}64&r&&ni(n),512&r&&li(n,n.return);break;case 3:if(t=hn(),_i(e,n),64&r&&null!==(r=n.updateQueue)){if(o=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:o=n.child.stateNode}try{T(n,Qa,r,o)}catch(e){Hl(n,n.return,e)}}e.effectDuration+=mn(t);break;case 26:_i(e,n),512&r&&li(n,n.return);break;case 27:case 5:_i(e,n),null===t&&4&r&&di(n),512&r&&li(n,n.return);break;case 12:if(4&r){r=hn(),_i(e,n),(e=n.stateNode).effectDuration+=yn(r);try{T(n,ui,n,t,oh,e.effectDuration)}catch(e){Hl(n,n.return,e)}}else _i(e,n);break;case 13:_i(e,n),4&r&&ki(e,n);break;case 22:if(!(o=null!==n.memoizedState||tg)){t=null!==t&&null!==t.memoizedState||ng;var a=tg,i=ng;tg=o,(ng=t)&&!i?Di(e,n,!!(8772&n.subtreeFlags)):_i(e,n),tg=a,ng=i}512&r&&("manual"===n.memoizedProps.mode?li(n,n.return):si(n,n.return));break;default:_i(e,n)}}function bi(e){var t=e.alternate;null!==t&&(e.alternate=null,bi(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&me(t),e.stateNode=null,e._debugOwner=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function wi(e,t,n){for(n=n.child;null!==n;)Si(e,t,n),n=n.sibling}function Si(e,t,n){if(cd&&"function"==typeof cd.onCommitFiberUnmount)try{cd.onCommitFiberUnmount(ud,n)}catch(e){fd||(fd=!0,console.error("React instrumentation encountered an error: %s",e))}switch(n.tag){case 26:ng||si(n,t),wi(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:ng||si(n,t);var r=ug,o=cg;for(ug=n.stateNode,wi(e,t,n),e=(n=n.stateNode).attributes;e.length;)n.removeAttributeNode(e[0]);me(n),ug=r,cg=o;break;case 5:ng||si(n,t);case 6:if(r=ug,o=cg,ug=null,wi(e,t,n),cg=o,null!==(ug=r))if(cg)try{T(n,Qs,ug,n.stateNode)}catch(e){Hl(n,t,e)}else try{T(n,Ys,ug,n.stateNode)}catch(e){Hl(n,t,e)}break;case 18:null!==ug&&(cg?(e=ug,n=n.stateNode,8===e.nodeType?Gs(e.parentNode,n):1===e.nodeType&&Gs(e,n),Ku(e)):Gs(ug,n.stateNode));break;case 4:r=ug,o=cg,ug=n.stateNode.containerInfo,cg=!0,wi(e,t,n),ug=r,cg=o;break;case 0:case 11:case 14:case 15:ng||Za(Rm,n,t),ng||Xa(n,t,Cm),wi(e,t,n);break;case 1:ng||(si(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&ai(n,t,r)),wi(e,t,n);break;case 21:wi(e,t,n);break;case 22:ng||si(n,t),ng=(r=ng)||null!==n.memoizedState,wi(e,t,n),ng=r;break;default:wi(e,t,n)}}function ki(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{T(t,lu,e)}catch(e){Hl(t,t.return,e)}}function Ei(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new og),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new og),t;default:throw Error("Unexpected Suspense handler tag ("+e.tag+"). This is a bug in React.")}}(e);t.forEach((function(t){var r=ql.bind(null,e,t);if(!n.has(t)){if(n.add(t),pd){if(null===ig||null===lg)throw Error("Expected finished root and lanes to be set. This is a bug in React.");Xl(lg,ig)}t.then(r,r)}}))}function xi(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=e,a=t,i=n[r],l=a;e:for(;null!==l;){switch(l.tag){case 27:case 5:ug=l.stateNode,cg=!1;break e;case 3:case 4:ug=l.stateNode.containerInfo,cg=!0;break e}l=l.return}if(null===ug)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");Si(o,a,i),ug=null,cg=!1,null!==(a=(o=i).alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ri(t,e),t=t.sibling}function Ri(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:xi(t,e),Ci(e),4&r&&(Za(Rm|xm,e,e.return),Ka(Rm|xm,e),Xa(e,e.return,Cm|xm));break;case 1:xi(t,e),Ci(e),512&r&&(ng||null===n||si(n,n.return)),64&r&&tg&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=dg;if(xi(t,e),Ci(e),512&r&&(ng||null===n||si(n,n.return)),4&r)if(t=null!==n?n.memoizedState:null,r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,t=o.ownerDocument||o;t:switch(r){case"title":(!(o=t.getElementsByTagName("title")[0])||o[Od]||o[xd]||o.namespaceURI===rf||o.hasAttribute("itemprop"))&&(o=t.createElement(r),t.head.insertBefore(o,t.querySelector("head > title"))),_s(o,r,n),o[xd]=e,we(o),r=o;break e;case"link":var a=Eu("link","href",t).get(r+(n.href||""));if(a)for(var i=0;i<a.length;i++)if((o=a[i]).getAttribute("href")===(null==n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){a.splice(i,1);break t}_s(o=t.createElement(r),r,n),t.head.appendChild(o);break;case"meta":if(a=Eu("meta","content",t).get(r+(n.content||"")))for(i=0;i<a.length;i++)if(o=a[i],W(n.content,"content"),o.getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){a.splice(i,1);break t}_s(o=t.createElement(r),r,n),t.head.appendChild(o);break;default:throw Error('getNodesForType encountered a type it did not expect: "'+r+'". This is a bug in React.')}o[xd]=e,we(o),r=o}e.stateNode=r}else xu(o,e.type,e.stateNode);else e.stateNode=bu(o,r,e.memoizedProps);else t!==r?(null===t?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):t.count--,null===r?xu(o,e.type,e.stateNode):bu(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fi(e,e.memoizedProps,n.memoizedProps);break;case 27:if(4&r&&null===e.alternate){o=e.stateNode,a=e.memoizedProps;try{for(i=o.firstChild;i;){var l=i.nextSibling,s=i.nodeName;i[Od]||"HEAD"===s||"BODY"===s||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===i.rel.toLowerCase()||o.removeChild(i),i=l}T(e,uu,e.type,a,o,e)}catch(t){Hl(e,e.return,t)}}case 5:if(xi(t,e),Ci(e),512&r&&(ng||null===n||si(n,n.return)),32&e.flags){t=e.stateNode;try{T(e,Vs,t)}catch(t){Hl(e,e.return,t)}}4&r&&null!=e.stateNode&&fi(e,t=e.memoizedProps,null!==n?n.memoizedProps:t),1024&r&&(rg=!0,"form"!==e.type&&console.error("Unexpected host component type. Expected a form. This is a bug in React."));break;case 6:if(xi(t,e),Ci(e),4&r){if(null===e.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");r=e.memoizedProps,n=null!==n?n.memoizedProps:r,t=e.stateNode;try{T(e,qs,t,n,r)}catch(t){Hl(e,e.return,t)}}break;case 3:if(o=hn(),jb=null,a=dg,dg=cu(t.containerInfo),xi(t,e),dg=a,Ci(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{T(e,iu,t.containerInfo)}catch(t){Hl(e,e.return,t)}rg&&(rg=!1,Ti(e)),t.effectDuration+=mn(o);break;case 4:r=dg,dg=cu(e.stateNode.containerInfo),xi(t,e),Ci(e),dg=r;break;case 12:r=hn(),xi(t,e),Ci(e),e.stateNode.effectDuration+=yn(r);break;case 13:xi(t,e),Ci(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(rv=ed()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ei(e,r));break;case 22:512&r&&(ng||null===n||si(n,n.return)),i=null!==e.memoizedState,l=null!==n&&null!==n.memoizedState;var u=ng;if(tg=(s=tg)||i,ng=u||l,xi(t,e),ng=u,tg=s,Ci(e),(t=e.stateNode)._current=e,t._visibility&=~$p,t._visibility|=t._pendingVisibility&$p,8192&r&&(t._visibility=i?t._visibility&~Hp:t._visibility|Hp,i&&(t=tg||ng,null===n||l||t||Li(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){l=n=t;try{o=l.stateNode,i?T(l,Js,o):T(l,Ks,l.stateNode,l.memoizedProps)}catch(e){Hl(l,l.return,e)}}}else if(6===t.tag){if(null===n){l=t;try{a=l.stateNode,i?T(l,Xs,a):T(l,Zs,a,l.memoizedProps)}catch(e){Hl(l,l.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ei(e,n));break;case 19:xi(t,e),Ci(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ei(e,r));break;case 21:break;default:xi(t,e),Ci(e)}}function Ci(e){var t=e.flags;if(2&t){try{T(e,gi,e)}catch(t){Hl(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Ti(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Ti(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function _i(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)vi(e,t.alternate,t),t=t.sibling}function Pi(e){switch(e.tag){case 0:case 11:case 14:case 15:Xa(e,e.return,Cm),Li(e);break;case 1:si(e,e.return);var t=e.stateNode;"function"==typeof t.componentWillUnmount&&ai(e,e.return,t),Li(e);break;case 26:case 27:case 5:si(e,e.return),Li(e);break;case 22:si(e,e.return),null===e.memoizedState&&Li(e);break;default:Li(e)}}function Li(e){for(e=e.child;null!==e;)Pi(e),e=e.sibling}function Oi(e,t,n,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:Di(e,n,r),Ja(n,Cm);break;case 1:if(Di(e,n,r),"function"==typeof(t=n.stateNode).componentDidMount&&T(n,Qh,n,t),null!==(t=n.updateQueue)){e=n.stateNode;try{T(n,Ya,t,e)}catch(e){Hl(n,n.return,e)}}r&&64&o&&ni(n),li(n,n.return);break;case 26:case 27:case 5:Di(e,n,r),r&&null===t&&4&o&&di(n),li(n,n.return);break;case 12:if(r&&4&o){o=hn(),Di(e,n,r),(r=n.stateNode).effectDuration+=yn(o);try{T(n,ui,n,t,oh,r.effectDuration)}catch(e){Hl(n,n.return,e)}}else Di(e,n,r);break;case 13:Di(e,n,r),r&&4&o&&ki(e,n);break;case 22:null===n.memoizedState&&Di(e,n,r),li(n,n.return);break;default:Di(e,n,r)}}function Di(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;)Oi(e,t.alternate,t,n),t=t.sibling}function Ai(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&ir(e),null!=n&&lr(n))}function Mi(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(ir(t),null!=e&&lr(e))}function Ni(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Ii(e,t,n,r),t=t.sibling}function Ii(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:Ni(e,t,n,r),2048&o&&ei(t,Tm|xm);break;case 3:var a=hn();Ni(e,t,n,r),2048&o&&(n=null,null!==t.alternate&&(n=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==n&&(ir(t),null!=n&&lr(n))),e.passiveEffectDuration+=mn(a);break;case 12:if(2048&o){a=hn(),Ni(e,t,n,r),(e=t.stateNode).passiveEffectDuration+=yn(a);try{T(t,ci,t,t.alternate,oh,e.passiveEffectDuration)}catch(e){Hl(t,t.return,e)}}else Ni(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,null!==t.memoizedState?a._visibility&Bp?Ni(e,t,n,r):zi(e,t):a._visibility&Bp?Ni(e,t,n,r):(a._visibility|=Bp,Fi(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&Ai(t.alternate,t);break;case 24:Ni(e,t,n,r),2048&o&&Mi(t.alternate,t);break;default:Ni(e,t,n,r)}}function Fi(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;)ji(e,t,n,r,o),t=t.sibling}function ji(e,t,n,r,o){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Fi(e,t,n,r,o),ei(t,Tm);break;case 23:break;case 22:var i=t.stateNode;null!==t.memoizedState?i._visibility&Bp?Fi(e,t,n,r,o):zi(e,t):(i._visibility|=Bp,Fi(e,t,n,r,o)),o&&2048&a&&Ai(t.alternate,t);break;case 24:Fi(e,t,n,r,o),o&&2048&a&&Mi(t.alternate,t);break;default:Fi(e,t,n,r,o)}}function zi(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:zi(n,r),2048&o&&Ai(r.alternate,r);break;case 24:zi(n,r),2048&o&&Mi(r.alternate,r);break;default:zi(n,r)}t=t.sibling}}function Ui(e){if(e.subtreeFlags&fg)for(e=e.child;null!==e;)Hi(e),e=e.sibling}function Hi(e){switch(e.tag){case 26:Ui(e),e.flags&fg&&null!==e.memoizedState&&function(e,t,n){if(null===zb)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var r=zb;if("stylesheet"===t.type&&("string"!=typeof n.media||!1!==matchMedia(n.media).matches)&&(t.state.loading&xb)===wb){if(null===t.instance){var o=hu(n.href),a=e.querySelector(mu(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Tu.bind(r),e.then(r,r)),t.state.loading|=xb,t.instance=a,void we(a);a=e.ownerDocument||e,n=yu(n),(o=Rb.get(o))&&Su(n,o),we(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),_s(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&(t.state.loading&Eb)===wb&&(r.count++,t=Tu.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(dg,e.memoizedState,e.memoizedProps);break;case 5:default:Ui(e);break;case 3:case 4:var t=dg;dg=cu(e.stateNode.containerInfo),Ui(e),dg=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=fg,fg=16777216,Ui(e),fg=t):Ui(e))}}function $i(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Bi(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ag=r,Yi(r,e)}$i(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Wi(e),e=e.sibling}function Wi(e){switch(e.tag){case 0:case 11:case 15:Bi(e),2048&e.flags&&ti(e,e.return,Tm|xm);break;case 3:var t=hn();Bi(e),e.stateNode.passiveEffectDuration+=mn(t);break;case 12:t=hn(),Bi(e),e.stateNode.passiveEffectDuration+=yn(t);break;case 22:t=e.stateNode,null!==e.memoizedState&&t._visibility&Bp&&(null===e.return||13!==e.return.tag)?(t._visibility&=~Bp,Vi(e)):Bi(e);break;default:Bi(e)}}function Vi(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ag=r,Yi(r,e)}$i(e)}for(e=e.child;null!==e;)qi(e),e=e.sibling}function qi(e){switch(e.tag){case 0:case 11:case 15:ti(e,e.return,Tm),Vi(e);break;case 22:var t=e.stateNode;t._visibility&Bp&&(t._visibility&=~Bp,Vi(e));break;default:Vi(e)}}function Yi(e,t){for(;null!==ag;){var n=ag,r=n;switch(r.tag){case 0:case 11:case 15:ti(r,t,Tm);break;case 23:case 22:null!==r.memoizedState&&null!==r.memoizedState.cachePool&&null!=(r=r.memoizedState.cachePool.pool)&&ir(r);break;case 24:lr(r.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ag=r;else e:for(n=e;null!==ag;){var o=(r=ag).sibling,a=r.return;if(bi(r),r===n){ag=null;break e}if(null!==o){o.return=a,ag=o;break e}ag=a}}}function Qi(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null,this.actualDuration=-0,this.actualStartTime=-1.1,this.treeBaseDuration=this.selfBaseDuration=-0,this._debugOwner=this._debugInfo=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,pg||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}function Gi(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ji(e,t){var n=e.alternate;switch(null===n?((n=u(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugOwner=e._debugOwner,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null,n.actualDuration=-0,n.actualStartTime=-1.1),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugInfo=e._debugInfo,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 0:case 15:case 1:n.type=un(e.type);break;case 11:n.type=cn(e.type)}return n}function Xi(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext,_debugThenableState:t._debugThenableState},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration),e}function Ki(e,t,n,r,o,a){var i=0,l=e;if("function"==typeof e)Gi(e)&&(i=1),l=un(l);else if("string"==typeof e)i=function(e,t,n){var r=!n.ancestorInfo.containerTagInScope;if(n.context===ub||null!=t.itemProp)return!r||null==t.itemProp||"meta"!==e&&"title"!==e&&"style"!==e&&"link"!==e&&"script"!==e||console.error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",e,e),!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href){r&&console.error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style> to the <style> tag.');break}return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError){if("stylesheet"===t.rel&&"string"==typeof t.precedence){e=t.href;var o=t.onError,a=t.disabled;n=[],t.onLoad&&n.push("`onLoad`"),o&&n.push("`onError`"),null!=a&&n.push("`disabled`"),o=function(e){switch(e.length){case 0:return"";case 1:return e[0];case 2:return e[0]+" and "+e[1];default:return e.slice(0,-1).join(", ")+", and "+e[e.length-1]}}(n),o+=1===n.length?" prop":" props",a=1===n.length?"an "+o:"the "+o,n.length&&console.error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',e,a,o)}r&&("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href?console.error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"):(t.onError||t.onLoad)&&console.error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."));break}return"stylesheet"!==t.rel||(e=t.precedence,t=t.disabled,"string"!=typeof e&&r&&console.error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'),"string"==typeof e&&null==t);case"script":if(!(e=t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async)||t.onLoad||t.onError||!t.src||"string"!=typeof t.src){r&&(e?t.onLoad||t.onError?console.error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."):console.error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."):console.error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'));break}return!0;case"noscript":case"template":r&&console.error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",e)}return!1}(e,n,i=j())?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case sc:return el(n.children,o,a,t);case uc:i=8,o|=Zp,o|=eh;break;case cc:return r=o,"string"!=typeof(e=n).id&&console.error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',typeof e.id),(t=u(12,e,t,r|Kp)).elementType=cc,t.lanes=a,t.stateNode={effectDuration:0,passiveEffectDuration:0},t;case mc:return(t=u(13,n,t,o)).elementType=mc,t.lanes=a,t;case yc:return(t=u(19,n,t,o)).elementType=yc,t.lanes=a,t;case bc:return tl(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case dc:case pc:i=10;break e;case fc:i=9;break e;case hc:i=11,l=cn(l);break e;case gc:i=14;break e;case vc:i=16,l=null;break e}l="",(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(l+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."),null===e?n="null":zc(e)?n="array":void 0!==e&&e.$$typeof===ic?(n="<"+(g(e.type)||"Unknown")+" />",l=" Did you accidentally export a JSX literal instead of a component?"):n=typeof e,(i=r?v(r):null)&&(l+="\n\nCheck the render method of `"+i+"`."),i=29,n=Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+n+"."+l),l=null}return(t=u(i,n,t,o)).elementType=e,t.type=l,t.lanes=a,t._debugOwner=r,t}function Zi(e,t,n){return(t=Ki(e.type,e.key,e.props,e._owner,t,n))._debugOwner=e._owner,t}function el(e,t,n,r){return(e=u(7,e,r,t)).lanes=n,e}function tl(e,t,n,r){(e=u(22,e,r,t)).elementType=bc,e.lanes=n;var o={_visibility:Hp,_pendingVisibility:Hp,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=o,t=e._current;if(null===t)throw Error("Calling Offscreen.detach before instance handle has been set.");if(!(e._pendingVisibility&$p)){var n=an(t,2);null!==n&&(e._pendingVisibility|=$p,ml(n,t,2))}},attach:function(){var e=o,t=e._current;if(null===t)throw Error("Calling Offscreen.detach before instance handle has been set.");if(e._pendingVisibility&$p){var n=an(t,2);null!==n&&(e._pendingVisibility&=~$p,ml(n,t,2))}}};return e.stateNode=o,e}function nl(e,t,n){return(e=u(6,e,null,t)).lanes=n,e}function rl(e,t,n){return(t=u(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ol(e){e.flags|=4}function al(e,t){if("stylesheet"!==t.type||(t.state.loading&xb)!==wb)e.flags&=-16777217;else if(e.flags|=16777216,!Ru(t)){if(null!==(t=vm.current)&&((4194176&Dg)===Dg?null!==bm:(62914560&Dg)!==Dg&&!(536870912&Dg)||t!==bm))throw Hh=Uh,zh;e.flags|=8192}}function il(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ie():536870912,e.lanes|=t,Zg|=t)}function ll(e,t){if(!Dh)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function sl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)if((e.mode&Kp)!==Jp){for(var o=e.selfBaseDuration,a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,o+=a.treeBaseDuration,a=a.sibling;e.treeBaseDuration=o}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=31457280&o.subtreeFlags,r|=31457280&o.flags,o.return=e,o=o.sibling;else if((e.mode&Kp)!==Jp){o=e.actualDuration,a=e.selfBaseDuration;for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,o+=i.actualDuration,a+=i.treeBaseDuration,i=i.sibling;e.actualDuration=o,e.treeBaseDuration=a}else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ul(e,t,n){var r=t.pendingProps;switch(Tn(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return sl(t),null;case 3:return r=t.stateNode,n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Pa(Om,t),F(t),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Mn(t)?(Fn(),ol(t)):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Nh&&(gl(Nh),Nh=null))),sl(t),null;case 26:return n=t.memoizedState,null===e?(ol(t),null!==n?(sl(t),al(t,n)):(sl(t),t.flags&=-16777217)):n?n!==e.memoizedState?(ol(t),sl(t),al(t,n)):(sl(t),t.flags&=-16777217):(e.memoizedProps!==r&&ol(t),sl(t),t.flags&=-16777217),null;case 27:U(t),n=N(Yc.current);var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&ol(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return sl(t),null}e=j(),Mn(t)?Dn(t):(e=su(o,r,n,e,!0),t.stateNode=e,ol(t))}return sl(t),null;case 5:if(U(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&ol(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return sl(t),null}if(o=j(),Mn(t))Dn(t);else{switch(e=N(Yc.current),dt(n,o.ancestorInfo),o=o.context,e=js(e),o){case ub:e=e.createElementNS(rf,n);break;case cb:e=e.createElementNS(nf,n);break;default:switch(n){case"svg":e=e.createElementNS(rf,n);break;case"math":e=e.createElementNS(nf,n);break;case"script":(e=e.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?e.createElement("select",{is:r.is}):e.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?e.createElement(n,{is:r.is}):e.createElement(n),-1===n.indexOf("-")&&(n!==n.toLowerCase()&&console.error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",n),"[object HTMLUnknownElement]"!==Object.prototype.toString.call(e)||Gc.call(pb,n)||(pb[n]=!0,console.error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",n)))}}e[xd]=t,e[Rd]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(_s(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&ol(t)}}return sl(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&ol(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");if(e=N(Yc.current),n=j(),Mn(t)){e=t.stateNode,r=t.memoizedProps,o=!Ah,n=null;var a=Lh;if(null!==a)switch(a.tag){case 3:o&&null!==(o=ru(e,r,n))&&(Pn(t,0).serverProps=o);break;case 27:case 5:n=a.memoizedProps,o&&null!==(o=ru(e,r,n))&&(Pn(t,0).serverProps=o)}e[xd]=t,(e=!!(e.nodeValue===r||null!==n&&!0===n.suppressHydrationWarning||xs(e.nodeValue,r)))||On(t)}else null!=(n=n.ancestorInfo.current)&&ft(r,n.tag),(e=js(e).createTextNode(r))[xd]=t,t.stateNode=e}return sl(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=Mn(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");o[xd]=t,sl(t),(t.mode&Kp)!==Jp&&null!==r&&null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration)}else Fn(),Nn(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4,sl(t),(t.mode&Kp)!==Jp&&null!==r&&null!==(o=t.child)&&(t.treeBaseDuration-=o.treeBaseDuration);o=!1}else null!==Nh&&(gl(Nh),Nh=null),o=!0;if(!o)return 256&t.flags?(rr(t),t):(rr(t),null)}return rr(t),128&t.flags?(t.lanes=n,(t.mode&Kp)!==Jp&&kn(t),t):(r=null!==r,e=null!==e&&null!==e.memoizedState,r&&(o=null,null!==(n=t.child).alternate&&null!==n.alternate.memoizedState&&null!==n.alternate.memoizedState.cachePool&&(o=n.alternate.memoizedState.cachePool.pool),a=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(a=n.memoizedState.cachePool.pool),a!==o&&(n.flags|=2048)),r!==e&&r&&(t.child.flags|=8192),il(t,t.updateQueue),sl(t),(t.mode&Kp)!==Jp&&r&&null!==(e=t.child)&&(t.treeBaseDuration-=e.treeBaseDuration),null);case 4:return F(t),null===e&&fs(t.stateNode.containerInfo),sl(t),null;case 10:return Pa(t.type,t),sl(t),null;case 19:if(A(km,t),null===(o=t.memoizedState))return sl(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)ll(o,!1);else{if(Qg!==kg||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=or(e))){for(t.flags|=128,ll(o,!1),e=a.updateQueue,t.updateQueue=e,il(t,e),t.subtreeFlags=0,e=n,r=t.child;null!==r;)Xi(r,e),r=r.sibling;return M(km,km.current&wm|Sm,t),t.child}e=e.sibling}null!==o.tail&&ed()>av&&(t.flags|=128,r=!0,ll(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=or(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,il(t,e),ll(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!Dh)return sl(t),null}else 2*ed()-o.renderingStartTime>av&&536870912!==n&&(t.flags|=128,r=!0,ll(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(e=o.tail,o.rendering=e,o.tail=e.sibling,o.renderingStartTime=ed(),e.sibling=null,n=km.current,M(km,n=r?n&wm|Sm:n&wm,t),e):(sl(t),null);case 22:case 23:return rr(t),Zn(t),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(sl(t),6&t.subtreeFlags&&(t.flags|=8192)):sl(t),null!==(r=t.updateQueue)&&il(t,r.retryQueue),r=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(r=e.memoizedState.cachePool.pool),n=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(n=t.memoizedState.cachePool.pool),n!==r&&(t.flags|=2048),null!==e&&A(jm,t),null;case 24:return r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Pa(Om,t),sl(t),null;case 25:return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function cl(e,t){switch(Tn(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&Kp)!==Jp&&kn(t),t):null;case 3:return Pa(Om,t),F(t),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return U(t),null;case 13:if(rr(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");Nn()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&Kp)!==Jp&&kn(t),t):null;case 19:return A(km,t),null;case 4:return F(t),null;case 10:return Pa(t.type,t),null;case 22:case 23:return rr(t),Zn(t),null!==e&&A(jm,t),65536&(e=t.flags)?(t.flags=-65537&e|128,(t.mode&Kp)!==Jp&&kn(t),t):null;case 24:return Pa(Om,t),null;default:return null}}function dl(e,t){switch(Tn(t),t.tag){case 3:Pa(Om,t),F(t);break;case 26:case 27:case 5:U(t);break;case 4:F(t);break;case 13:rr(t);break;case 19:A(km,t);break;case 10:Pa(t.type,t);break;case 22:case 23:rr(t),Zn(t),null!==e&&A(jm,t);break;case 24:Pa(Om,t)}}function fl(){var e="undefined"!=typeof IS_REACT_ACT_ENVIRONMENT?IS_REACT_ACT_ENVIRONMENT:void 0;return e||null===Lc.actQueue||console.error("The current testing environment is not configured to support act(...)"),e}function pl(e){if((Pg&wg)!==bg&&0!==Dg)return Dg&-Dg;var t=Lc.T;return null!==t?(t._updatedFibers||(t._updatedFibers=new Set),t._updatedFibers.add(e),0!==(e=Mm)?e:is()):he()}function hl(){0===Kg&&(Kg=536870912&Dg&&!Dh?536870912:ae());var e=vm.current;return null!==e&&(e.flags|=32),Kg}function ml(e,t,n){if(kv&&console.error("useInsertionEffect must not schedule updates."),gv&&(vv=!0),(e===Lg&&$g===Ng||null!==e.cancelPendingCommit)&&(El(e,0),wl(e,Dg,Kg,!1)),se(e,n),Pg&wg&&e===Lg){if(jc)switch(t.tag){case 0:case 11:case 15:e=Og&&b(Og)||"Unknown",_v.has(e)||(_v.add(e),t=b(t)||"Unknown",console.error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",t,e,e));break;case 1:Tv||(console.error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),Tv=!0)}}else pd&&de(e,t,n),function(e){fl()&&null===Lc.actQueue&&T(e,(function(){console.error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",b(e))}))}(t),e===Lg&&((Pg&wg)===bg&&(Jg|=n),Qg===Cg&&wl(e,Dg,Kg,!1)),Kl(e)}function yl(e,t,n){if((Pg&(wg|Sg))!==bg)throw Error("Should not already be working.");for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||re(e,t),o=r?function(e,t){var n=Pg;Pg|=wg;var r=Rl(),o=Cl();if(Lg!==e||Dg!==t){if(pd){var a=e.memoizedUpdaters;0<a.size&&(Xl(e,Dg),a.clear()),fe(e,t)}lv=null,av=ed()+iv,El(e,t)}else Vg=re(e,t);X(t);e:for(;;)try{if($g!==Ag&&null!==Og)t:switch(t=Og,a=Bg,$g){case Mg:$g=Ag,Bg=null,Ml(e,t,a,Mg);break;case Ng:if(jn(a)){$g=Ag,Bg=null,Dl(t);break}t=function(){$g===Ng&&Lg===e&&($g=Ug),Kl(e)},a.then(t,t);break e;case Ig:$g=Ug;break e;case Fg:$g=jg;break e;case Ug:jn(a)?($g=Ag,Bg=null,Dl(t)):($g=Ag,Bg=null,Ml(e,t,a,Ug));break;case jg:var i=null;switch(Og.tag){case 26:i=Og.memoizedState;case 5:case 27:var l=Og;if(!i||Ru(i)){$g=Ag,Bg=null;var s=l.sibling;if(null!==s)Og=s;else{var u=l.return;null!==u?(Og=u,Nl(u)):Og=null}break t}break;default:console.error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.")}$g=Ag,Bg=null,Ml(e,t,a,jg);break;case zg:$g=Ag,Bg=null,Ml(e,t,a,zg);break;case Hg:kl(),Qg=_g;break e;default:throw Error("Unexpected SuspendedReason. This is a bug in React.")}null!==Lc.actQueue?Pl():Ll();break}catch(t){xl(e,t)}return Ta(),Lc.H=r,Lc.A=o,Pg=n,null!==Og?(null!==dd&&"function"==typeof dd.markRenderYielded&&dd.markRenderYielded(),kg):(K(),Lg=null,Dg=0,nn(),Qg)}(e,t):_l(e,t,!0),a=r;;){if(o===kg){Vg&&!r&&wl(e,t,0,!1);break}if(o===_g)wl(e,t,0,!Wg);else{if(n=e.current.alternate,a&&!bl(n)){o=_l(e,t,!1),a=!1;continue}if(o===xg){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var l=i;i=ev;var s=(o=e).current.memoizedState.isDehydrated;if(s&&(El(o,l).flags|=256),(l=_l(o,l,!1))!==xg){if(qg&&!s){o.errorRecoveryDisabledLanes|=a,Jg|=a,o=Cg;break e}o=tv,tv=i,null!==o&&gl(o)}o=l}if(a=!1,o!==xg)continue}}if(o===Eg){El(e,0),wl(e,t,0,!0);break}e:{switch(r=e,o){case kg:case Eg:throw Error("Root did not complete. This is a bug in React.");case Cg:if((4194176&t)===t){wl(r,t,Kg,!Wg);break e}break;case xg:tv=null;break;case Rg:case Tg:break;default:throw Error("Unknown root exit status.")}if(r.finishedWork=n,r.finishedLanes=t,null!==Lc.actQueue)Fl(r,tv,lv,nv,Kg,Jg,Zg);else{if((62914560&t)===t&&10<(o=rv+ov-ed())){if(wl(r,t,Kg,!Wg),0!==ne(r,0))break e;r.timeoutHandle=mb(vl.bind(null,r,n,tv,lv,nv,t,Kg,Jg,Zg,Wg,Rv,rh,0),o);break e}vl(r,n,tv,lv,nv,t,Kg,Jg,Zg,Wg,Ev,rh,0)}}}break}Kl(e)}function gl(e){null===tv?tv=e:tv.push.apply(tv,e)}function vl(e,t,n,r,o,a,i,l,s,u,c,d,f){var p=t.subtreeFlags;if((8192&p||!(16785408&~p))&&(zb={stylesheets:null,count:0,unsuspend:Cu},Hi(t),null!==(t=function(){if(null===zb)throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");var e=zb;return e.stylesheets&&0===e.count&&_u(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&_u(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Fl.bind(null,e,n,r,o,i,l,s,xv,d,f)),void wl(e,a,i,!u);Fl(e,n,r,o,i,l,s)}function bl(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Ep(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function wl(e,t,n,r){t&=~Xg,t&=~Jg,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-hd(o),i=1<<a;r[a]=-1,o&=~i}0!==n&&ue(e,n,t)}function Sl(){return(Pg&(wg|Sg))!==bg||(Zl(0,!1),!1)}function kl(){if(null!==Og){if($g===Ag)var e=Og.return;else e=Og,Ta(),xr(e),lm=null,sm=0,e=Og;for(;null!==e;)dl(e.alternate,e),e=e.return;Og=null}}function El(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;n!==gb&&(e.timeoutHandle=gb,yb(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),kl(),Lg=e,Og=n=Ji(e.current,null),Dg=t,$g=Ag,Bg=null,Wg=!1,Vg=re(e,t),qg=!1,Qg=kg,Zg=Kg=Xg=Jg=Gg=0,tv=ev=null,nv=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-hd(r),a=1<<o;t|=e[o],r&=~a}return Yg=t,nn(),uh.discardPendingWarnings(),n}function xl(e,t){Wm=null,Lc.H=iy,Lc.getCurrentStack=null,jc=!1,Fc=null,t===jh?(t=Hn(),$g=Ig):t===zh?(t=Hn(),$g=Fg):$g=t===Py?Hg:null!==t&&"object"==typeof t&&"function"==typeof t.then?zg:Mg,Bg=t;var n=Og;if(null===n)Qg=Eg,Xo(e,En(t,e.current));else switch(n.mode&Kp&&vn(n),J(),$g){case Mg:null!==dd&&"function"==typeof dd.markComponentErrored&&dd.markComponentErrored(n,t,Dg);break;case Ng:case Ig:case zg:case Ug:null!==dd&&"function"==typeof dd.markComponentSuspended&&dd.markComponentSuspended(n,t,Dg)}}function Rl(){var e=Lc.H;return Lc.H=iy,null===e?iy:e}function Cl(){var e=Lc.A;return Lc.A=mg,e}function Tl(){Qg=Cg,Wg||(4194176&Dg)!==Dg&&null!==vm.current||(Vg=!0),!(134217727&Gg)&&!(134217727&Jg)||null===Lg||wl(Lg,Dg,Kg,!1)}function _l(e,t,n){var r=Pg;Pg|=wg;var o=Rl(),a=Cl();if(Lg!==e||Dg!==t){if(pd){var i=e.memoizedUpdaters;0<i.size&&(Xl(e,Dg),i.clear()),fe(e,t)}lv=null,El(e,t)}X(t),t=!1,i=Qg;e:for(;;)try{if($g!==Ag&&null!==Og){var l=Og,s=Bg;switch($g){case Hg:kl(),i=_g;break e;case Ig:case Ng:case zg:null===vm.current&&(t=!0);var u=$g;if($g=Ag,Bg=null,Ml(e,l,s,u),n&&Vg){i=kg;break e}break;default:u=$g,$g=Ag,Bg=null,Ml(e,l,s,u)}}Pl(),i=Qg;break}catch(t){xl(e,t)}return t&&e.shellSuspendCounter++,Ta(),Pg=r,Lc.H=o,Lc.A=a,K(),null===Og&&(Lg=null,Dg=0,nn()),i}function Pl(){for(;null!==Og;)Ol(Og)}function Ll(){for(;null!==Og&&!Kc();)Ol(Og)}function Ol(e){var t=e.alternate;(e.mode&Kp)!==Jp?(gn(e),t=T(e,Ca,t,e,Yg),vn(e)):t=T(e,Ca,t,e,Yg),e.memoizedProps=e.pendingProps,null===t?Nl(e):Og=t}function Dl(e){var t=T(e,Al,e);e.memoizedProps=e.pendingProps,null===t?Nl(e):Og=t}function Al(e){var t=e.alternate,n=(e.mode&Kp)!==Jp;switch(n&&gn(e),e.tag){case 15:case 0:t=ca(t,e,e.pendingProps,e.type,void 0,Dg);break;case 11:t=ca(t,e,e.pendingProps,e.type.render,e.ref,Dg);break;case 5:xr(e);default:dl(t,e),t=Ca(t,e=Og=Xi(e,Yg),Yg)}return n&&vn(e),t}function Ml(e,t,n,r){Ta(),xr(t),lm=null,sm=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,pd&&Xl(e,o),null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Da(t,n,o,!0),Dh&&(Ah=!0),null!==(n=vm.current)){switch(n.tag){case 13:return null===bm?Tl():null===n.alternate&&Qg===kg&&(Qg=Rg),n.flags&=-257,n.flags|=65536,n.lanes=o,r===Uh?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),$l(e,r,o)),!1;case 22:return n.flags|=65536,r===Uh?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),$l(e,r,o)),!1}throw Error("Unexpected Suspense handler tag ("+n.tag+"). This is a bug in React.")}return $l(e,r,o),Tl(),!1}if(Dh)return Ah=!0,null!==(t=vm.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==Fh&&In(En(Error("There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",{cause:r}),n))):(r!==Fh&&In(En(Error("There was an error while hydrating but React was able to recover by instead client rendering the entire root.",{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=En(r,n),Ba(e,o=Zo(e.stateNode,r,o)),Qg!==Cg&&(Qg=xg)),!1;var a=En(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",{cause:r}),n);if(null===ev?ev=[a]:ev.push(a),Qg!==Cg&&(Qg=xg),null===t)return!0;r=En(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,Ba(n,e=Zo(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==sv&&sv.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,ta(o=ea(o),e,n,r),Ba(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,Dg))return Qg=Eg,Xo(e,En(n,e.current)),void(Og=null)}catch(t){if(null!==o)throw Og=o,t;return Qg=Eg,Xo(e,En(n,e.current)),void(Og=null)}32768&t.flags?(Dh||r===Mg?e=!0:Vg||536870912&Dg?e=!1:(Wg=e=!0,(r===Ng||r===Ig||r===zg)&&null!==(r=vm.current)&&13===r.tag&&(r.flags|=16384)),Il(t,e)):Nl(t)}function Nl(e){var t=e;do{if(32768&t.flags)return void Il(t,Wg);var n=t.alternate;if(e=t.return,gn(t),n=T(t,ul,n,t,Yg),(t.mode&Kp)!==Jp&&bn(t),null!==n)return void(Og=n);if(null!==(t=t.sibling))return void(Og=t);Og=t=e}while(null!==t);Qg===kg&&(Qg=Tg)}function Il(e,t){do{var n=cl(e.alternate,e);if(null!==n)return n.flags&=32767,void(Og=n);if((e.mode&Kp)!==Jp){bn(e),n=e.actualDuration;for(var r=e.child;null!==r;)n+=r.actualDuration,r=r.sibling;e.actualDuration=n}if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(Og=e);Og=e=n}while(null!==e);Qg=_g,Og=null}function Fl(e,t,n,r,o,a,i,l,s,u){var c=Lc.T,d=Uc.p;try{Uc.p=bd,Lc.T=null,function(e,t,n,r,o,a,i,l){do{zl()}while(null!==cv);if(uh.flushLegacyContextWarning(),uh.flushPendingUnsafeLifecycleWarnings(),(Pg&(wg|Sg))!==bg)throw Error("Should not already be working.");var s=e.finishedWork;if(r=e.finishedLanes,null!==dd&&"function"==typeof dd.markCommitStarted&&dd.markCommitStarted(r),null===s)return Q(),null;if(0===r&&console.error("root.finishedLanes should not be empty during a commit. This is a bug in React."),e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var u,c,d,f,p=s.lanes|s.childLanes;if(function(e,t,n,r,o,a){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-hd(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&ue(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~t))}(e,r,p|=qp,a,i,l),e===Lg&&(Og=Lg=null,Dg=0),!(10256&s.subtreeFlags)&&!(10256&s.flags)||uv||(uv=!0,fv=p,pv=n,c=od,d=function(){return zl(),null},null!==(f=Lc.actQueue)?f.push(d):Jc(c,d)),oh=nh(),n=!!(15990&s.flags),15990&s.subtreeFlags||n?(n=Lc.T,Lc.T=null,a=Uc.p,Uc.p=bd,i=Pg,Pg|=Sg,function(e,t){if(e=e.containerInfo,db=Xb,Jt(e=Gt(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,l=-1,s=-1,u=0,c=0,d=e,f=null;t:for(;;){for(var p;d!==n||0!==o&&3!==d.nodeType||(l=i+o),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===n&&++u===o&&(l=i),f===a&&++c===r&&(s=i),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(fb={focusedElem:e,selectionRange:n},Xb=!1,ag=t;null!==ag;)if(e=(t=ag).child,1028&t.subtreeFlags&&null!==e)e.return=t,ag=e;else for(;null!==ag;){switch(n=(e=t=ag).alternate,o=e.flags,e.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:1024&o&&null!==n&&oi(e,n);break;case 3:if(1024&o)if(9===(n=(e=e.stateNode.containerInfo).nodeType))eu(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":eu(e);break;default:e.textContent=""}break;default:if(1024&o)throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}if(null!==(e=t.sibling)){e.return=t.return,ag=e;break}ag=t.return}t=sg,sg=!1}(e,s),function(e,t,n){ig=n,lg=e,Ri(t,e),lg=ig=null}(e,s,r),Xt(fb,e.containerInfo),Xb=!!db,fb=db=null,e.current=s,null!==dd&&"function"==typeof dd.markLayoutEffectsStarted&&dd.markLayoutEffectsStarted(r),function(e,t,n){ig=n,lg=t,vi(t,e.alternate,e),lg=ig=null}(s,e,r),null!==dd&&"function"==typeof dd.markLayoutEffectsStopped&&dd.markLayoutEffectsStopped(),Zc(),Pg=i,Uc.p=a,Lc.T=n):e.current=s,(n=uv)?(uv=!1,cv=e,dv=r):(jl(e,p),wv=0,Sv=null),0===(p=e.pendingLanes)&&(sv=null),n||Gl(e),function(e,t){if(cd&&"function"==typeof cd.onCommitFiberRoot)try{var n=!(128&~e.current.flags);switch(t){case bd:var r=nd;break;case wd:r=rd;break;case Sd:r=od;break;case kd:r=id;break;default:r=od}cd.onCommitFiberRoot(ud,e,r,n)}catch(e){fd||(fd=!0,console.error("React instrumentation encountered an error: %s",e))}}(s.stateNode,o),pd&&e.memoizedUpdaters.clear(),gg.forEach((function(e){return e()})),Kl(e),null!==t)for(o=e.onRecoverableError,s=0;s<t.length;s++)p=t[s],u={componentStack:u=p.stack},Object.defineProperty(u,"digest",{get:function(){console.error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.')}}),n=u,T(p.source,o,p.value,n);!!(3&dv)&&zl(),p=e.pendingLanes,4194218&r&&42&p?(sh=!0,e===yv?mv++:(mv=0,yv=e)):mv=0,Zl(0,!1),Q()}(e,t,n,r,d,o,a,i)}finally{Lc.T=c,Uc.p=d}}function jl(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,lr(t))}function zl(){if(null!==cv){var e=cv,t=fv;fv=0;var n=pe(dv),r=0===Sd||Sd>n?Sd:n;n=Lc.T;var o=Uc.p;try{if(Uc.p=r,Lc.T=null,null===cv)var a=!1;else{r=pv,pv=null;var i=cv,l=dv;if(cv=null,dv=0,(Pg&(wg|Sg))!==bg)throw Error("Cannot flush passive effects while already rendering.");gv=!0,vv=!1,null!==dd&&"function"==typeof dd.markPassiveEffectsStarted&&dd.markPassiveEffectsStarted(l);var s=Pg;if(Pg|=Sg,Wi(i.current),Ii(i,i.current,l,r),null!==dd&&"function"==typeof dd.markPassiveEffectsStopped&&dd.markPassiveEffectsStopped(),Gl(i),Pg=s,Zl(0,!1),vv?i===Sv?wv++:(wv=0,Sv=i):wv=0,vv=gv=!1,cd&&"function"==typeof cd.onPostCommitFiberRoot)try{cd.onPostCommitFiberRoot(ud,i)}catch(e){fd||(fd=!0,console.error("React instrumentation encountered an error: %s",e))}var u=i.current.stateNode;u.effectDuration=0,u.passiveEffectDuration=0,a=!0}return a}finally{Uc.p=o,Lc.T=n,jl(e,t)}}return!1}function Ul(e,t,n){t=En(n,t),null!==(e=Ha(e,t=Zo(e.stateNode,t,2),2))&&(se(e,2),Kl(e))}function Hl(e,t,n){if(kv=!1,3===e.tag)Ul(e,e,n);else{for(;null!==t;){if(3===t.tag)return void Ul(t,e,n);if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===sv||!sv.has(r)))return e=En(n,e),void(null!==(r=Ha(t,n=ea(2),2))&&(ta(n,r,t,e),se(r,2),Kl(r)))}t=t.return}console.error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",n)}}function $l(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new vg;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(qg=!0,o.add(n),r=Bl.bind(null,e,t,n),pd&&Xl(e,n),t.then(r,r))}function Bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,fl()&&null===Lc.actQueue&&console.error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"),Lg===e&&(Dg&n)===n&&(Qg===Cg||Qg===Rg&&(62914560&Dg)===Dg&&ed()-rv<ov?(Pg&wg)===bg&&El(e,0):Xg|=n,Zg===Dg&&(Zg=0)),Kl(e)}function Wl(e,t){0===t&&(t=ie()),null!==(e=an(e,t))&&(se(e,t),Kl(e))}function Vl(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Wl(e,n)}function ql(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.")}null!==r&&r.delete(t),Wl(e,n)}function Yl(e,t,n){if(33562624&t.subtreeFlags)for(t=t.child;null!==t;){var r=e,o=t,a=o.type===uc;a=n||a,22!==o.tag?33554432&o.flags?a&&T(o,Ql,r,o,(o.mode&th)===Jp):Yl(r,o,a):null===o.memoizedState&&(a&&8192&o.flags?T(o,Ql,r,o):33554432&o.subtreeFlags&&T(o,Yl,r,o,a)),t=t.sibling}}function Ql(e,t){var n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];Y(!0);try{Pi(t),n&&qi(t),Oi(e,t.alternate,t,!1),n&&ji(e,t,0,null,!1)}finally{Y(!1)}}function Gl(e){var t=!0;e.current.mode&(Zp|eh)||(t=!1),Yl(e,e.current,t)}function Jl(e){if((Pg&wg)===bg){var t=e.tag;if(3===t||1===t||0===t||11===t||14===t||15===t){if(t=b(e)||"ReactComponent",null!==Cv){if(Cv.has(t))return;Cv.add(t)}else Cv=new Set([t]);T(e,(function(){console.error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}))}}}function Xl(e,t){pd&&e.memoizedUpdaters.forEach((function(n){de(e,n,t)}))}function Kl(e){e!==Lv&&null===e.next&&(null===Lv?Pv=Lv=e:Lv=Lv.next=e),Av=!0,null!==Lc.actQueue?Dv||(Dv=!0,as(es)):Ov||(Ov=!0,as(es))}function Zl(e,t){if(!Mv&&Av){Mv=!0;do{for(var n=!1,r=Pv;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-hd(42|e)+1)-1,a=201326677&(a&=o&~(i&~l))?201326677&a|1:a?2|a:0}0!==a&&(n=!0,rs(r,a))}else a=Dg,!(3&(a=ne(r,r===Lg?a:0)))||re(r,a)||(n=!0,rs(r,a));r=r.next}}while(n);Mv=!1}}function es(){Av=Dv=Ov=!1;var e,t=0;0!==Nv&&(((e=window.event)&&"popstate"===e.type?e!==hb&&(hb=e,!0):(hb=null,!1))&&(t=Nv),Nv=0);for(var n=ed(),r=null,o=Pv;null!==o;){var a=o.next,i=ts(o,n);0===i?(o.next=null,null===r?Pv=a:r.next=a,null===a&&(Lv=r)):(r=o,(0!==t||3&i)&&(Av=!0)),o=a}Zl(t,!1)}function ts(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-hd(a),l=1<<i,s=o[i];-1===s?l&n&&!(l&r)||(o[i]=oe(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}if(n=Dg,n=ne(e,e===(t=Lg)?n:0),r=e.callbackNode,0===n||e===t&&$g===Ng||null!==e.cancelPendingCommit)return null!==r&&os(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||re(e,n)){if((t=n&-n)===e.callbackPriority&&(null===Lc.actQueue||r===Iv))return t;switch(os(r),pe(n)){case bd:case wd:n=rd;break;case Sd:n=od;break;case kd:n=id;break;default:n=od}return r=ns.bind(null,e),null!==Lc.actQueue?(Lc.actQueue.push(r),n=Iv):n=Jc(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&os(r),e.callbackPriority=2,e.callbackNode=null,2}function ns(e,t){sh=lh=!1;var n=e.callbackNode;if(zl()&&e.callbackNode!==n)return null;var r=Dg;return 0===(r=ne(e,e===Lg?r:0))?null:(yl(e,r,t),ts(e,ed()),null!=e.callbackNode&&e.callbackNode===n?ns.bind(null,e):null)}function rs(e,t){if(zl())return null;lh=sh,sh=!1,yl(e,t,!0)}function os(e){e!==Iv&&null!==e&&Xc(e)}function as(e){null!==Lc.actQueue&&Lc.actQueue.push((function(){return e(),null})),bb((function(){(Pg&(wg|Sg))!==bg?Jc(nd,e):e()}))}function is(){return 0===Nv&&(Nv=ae()),Nv}function ls(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:(W(e,"action"),wt(""+e))}function ss(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}function us(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n];e:{var o=void 0,a=r.event;if(r=r.listeners,t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;(o=a).currentTarget=u;try{l(o)}catch(e){Cy(e)}o.currentTarget=null,o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;(o=a).currentTarget=u;try{l(o)}catch(e){Cy(e)}o.currentTarget=null,o=s}}}}function cs(e,t){jv.has(e)||console.error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',e);var n=t[Td];void 0===n&&(n=t[Td]=new Set);var r=e+"__bubble";n.has(r)||(ps(t,e,2,!1),n.add(r))}function ds(e,t,n){jv.has(e)&&!t&&console.error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',e);var r=0;t&&(r|=4),ps(n,e,r,t)}function fs(e){if(!e[zv]){e[zv]=!0,Dd.forEach((function(t){"selectionchange"!==t&&(jv.has(t)||ds(t,!1,e),ds(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zv]||(t[zv]=!0,ds("selectionchange",!1,t))}}function ps(e,t,n,r){switch(Bu(t)){case bd:var o=ju;break;case wd:o=zu;break;default:o=Uu}n=o.bind(null,t,n,e),o=void 0,!Mf||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function hs(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=ye(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=a=i;continue e}l=l.parentNode}}r=r.return}Et((function(){var r=a,o=St(n),i=[];e:{var l=zp.get(e);if(void 0!==l){var s=Bf,u=e;switch(e){case"keypress":if(0===Ct(n))break e;case"keydown":case"keyup":s=rp;break;case"focusin":u="focus",s=Gf;break;case"focusout":u="blur",s=Gf;break;case"beforeblur":case"afterblur":s=Gf;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=Yf;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=Qf;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=ap;break;case Dp:case Ap:case Mp:s=Jf;break;case jp:s=ip;break;case"scroll":case"scrollend":s=Vf;break;case"wheel":s=lp;break;case"copy":case"cut":case"paste":s=Xf;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=op;break;case"toggle":case"beforetoggle":s=sp}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===f||null!=(m=xt(h,f))&&c.push(ms(h,m,p)),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Lf||!(u=n.relatedTarget||n.fromElement)||!ye(u)&&!u[Cd])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ye(u):null)&&(d=_(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=Yf,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=op,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:ve(s),p=null==u?l:ve(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,ye(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=gs(p))h++;for(p=0,m=f;m;m=gs(m))p++;for(;0<h-p;)c=gs(c),h--;for(;0<p-h;)f=gs(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=gs(c),f=gs(f)}c=null}else c=null;null!==s&&vs(i,l,s,c,!1),null!==u&&null!==d&&vs(i,d,u,c,!0)}if("select"===(s=(l=r?ve(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var y=jt;else if(Mt(l))if(kp)y=Wt;else{y=$t;var g=Ht}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&yt(r.elementType)&&(y=jt):y=Bt;switch(y&&(y=y(e,r))?Nt(i,y,n,o):(g&&g(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&je(l,"number",l.value)),g=r?ve(r):window,e){case"focusin":(Mt(g)||"true"===g.contentEditable)&&(Rp=g,Cp=r,Tp=null);break;case"focusout":Tp=Cp=Rp=null;break;case"mousedown":_p=!0;break;case"contextmenu":case"mouseup":case"dragend":_p=!1,Kt(i,n,o);break;case"selectionchange":if(xp)break;case"keydown":case"keyup":Kt(i,n,o)}var v;if(dp)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else vp?Dt(e,n)&&(b="onCompositionEnd"):"keydown"===e&&n.keyCode===cp&&(b="onCompositionStart");b&&(hp&&"ko"!==n.locale&&(vp||"onCompositionStart"!==b?"onCompositionEnd"===b&&vp&&(v=Rt()):(Uf="value"in(zf=o)?zf.value:zf.textContent,vp=!0)),0<(g=ys(r,b)).length&&(b=new Kf(b,e,null,n,o),i.push({event:b,listeners:g}),(v||null!==(v=At(n)))&&(b.data=v))),(v=pp?function(e,t){switch(e){case"compositionend":return At(t);case"keypress":return t.which!==mp?null:(gp=!0,yp);case"textInput":return(e=t.data)===yp&&gp?null:e;default:return null}}(e,n):function(e,t){if(vp)return"compositionend"===e||!dp&&Dt(e,t)?(e=Rt(),Hf=Uf=zf=null,vp=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return hp&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=ys(r,"onBeforeInput")).length&&(g=new Zf("onBeforeInput","beforeinput",null,n,o),i.push({event:g,listeners:b}),g.data=v),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=ls((o[Rd]||null).action),i=r.submitter;i&&null!==(t=(t=i[Rd]||null)?ls(t.formAction):i.getAttribute("formAction"))&&(a=t,i=null);var l=new Bf("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==Nv){var e=i?ss(o,i):new FormData(o),t={pending:!0,data:e,method:o.method,action:a};Object.freeze(t),Co(n,t,null,e)}}else"function"==typeof a&&(l.preventDefault(),t={pending:!0,data:e=i?ss(o,i):new FormData(o),method:o.method,action:a},Object.freeze(t),Co(n,t,a,e))},currentTarget:o}]})}}(i,e,r,n,o)}us(i,t)}))}function ms(e,t,n){return{instance:e,listener:t,currentTarget:n}}function ys(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=xt(e,n))&&r.unshift(ms(e,o,a)),null!=(o=xt(e,t))&&r.push(ms(e,o,a))),e=e.return}return r}function gs(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function vs(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=xt(n,a))&&i.unshift(ms(n,u,s)):o||null!=(u=xt(n,a))&&i.push(ms(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function bs(e,t){!function(e,t){var n,r=[];for(n in t)vt(e,n)||r.push(n);t=r.map((function(e){return"`"+e+"`"})).join(", "),1===r.length?console.error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e):1<r.length&&console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",t,e)}(e,t),"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Ef||(Ef=!0,"select"===e&&t.multiple?console.error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):console.error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e));var n={registrationNameDependencies:Ad,possibleRegistrationNames:Md};yt(e)||"string"==typeof t.is||function(e,t,n){var r,o=[];for(r in t)bt(e,r,t[r],n)||o.push(r);t=o.map((function(e){return"`"+e+"`"})).join(", "),1===o.length?console.error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e):1<o.length&&console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",t,e)}(e,t,n),t.contentEditable&&!t.suppressContentEditableWarning&&null!=t.children&&console.error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.")}function ws(e,t,n,r){t!==n&&(n=Es(n),Es(t)!==n&&(r[e]=t))}function Ss(e,t){!1===t?console.error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):console.error("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)}function ks(e,t){return(e=e.namespaceURI===nf||e.namespaceURI===rf?e.ownerDocument.createElementNS(e.namespaceURI,e.tagName):e.ownerDocument.createElement(e.tagName)).innerHTML=t,e.innerHTML}function Es(e){return $(e)&&(console.error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",H(e)),B(e)),("string"==typeof e?e:""+e).replace(Gv,"\n").replace(Jv,"")}function xs(e,t){return t=Es(t),Es(e)===t}function Rs(){}function Cs(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?(ft(r,t),"body"===t||"textarea"===t&&""===r||pt(e,r)):"number"!=typeof r&&"bigint"!=typeof r||(ft(""+r,t),"body"!==t&&pt(e,""+r));break;case"className":Te(e,"class",r);break;case"tabIndex":Te(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":Te(e,n,r);break;case"style":mt(e,r,a);break;case"data":if("object"!==t){Te(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){"src"===n?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',n,n),e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}W(r,n),r=wt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if(null!=r&&("form"===t?"formAction"===n?console.error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."):"function"==typeof r&&(null==o.encType&&null==o.method||Vv||(Vv=!0,console.error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.")),null==o.target||Wv||(Wv=!0,console.error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."))):"input"===t||"button"===t?"action"===n?console.error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."):"input"!==t||"submit"===o.type||"image"===o.type||$v?"button"!==t||null==o.type||"submit"===o.type||$v?"function"==typeof r&&(null==o.name||Bv||(Bv=!0,console.error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.')),null==o.formEncType&&null==o.formMethod||Vv||(Vv=!0,console.error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.")),null==o.formTarget||Wv||(Wv=!0,console.error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."))):($v=!0,console.error('A button can only specify a formAction along with type="submit" or no type.')):($v=!0,console.error('An input can only specify a formAction along with type="submit" or type="image".')):"action"===n?console.error("You can only pass the action prop to <form>."):console.error("You can only pass the formAction prop to <input> or <button>.")),"function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Cs(e,t,"name",o.name,o,null),Cs(e,t,"formEncType",o.formEncType,o,null),Cs(e,t,"formMethod",o.formMethod,o,null),Cs(e,t,"formTarget",o.formTarget,o,null)):(Cs(e,t,"encType",o.encType,o,null),Cs(e,t,"method",o.method,o,null),Cs(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}W(r,n),r=wt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&("function"!=typeof r&&Ss(n,r),e.onclick=Rs);break;case"onScroll":null!=r&&("function"!=typeof r&&Ss(n,r),cs("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&Ss(n,r),cs("scrollend",e));break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}W(r,n),n=wt(""+r),e.setAttributeNS(Xv,"xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(W(r,n),e.setAttribute(n,""+r)):e.removeAttribute(n);break;case"inert":""!==r||Yv[n]||(Yv[n]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",n));case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?(W(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?(W(r,n),e.setAttribute(n,r)):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):(W(r,n),e.setAttribute(n,r));break;case"popover":cs("beforetoggle",e),cs("toggle",e),Ce(e,"popover",r);break;case"xlinkActuate":_e(e,Xv,"xlink:actuate",r);break;case"xlinkArcrole":_e(e,Xv,"xlink:arcrole",r);break;case"xlinkRole":_e(e,Xv,"xlink:role",r);break;case"xlinkShow":_e(e,Xv,"xlink:show",r);break;case"xlinkTitle":_e(e,Xv,"xlink:title",r);break;case"xlinkType":_e(e,Xv,"xlink:type",r);break;case"xmlBase":_e(e,Kv,"xml:base",r);break;case"xmlLang":_e(e,Kv,"xml:lang",r);break;case"xmlSpace":_e(e,Kv,"xml:space",r);break;case"is":null!=a&&console.error('Cannot update the "is" prop after it has been initialized.'),Ce(e,"is",r);break;case"innerText":case"textContent":break;case"popoverTarget":qv||null==r||"object"!=typeof r||(qv=!0,console.error("The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",r));default:!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1]?Ce(e,n=gt(n),r):Ad.hasOwnProperty(n)&&null!=r&&"function"!=typeof r&&Ss(n,r)}}function Ts(e,t,n,r,o,a){switch(n){case"style":mt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");if(null!=(n=r.__html)){if(null!=o.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");e.innerHTML=n}}break;case"children":"string"==typeof r?pt(e,r):("number"==typeof r||"bigint"==typeof r)&&pt(e,""+r);break;case"onScroll":null!=r&&("function"!=typeof r&&Ss(n,r),cs("scroll",e));break;case"onScrollEnd":null!=r&&("function"!=typeof r&&Ss(n,r),cs("scrollend",e));break;case"onClick":null!=r&&("function"!=typeof r&&Ss(n,r),e.onclick=Rs);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ad.hasOwnProperty(n)?null!=r&&"function"!=typeof r&&Ss(n,r):"o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Rd]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):Ce(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o))}}function _s(e,t,n){switch(bs(t,n),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":cs("error",e),cs("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Cs(e,t,r,i,n,null)}}return a&&Cs(e,t,"srcSet",n.srcSet,n,null),void(o&&Cs(e,t,"src",n.src,n,null));case"input":Ee("input",n),cs("invalid",e);var l=r=i=a=null,s=null,u=null;for(o in n)if(n.hasOwnProperty(o)){var c=n[o];if(null!=c)switch(o){case"name":a=c;break;case"type":i=c;break;case"checked":s=c;break;case"defaultChecked":u=c;break;case"value":r=c;break;case"defaultValue":l=c;break;case"children":case"dangerouslySetInnerHTML":if(null!=c)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Cs(e,t,o,c,n,null)}}return Ne(0,n),Fe(e,r,l,s,u,i,a,!1),void Oe(e);case"select":for(a in Ee("select",n),cs("invalid",e),o=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(l=n[a]))switch(a){case"value":r=l;break;case"defaultValue":i=l;break;case"multiple":o=l;default:Cs(e,t,a,l,n,null)}return $e(e,n),t=r,n=i,e.multiple=!!o,void(null!=t?He(e,!!o,t,!1):null!=n&&He(e,!!o,n,!0));case"textarea":for(i in Ee("textarea",n),cs("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(i)&&null!=(l=n[i]))switch(i){case"value":o=l;break;case"defaultValue":a=l;break;case"children":r=l;break;case"dangerouslySetInnerHTML":if(null!=l)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:Cs(e,t,i,l,n,null)}return Be(0,n),Ve(e,o,a,r),void Oe(e);case"option":for(s in ze(0,n),n)n.hasOwnProperty(s)&&null!=(o=n[s])&&("selected"===s?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Cs(e,t,s,o,n,null));return;case"dialog":cs("cancel",e),cs("close",e);break;case"iframe":case"object":cs("load",e);break;case"video":case"audio":for(o=0;o<Fv.length;o++)cs(Fv[o],e);break;case"image":cs("error",e),cs("load",e);break;case"details":cs("toggle",e);break;case"embed":case"source":case"link":cs("error",e),cs("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in n)if(n.hasOwnProperty(u)&&null!=(o=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Cs(e,t,u,o,n,null)}return;default:if(yt(t)){for(c in n)n.hasOwnProperty(c)&&void 0!==(o=n[c])&&Ts(e,t,c,o,n,void 0);return}}for(l in n)n.hasOwnProperty(l)&&null!=(o=n[l])&&Cs(e,t,l,o,n,null)}function Ps(e){switch(e){case"class":return"className";case"for":return"htmlFor";default:return e}}function Ls(e){var t={};e=e.style;for(var n=0;n<e.length;n++){var r=e[n];t[r]=e.getPropertyValue(r)}return t}function Os(e,t,n){if(null!=t&&"object"!=typeof t)console.error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");else if(Qv){var r,o,a=r="";for(o in t)if(t.hasOwnProperty(o)){var i=t[o];null!=i&&"boolean"!=typeof i&&""!==i&&(0===o.indexOf("--")?(V(i,o),r+=a+o+":"+(""+i).trim()):"number"!=typeof i||0===i||yf.has(o)?(V(i,o),r+=a+o.replace(af,"-$1").toLowerCase().replace(lf,"-ms-")+":"+(""+i).trim()):r+=a+o.replace(af,"-$1").toLowerCase().replace(lf,"-ms-")+":"+i+"px",a=";")}r=r||null,(t=e.getAttribute("style"))!==r&&(r=Es(r),Es(t)!==r&&(n.style=Ls(e)))}}function Ds(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(W(r,t),e===""+r)return}ws(t,e,r,a)}function As(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n))){switch(typeof r){case"function":case"symbol":return}if(!r)return}else switch(typeof r){case"function":case"symbol":break;default:if(r)return}ws(t,e,r,a)}function Ms(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":return}else if(null!=r)switch(typeof r){case"function":case"symbol":break;default:if(W(r,n),e===""+r)return}ws(t,e,r,a)}function Ns(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return;default:if(isNaN(r))return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(!isNaN(r)&&(W(r,t),e===""+r))return}ws(t,e,r,a)}function Is(e,t,n,r,o,a){if(o.delete(n),null===(e=e.getAttribute(n)))switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return}else if(null!=r)switch(typeof r){case"function":case"symbol":case"boolean":break;default:if(W(r,t),e===(n=wt(""+r)))return}ws(t,e,r,a)}function Fs(e,t,n,r){for(var o={},a=new Set,i=e.attributes,l=0;l<i.length;l++)switch(i[l].name.toLowerCase()){case"value":case"checked":case"selected":break;default:a.add(i[l].name)}if(yt(t)){for(var s in n)if(n.hasOwnProperty(s)){var u=n[s];if(null!=u)if(Ad.hasOwnProperty(s))"function"!=typeof u&&Ss(s,u);else if(!0!==n.suppressHydrationWarning)switch(s){case"children":"string"!=typeof u&&"number"!=typeof u||ws("children",e.textContent,u,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":i=e.innerHTML,null!=(u=u?u.__html:void 0)&&ws(s,i,u=ks(e,u),o);continue;case"style":a.delete(s),Os(e,u,o);continue;case"offsetParent":case"offsetTop":case"offsetLeft":case"offsetWidth":case"offsetHeight":case"isContentEditable":case"outerText":case"outerHTML":a.delete(s.toLowerCase()),console.error("Assignment to read-only property will result in a no-op: `%s`",s);continue;case"className":a.delete("class"),ws("className",i=Re(e,"class",u),u,o);continue;default:r.context===sb&&"svg"!==t&&"math"!==t?a.delete(s.toLowerCase()):a.delete(s),ws(s,i=Re(e,s,u),u,o)}}}else for(u in n)if(n.hasOwnProperty(u)&&null!=(s=n[u]))if(Ad.hasOwnProperty(u))"function"!=typeof s&&Ss(u,s);else if(!0!==n.suppressHydrationWarning)switch(u){case"children":"string"!=typeof s&&"number"!=typeof s||ws("children",e.textContent,s,o);continue;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"value":case"checked":case"selected":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":continue;case"dangerouslySetInnerHTML":i=e.innerHTML,null!=(s=s?s.__html:void 0)&&i!==(s=ks(e,s))&&(o[u]={__html:i});continue;case"className":Ds(e,u,"class",s,a,o);continue;case"tabIndex":Ds(e,u,"tabindex",s,a,o);continue;case"style":a.delete(u),Os(e,s,o);continue;case"multiple":a.delete(u),ws(u,e.multiple,s,o);continue;case"muted":a.delete(u),ws(u,e.muted,s,o);continue;case"autoFocus":a.delete("autofocus"),ws(u,e.autofocus,s,o);continue;case"data":if("object"!==t){a.delete(u),ws(u,i=e.getAttribute("data"),s,o);continue}case"src":case"href":if(!(""!==s||"a"===t&&"href"===u||"object"===t&&"data"===u)){"src"===u?console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u):console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',u,u),Is(e,u,u,null,a,o);continue}Is(e,u,u,s,a,o);continue;case"action":case"formAction":if(i=e.getAttribute(u),"function"==typeof s){a.delete(u.toLowerCase()),"formAction"===u?(a.delete("name"),a.delete("formenctype"),a.delete("formmethod"),a.delete("formtarget")):(a.delete("enctype"),a.delete("method"),a.delete("target"));continue}if(i===Zv){a.delete(u.toLowerCase()),ws(u,"function",s,o);continue}Is(e,u,u.toLowerCase(),s,a,o);continue;case"xlinkHref":Is(e,u,"xlink:href",s,a,o);continue;case"contentEditable":Ms(e,u,"contenteditable",s,a,o);continue;case"spellCheck":Ms(e,u,"spellcheck",s,a,o);continue;case"draggable":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":Ms(e,u,u,s,a,o);continue;case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":As(e,u,u.toLowerCase(),s,a,o);continue;case"capture":case"download":e:{l=e;var c=i=u,d=o;if(a.delete(c),null===(l=l.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":break e;default:if(!1===s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":break;case"boolean":if(!0===s&&""===l)break e;break;default:if(W(s,i),l===""+s)break e}ws(i,l,s,d)}continue;case"cols":case"rows":case"size":case"span":e:{if(l=e,c=i=u,d=o,a.delete(c),null===(l=l.getAttribute(c)))switch(typeof s){case"undefined":case"function":case"symbol":case"boolean":break e;default:if(isNaN(s)||1>s)break e}else if(null!=s)switch(typeof s){case"function":case"symbol":case"boolean":break;default:if(!(isNaN(s)||1>s)&&(W(s,i),l===""+s))break e}ws(i,l,s,d)}continue;case"rowSpan":Ns(e,u,"rowspan",s,a,o);continue;case"start":Ns(e,u,u,s,a,o);continue;case"xHeight":Ds(e,u,"x-height",s,a,o);continue;case"xlinkActuate":Ds(e,u,"xlink:actuate",s,a,o);continue;case"xlinkArcrole":Ds(e,u,"xlink:arcrole",s,a,o);continue;case"xlinkRole":Ds(e,u,"xlink:role",s,a,o);continue;case"xlinkShow":Ds(e,u,"xlink:show",s,a,o);continue;case"xlinkTitle":Ds(e,u,"xlink:title",s,a,o);continue;case"xlinkType":Ds(e,u,"xlink:type",s,a,o);continue;case"xmlBase":Ds(e,u,"xml:base",s,a,o);continue;case"xmlLang":Ds(e,u,"xml:lang",s,a,o);continue;case"xmlSpace":Ds(e,u,"xml:space",s,a,o);continue;case"inert":""!==s||Yv[u]||(Yv[u]=!0,console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",u)),As(e,u,u,s,a,o);continue;default:if(!(2<u.length)||"o"!==u[0]&&"O"!==u[0]||"n"!==u[1]&&"N"!==u[1]){l=gt(u),i=!1,r.context===sb&&"svg"!==t&&"math"!==t?a.delete(l.toLowerCase()):(c=u.toLowerCase(),null!==(c=vf.hasOwnProperty(c)&&vf[c]||null)&&c!==u&&(i=!0,a.delete(c)),a.delete(l));e:if(c=e,d=l,l=s,xe(d))if(c.hasAttribute(d))c=c.getAttribute(d),W(l,d),l=c===""+l?l:c;else{switch(typeof l){case"function":case"symbol":break e;case"boolean":if("data-"!==(c=d.toLowerCase().slice(0,5))&&"aria-"!==c)break e}l=void 0===l?void 0:null}else l=void 0;i||ws(u,l,s,o)}}return 0<a.size&&!0!==n.suppressHydrationWarning&&function(e,t,n){t.forEach((function(t){n[Ps(t)]="style"===t?Ls(e):e.getAttribute(t)}))}(e,a,o),0===Object.keys(o).length?null:o}function js(e){return 9===e.nodeType?e:e.ownerDocument}function zs(e){switch(e){case rf:return ub;case nf:return cb;default:return sb}}function Us(e,t){if(e===sb)switch(t){case"svg":return ub;case"math":return cb;default:return sb}return e===ub&&"foreignObject"===t?sb:e}function Hs(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function $s(e){setTimeout((function(){throw e}))}function Bs(e,t,n){switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&e.focus();break;case"img":n.src?e.src=n.src:n.srcSet&&(e.srcset=n.srcSet)}}function Ws(e,t,n,r){!function(e,t,n,r){switch(bs(t,r),t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,i=null,l=null,s=null,u=null,c=null;for(p in n){var d=n[p];if(n.hasOwnProperty(p)&&null!=d)switch(p){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(p)||Cs(e,t,p,null,r,d)}}for(var f in r){var p=r[f];if(d=n[f],r.hasOwnProperty(f)&&(null!=p||null!=d))switch(f){case"type":a=p;break;case"name":o=p;break;case"checked":u=p;break;case"defaultChecked":c=p;break;case"value":i=p;break;case"defaultValue":l=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:p!==d&&Cs(e,t,f,p,r,d)}}return t="checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value,r="checkbox"===r.type||"radio"===r.type?null!=r.checked:null!=r.value,t||!r||Hv||(console.error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),Hv=!0),!t||r||Uv||(console.error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"),Uv=!0),void Ie(e,i,l,s,u,c,a,o);case"select":for(a in p=i=l=f=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":p=s;default:r.hasOwnProperty(a)||Cs(e,t,a,null,r,s)}for(o in r)if(a=r[o],s=n[o],r.hasOwnProperty(o)&&(null!=a||null!=s))switch(o){case"value":f=a;break;case"defaultValue":l=a;break;case"multiple":i=a;default:a!==s&&Cs(e,t,o,a,r,s)}return r=l,t=i,n=p,void(null!=f?He(e,!!t,f,!1):!!n!=!!t&&(null!=r?He(e,!!t,r,!0):He(e,!!t,t?[]:"",!1)));case"textarea":for(l in p=f=null,n)if(o=n[l],n.hasOwnProperty(l)&&null!=o&&!r.hasOwnProperty(l))switch(l){case"value":case"children":break;default:Cs(e,t,l,null,r,o)}for(i in r)if(o=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=o||null!=a))switch(i){case"value":f=o;break;case"defaultValue":p=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");break;default:o!==a&&Cs(e,t,i,o,r,a)}return void We(e,f,p);case"option":for(var h in n)f=n[h],n.hasOwnProperty(h)&&null!=f&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Cs(e,t,h,null,r,f));for(s in r)f=r[s],p=n[s],!r.hasOwnProperty(s)||f===p||null==f&&null==p||("selected"===s?e.selected=f&&"function"!=typeof f&&"symbol"!=typeof f:Cs(e,t,s,f,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var m in n)f=n[m],n.hasOwnProperty(m)&&null!=f&&!r.hasOwnProperty(m)&&Cs(e,t,m,null,r,f);for(u in r)if(f=r[u],p=n[u],r.hasOwnProperty(u)&&f!==p&&(null!=f||null!=p))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(t+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");break;default:Cs(e,t,u,f,r,p)}return;default:if(yt(t)){for(var y in n)f=n[y],n.hasOwnProperty(y)&&void 0!==f&&!r.hasOwnProperty(y)&&Ts(e,t,y,void 0,r,f);for(c in r)f=r[c],p=n[c],!r.hasOwnProperty(c)||f===p||void 0===f&&void 0===p||Ts(e,t,c,f,r,p);return}}for(var g in n)f=n[g],n.hasOwnProperty(g)&&null!=f&&!r.hasOwnProperty(g)&&Cs(e,t,g,null,r,f);for(d in r)f=r[d],p=n[d],!r.hasOwnProperty(d)||f===p||null==f&&null==p||Cs(e,t,d,f,r,p)}(e,t,n,r),e[Rd]=r}function Vs(e){pt(e,"")}function qs(e,t,n){e.nodeValue=n}function Ys(e,t){e.removeChild(t)}function Qs(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}function Gs(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if((n=o.data)===nb){if(0===r)return e.removeChild(o),void Ku(t);r--}else n!==tb&&n!==rb&&n!==ob||r++;n=o}while(n);Ku(t)}function Js(e){"function"==typeof(e=e.style).setProperty?e.setProperty("display","none","important"):e.display="none"}function Xs(e){e.nodeValue=""}function Ks(e,t){t=null!=(t=t[lb])&&t.hasOwnProperty("display")?t.display:null,e.style.display=null==t||"boolean"==typeof t?"":(""+t).trim()}function Zs(e,t){e.nodeValue=t}function eu(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":eu(n),me(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function tu(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if((t=e.data)===tb||t===ob||t===rb||t===ab||t===ib)break;if(t===nb)return null}}return e}function nu(e){if(1===e.nodeType){for(var t=e.nodeName.toLowerCase(),n={},r=e.attributes,o=0;o<r.length;o++){var a=r[o];n[Ps(a.name)]="style"===a.name.toLowerCase()?Ls(e):a.value}return{type:t,props:n}}return 8===e.nodeType?{type:"Suspense",props:{}}:e.nodeValue}function ru(e,t,n){return null===n||!0!==n[eb]?(e.nodeValue===t?e=null:(t=Es(t),e=Es(e.nodeValue)===t?null:e.nodeValue),e):null}function ou(e){e=e.nextSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===nb){if(0===t)return tu(e.nextSibling);t--}else n!==tb&&n!==ob&&n!==rb||t++}e=e.nextSibling}return null}function au(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===tb||n===ob||n===rb){if(0===t)return e;t--}else n===nb&&t++}e=e.previousSibling}return null}function iu(e){Ku(e)}function lu(e){Ku(e)}function su(e,t,n,r,o){switch(o&&dt(e,r.ancestorInfo),t=js(n),e){case"html":if(!(e=t.documentElement))throw Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"head":if(!(e=t.head))throw Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");return e;case"body":if(!(e=t.body))throw Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");return e;default:throw Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.")}}function uu(e,t,n,r){if(ge(n)){var o=n.tagName.toLowerCase();console.error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",o,o,o)}switch(e){case"html":case"head":case"body":break;default:console.error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.")}for(o=n.attributes;o.length;)n.removeAttributeNode(o[0]);_s(n,e,t),n[xd]=r,n[Rd]=t}function cu(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}function du(e,t,n){var r=Fb;if(r&&"string"==typeof t&&t){var o=Me(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),Cb.has(o)||(Cb.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(_s(t=r.createElement("link"),"link",e),we(t),r.head.appendChild(t)))}}function fu(e,t,n,r){var o=(o=Yc.current)?cu(o):null;if(!o)throw Error('"resourceRoot" was expected to exist. This is a bug in React.');switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(n=hu(n.href),(r=(t=be(o).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=hu(n.href);var a=be(o).hoistableStyles,i=a.get(e);if(!i&&(o=o.ownerDocument||o,i={type:"stylesheet",instance:null,count:0,state:{loading:wb,preload:null}},a.set(e,i),(a=o.querySelector(mu(e)))&&!a._p&&(i.instance=a,i.state.loading=Sb|xb),!Rb.has(e))){var l={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy};Rb.set(e,l),a||function(e,t,n,r){e.querySelector('link[rel="preload"][as="style"]['+t+"]")?r.loading=Sb:(t=e.createElement("link"),r.preload=t,t.addEventListener("load",(function(){return r.loading|=Sb})),t.addEventListener("error",(function(){return r.loading|=kb})),_s(t,"link",n),we(t),e.head.appendChild(t))}(o,e,l,i.state)}if(t&&null===r)throw n="\n\n  - "+pu(t)+"\n  + "+pu(n),Error("Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return i}if(t&&null!==r)throw n="\n\n  - "+pu(t)+"\n  + "+pu(n),Error("Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key."+n);return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(n=gu(n),(r=(t=be(o).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error('getResource encountered a type it did not expect: "'+e+'". this is a bug in React.')}}function pu(e){var t=0,n="<link";return"string"==typeof e.rel?(t++,n+=' rel="'+e.rel+'"'):Gc.call(e,"rel")&&(t++,n+=' rel="'+(null===e.rel?"null":"invalid type "+typeof e.rel)+'"'),"string"==typeof e.href?(t++,n+=' href="'+e.href+'"'):Gc.call(e,"href")&&(t++,n+=' href="'+(null===e.href?"null":"invalid type "+typeof e.href)+'"'),"string"==typeof e.precedence?(t++,n+=' precedence="'+e.precedence+'"'):Gc.call(e,"precedence")&&(t++,n+=" precedence={"+(null===e.precedence?"null":"invalid type "+typeof e.precedence)+"}"),Object.getOwnPropertyNames(e).length>t&&(n+=" ..."),n+" />"}function hu(e){return'href="'+Me(e)+'"'}function mu(e){return'link[rel="stylesheet"]['+e+"]"}function yu(e){return Oc({},e,{"data-precedence":e.precedence,precedence:null})}function gu(e){return'[src="'+Me(e)+'"]'}function vu(e){return"script[async]"+e}function bu(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+Me(n.href)+'"]');if(r)return t.instance=r,we(r),r;var o=Oc({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return we(r=(e.ownerDocument||e).createElement("style")),_s(r,"style",o),wu(r,n.precedence,e),t.instance=r;case"stylesheet":o=hu(n.href);var a=e.querySelector(mu(o));if(a)return t.state.loading|=xb,t.instance=a,we(a),a;r=yu(n),(o=Rb.get(o))&&Su(r,o),we(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),_s(a,"link",r),t.state.loading|=xb,wu(a,n.precedence,e),t.instance=a;case"script":return a=gu(n.src),(o=e.querySelector(vu(a)))?(t.instance=o,we(o),o):(r=n,(o=Rb.get(a))&&ku(r=Oc({},n),o),we(o=(e=e.ownerDocument||e).createElement("script")),_s(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error('acquireResource encountered a resource type it did not expect: "'+t.type+'". this is a bug in React.')}else"stylesheet"===t.type&&(t.state.loading&xb)===wb&&(r=t.instance,t.state.loading|=xb,wu(r,n.precedence,e));return t.instance}function wu(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Su(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function ku(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}function Eu(e,t,n){if(null===jb){var r=new Map,o=jb=new Map;o.set(n,r)}else(r=(o=jb).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Od]||a[xd]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&a.namespaceURI!==rf){var i=a.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function xu(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Ru(e){return"stylesheet"!==e.type||(e.state.loading&Eb)!==wb}function Cu(){}function Tu(){if(this.count--,0===this.count)if(this.stylesheets)_u(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}function _u(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Hb=new Map,t.forEach(Pu,e),Hb=null,Tu.call(e))}function Pu(e,t){if(!(t.state.loading&xb)){var n=Hb.get(e);if(n)var r=n.get(Ub);else{n=new Map,Hb.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(Ub,r)}i=(o=t.instance).getAttribute("data-precedence"),(a=n.get(i)||r)===r&&n.set(Ub,o),n.set(i,o),this.count++,r=Tu.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=xb}}function Lu(e,t,n,r,o,a,i,l){for(this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=gb,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=le(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=le(0),this.hiddenUpdates=le(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map,this.passiveEffectDuration=this.effectDuration=-0,this.memoizedUpdaters=new Set,e=this.pendingUpdatersLaneMap=[],t=0;31>t;t++)e.push(new Set);this._debugRootType=n?"hydrateRoot()":"createRoot()"}function Ou(e,t,n,r,o,a,i,l,s,c,d,f){return e=new Lu(e,t,n,i,l,s,c,f),t=Xp,!0===a&&(t|=Zp|eh),pd&&(t|=Kp),a=u(3,null,null,t),e.current=a,a.stateNode=e,ir(t=ar()),e.pooledCache=t,ir(t),a.memoizedState={element:r,isDehydrated:n,cache:t},ja(a),e}function Du(e){return e?e=Yp:Yp}function Au(e,t,n,r){return 0===t.tag&&zl(),Mu(t.current,2,e,t,n,r),2}function Mu(e,t,n,r,o,a){if(cd&&"function"==typeof cd.onScheduleFiberRoot)try{cd.onScheduleFiberRoot(ud,r,n)}catch(e){fd||(fd=!0,console.error("React instrumentation encountered an error: %s",e))}null!==dd&&"function"==typeof dd.markRenderScheduled&&dd.markRenderScheduled(t),o=Du(o),null===r.context?r.context=o:r.pendingContext=o,jc&&null!==Fc&&!Gb&&(Gb=!0,console.error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",b(Fc)||"Unknown")),(r=Ua(t)).payload={element:n},null!==(a=void 0===a?null:a)&&("function"!=typeof a&&console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.",a),r.callback=a),null!==(n=Ha(e,r,t))&&(ml(n,e,t),$a(n,e,t))}function Nu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Iu(e,t){Nu(e,t),(e=e.alternate)&&Nu(e,t)}function Fu(e){if(13===e.tag){var t=an(e,67108864);null!==t&&ml(t,e,67108864),Iu(e,67108864)}}function ju(e,t,n,r){var o=Lc.T;Lc.T=null;var a=Uc.p;try{Uc.p=bd,Uu(e,t,n,r)}finally{Uc.p=a,Lc.T=o}}function zu(e,t,n,r){var o=Lc.T;Lc.T=null;var a=Uc.p;try{Uc.p=wd,Uu(e,t,n,r)}finally{Uc.p=a,Lc.T=o}}function Uu(e,t,n,r){if(Xb){var o=Hu(r);if(null===o)hs(e,t,r,Kb,n),Wu(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return ew=Vu(ew,e,t,n,r,o),!0;case"dragenter":return tw=Vu(tw,e,t,n,r,o),!0;case"mouseover":return nw=Vu(nw,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return rw.set(a,Vu(rw.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ow.set(a,Vu(ow.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Wu(e,r),4&t&&-1<iw.indexOf(e)){for(;null!==o;){var a=ge(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=te(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-hd(i);l.entanglements[1]|=s,i&=~s}Kl(a),(Pg&(wg|Sg))===bg&&(av=ed()+iv,Zl(0,!1))}}break;case 13:null!==(l=an(a,2))&&ml(l,a,2),Sl(),Iu(a,2)}if(null===(a=Hu(r))&&hs(e,t,r,Kb,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else hs(e,t,r,null,n)}}function Hu(e){return $u(e=St(e))}function $u(e){if(Kb=null,null!==(e=ye(e))){var t=_(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=P(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Kb=e,null}function Bu(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return bd;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return wd;case"message":switch(td()){case nd:return bd;case rd:return wd;case od:case ad:return Sd;case id:return kd;default:return Sd}default:return Sd}}function Wu(e,t){switch(e){case"focusin":case"focusout":ew=null;break;case"dragenter":case"dragleave":tw=null;break;case"mouseover":case"mouseout":nw=null;break;case"pointerover":case"pointerout":rw.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ow.delete(t.pointerId)}}function Vu(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=ge(t))&&Fu(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function qu(e){var t=ye(e.target);if(null!==t){var n=_(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=P(n)))return e.blockedOn=t,void function(e){var t=Uc.p;try{return Uc.p=e,function(){if(13===n.tag){var e=pl(n),t=an(n,e);null!==t&&ml(t,n,e),Iu(n,e)}}()}finally{Uc.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Yu(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Hu(e.nativeEvent);if(null!==n)return null!==(t=ge(n))&&Fu(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n),o=r;null!==Lf&&console.error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."),Lf=o,n.target.dispatchEvent(r),null===Lf&&console.error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."),Lf=null,t.shift()}return!0}function Qu(e,t,n){Yu(e)&&n.delete(t)}function Gu(){Zb=!1,null!==ew&&Yu(ew)&&(ew=null),null!==tw&&Yu(tw)&&(tw=null),null!==nw&&Yu(nw)&&(nw=null),rw.forEach(Qu),ow.forEach(Qu)}function Ju(e,t){e.blockedOn===t&&(e.blockedOn=null,Zb||(Zb=!0,nc.unstable_scheduleCallback(nc.unstable_NormalPriority,Gu)))}function Xu(e){lw!==e&&(lw=e,nc.unstable_scheduleCallback(nc.unstable_NormalPriority,(function(){lw===e&&(lw=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===$u(r||n))continue;break}var a=ge(n);null!==a&&(e.splice(t,3),t-=3,n={pending:!0,data:o,method:n.method,action:r},Object.freeze(n),Co(a,n,r,o))}})))}function Ku(e){function t(t){return Ju(t,e)}null!==ew&&Ju(ew,e),null!==tw&&Ju(tw,e),null!==nw&&Ju(nw,e),rw.forEach(t),ow.forEach(t);for(var n=0;n<aw.length;n++){var r=aw[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<aw.length&&null===(n=aw[0]).blockedOn;)qu(n),null===n.blockedOn&&aw.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],i=o[Rd]||null;if("function"==typeof a)i||Xu(n);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[Rd]||null)l=i.formAction;else if(null!==$u(o))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),Xu(n)}}}function Zu(e){this._internalRoot=e}function ec(e){this._internalRoot=e}function tc(e){e[Cd]&&(e._reactRootContainer?console.error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."):console.error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."))}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var nc=n("./node_modules/scheduler/index.js"),rc=n("./node_modules/react/index.js"),oc=n("./node_modules/react-dom/index.js"),ac=Symbol.for("react.element"),ic=Symbol.for("react.transitional.element"),lc=Symbol.for("react.portal"),sc=Symbol.for("react.fragment"),uc=Symbol.for("react.strict_mode"),cc=Symbol.for("react.profiler"),dc=Symbol.for("react.provider"),fc=Symbol.for("react.consumer"),pc=Symbol.for("react.context"),hc=Symbol.for("react.forward_ref"),mc=Symbol.for("react.suspense"),yc=Symbol.for("react.suspense_list"),gc=Symbol.for("react.memo"),vc=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var bc=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var wc,Sc,kc,Ec,xc,Rc,Cc,Tc=Symbol.for("react.memo_cache_sentinel"),_c=Symbol.iterator,Pc=Symbol.for("react.client.reference"),Lc=rc.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Oc=Object.assign,Dc=0;w.__reactDisabledLog=!0;var Ac,Mc,Nc=!1,Ic=new("function"==typeof WeakMap?WeakMap:Map),Fc=null,jc=!1,zc=Array.isArray,Uc=oc.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Hc=Object.freeze({pending:!1,data:null,method:null,action:null}),$c=[],Bc=[],Wc=-1,Vc=D(null),qc=D(null),Yc=D(null),Qc=D(null),Gc=Object.prototype.hasOwnProperty,Jc=nc.unstable_scheduleCallback,Xc=nc.unstable_cancelCallback,Kc=nc.unstable_shouldYield,Zc=nc.unstable_requestPaint,ed=nc.unstable_now,td=nc.unstable_getCurrentPriorityLevel,nd=nc.unstable_ImmediatePriority,rd=nc.unstable_UserBlockingPriority,od=nc.unstable_NormalPriority,ad=nc.unstable_LowPriority,id=nc.unstable_IdlePriority,ld=nc.log,sd=nc.unstable_setDisableYieldValue,ud=null,cd=null,dd=null,fd=!1,pd="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,hd=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(md(e)/yd|0)|0},md=Math.log,yd=Math.LN2,gd=128,vd=4194304,bd=2,wd=8,Sd=32,kd=268435456,Ed=Math.random().toString(36).slice(2),xd="__reactFiber$"+Ed,Rd="__reactProps$"+Ed,Cd="__reactContainer$"+Ed,Td="__reactEvents$"+Ed,_d="__reactListeners$"+Ed,Pd="__reactHandles$"+Ed,Ld="__reactResources$"+Ed,Od="__reactMarker$"+Ed,Dd=new Set,Ad={},Md={},Nd=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Id={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},Fd=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),jd={},zd={},Ud=/[\n"\\]/g,Hd=!1,$d=!1,Bd=!1,Wd=!1,Vd=!1,qd=!1,Yd=["value","defaultValue"],Qd=!1,Gd=/["'&<>\n\t]|^\s|\s$/,Jd="address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "),Xd="applet caption html table td th marquee object template foreignObject desc title".split(" "),Kd=Xd.concat(["button"]),Zd="dd dt li option optgroup p rp rt".split(" "),ef={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null,containerTagInScope:null},tf={},nf="http://www.w3.org/1998/Math/MathML",rf="http://www.w3.org/2000/svg",of={animation:"animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "),background:"backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "),backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:"borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "),borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:"fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "),fontVariant:"fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "),gap:["columnGap","rowGap"],grid:"gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "),gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:"maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "),maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},af=/([A-Z])/g,lf=/^ms-/,sf=/^(?:webkit|moz|o)[A-Z]/,uf=/^-ms-/,cf=/-(.)/g,df=/;\s*$/,ff={},pf={},hf=!1,mf=!1,yf=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")),gf=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),vf={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",disableremoteplayback:"disableRemotePlayback",download:"download",draggable:"draggable",enctype:"encType",enterkeyhint:"enterKeyHint",fetchpriority:"fetchPriority",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",imagesizes:"imageSizes",imagesrcset:"imageSrcSet",inert:"inert",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",popover:"popover",popovertarget:"popoverTarget",popovertargetaction:"popoverTargetAction",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",transformorigin:"transformOrigin","transform-origin":"transformOrigin",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},bf={"aria-current":0,"aria-description":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},wf={},Sf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),kf=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ef=!1,xf={},Rf=/^on./,Cf=/^on[^A-Z]/,Tf=RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),_f=RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Pf=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,Lf=null,Of=null,Df=null,Af=!1,Mf=!1;if(Nd)try{var Nf={};Object.defineProperty(Nf,"passive",{get:function(){Mf=!0}}),window.addEventListener("test",Nf,Nf),window.removeEventListener("test",Nf,Nf)}catch(e){Mf=!1}var If,Ff,jf,zf=null,Uf=null,Hf=null,$f={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Bf=Pt($f),Wf=Oc({},$f,{view:0,detail:0}),Vf=Pt(Wf),qf=Oc({},Wf,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ot,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==jf&&(jf&&"mousemove"===e.type?(If=e.screenX-jf.screenX,Ff=e.screenY-jf.screenY):Ff=If=0,jf=e),If)},movementY:function(e){return"movementY"in e?e.movementY:Ff}}),Yf=Pt(qf),Qf=Pt(Oc({},qf,{dataTransfer:0})),Gf=Pt(Oc({},Wf,{relatedTarget:0})),Jf=Pt(Oc({},$f,{animationName:0,elapsedTime:0,pseudoElement:0})),Xf=Pt(Oc({},$f,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Kf=Pt(Oc({},$f,{data:0})),Zf=Kf,ep={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},tp={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},np={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},rp=Pt(Oc({},Wf,{key:function(e){if(e.key){var t=ep[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ct(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?tp[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ot,charCode:function(e){return"keypress"===e.type?Ct(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ct(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),op=Pt(Oc({},qf,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),ap=Pt(Oc({},Wf,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ot})),ip=Pt(Oc({},$f,{propertyName:0,elapsedTime:0,pseudoElement:0})),lp=Pt(Oc({},qf,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),sp=Pt(Oc({},$f,{newState:0,oldState:0})),up=[9,13,27,32],cp=229,dp=Nd&&"CompositionEvent"in window,fp=null;Nd&&"documentMode"in document&&(fp=document.documentMode);var pp=Nd&&"TextEvent"in window&&!fp,hp=Nd&&(!dp||fp&&8<fp&&11>=fp),mp=32,yp=String.fromCharCode(mp),gp=!1,vp=!1,bp={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},wp=null,Sp=null,kp=!1;Nd&&(kp=function(e){if(!Nd)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}("input")&&(!document.documentMode||9<document.documentMode));var Ep="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},xp=Nd&&"documentMode"in document&&11>=document.documentMode,Rp=null,Cp=null,Tp=null,_p=!1,Pp={animationend:Zt("Animation","AnimationEnd"),animationiteration:Zt("Animation","AnimationIteration"),animationstart:Zt("Animation","AnimationStart"),transitionrun:Zt("Transition","TransitionRun"),transitionstart:Zt("Transition","TransitionStart"),transitioncancel:Zt("Transition","TransitionCancel"),transitionend:Zt("Transition","TransitionEnd")},Lp={},Op={};Nd&&(Op=document.createElement("div").style,"AnimationEvent"in window||(delete Pp.animationend.animation,delete Pp.animationiteration.animation,delete Pp.animationstart.animation),"TransitionEvent"in window||delete Pp.transitionend.transition);var Dp=en("animationend"),Ap=en("animationiteration"),Mp=en("animationstart"),Np=en("transitionrun"),Ip=en("transitionstart"),Fp=en("transitioncancel"),jp=en("transitionend"),zp=new Map,Up="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" "),Hp=1,$p=2,Bp=4,Wp=[],Vp=0,qp=0,Yp={};Object.freeze(Yp);var Qp=null,Gp=null,Jp=0,Xp=1,Kp=2,Zp=8,eh=16,th=64,nh=nc.unstable_now,rh=-0,oh=-0,ah=-1.1,ih=-0,lh=!1,sh=!1,uh={recordUnsafeLifecycleWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},ch=[],dh=[],fh=[],ph=[],hh=[],mh=[],yh=new Set;uh.recordUnsafeLifecycleWarnings=function(e,t){yh.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&ch.push(e),e.mode&Zp&&"function"==typeof t.UNSAFE_componentWillMount&&dh.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&fh.push(e),e.mode&Zp&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&ph.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&hh.push(e),e.mode&Zp&&"function"==typeof t.UNSAFE_componentWillUpdate&&mh.push(e))},uh.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;0<ch.length&&(ch.forEach((function(t){e.add(b(t)||"Component"),yh.add(t.type)})),ch=[]);var t=new Set;0<dh.length&&(dh.forEach((function(e){t.add(b(e)||"Component"),yh.add(e.type)})),dh=[]);var n=new Set;0<fh.length&&(fh.forEach((function(e){n.add(b(e)||"Component"),yh.add(e.type)})),fh=[]);var r=new Set;0<ph.length&&(ph.forEach((function(e){r.add(b(e)||"Component"),yh.add(e.type)})),ph=[]);var o=new Set;0<hh.length&&(hh.forEach((function(e){o.add(b(e)||"Component"),yh.add(e.type)})),hh=[]);var a=new Set;if(0<mh.length&&(mh.forEach((function(e){a.add(b(e)||"Component"),yh.add(e.type)})),mh=[]),0<t.size){var i=h(t);console.error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",i)}0<r.size&&(i=h(r),console.error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",i)),0<a.size&&(i=h(a),console.error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",i)),0<e.size&&(i=h(e),console.warn("componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i)),0<n.size&&(i=h(n),console.warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i)),0<o.size&&(i=h(o),console.warn("componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",i))};var gh=new Map,vh=new Set;uh.recordLegacyContextWarning=function(e,t){for(var n=null,r=e;null!==r;)r.mode&Zp&&(n=r),r=r.return;null===n?console.error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."):!vh.has(e.type)&&(r=gh.get(n),null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],gh.set(n,r)),r.push(e))},uh.flushLegacyContextWarning=function(){gh.forEach((function(e){if(0!==e.length){var t=e[0],n=new Set;e.forEach((function(e){n.add(b(e)||"Component"),vh.add(e.type)}));var r=h(n);T(t,(function(){console.error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",r)}))}}))},uh.discardPendingWarnings=function(){ch=[],dh=[],fh=[],ph=[],hh=[],mh=[],gh=new Map};var bh,wh=new WeakMap,Sh=[],kh=0,Eh=null,xh=0,Rh=[],Ch=0,Th=null,_h=1,Ph="",Lh=null,Oh=null,Dh=!1,Ah=!1,Mh=null,Nh=null,Ih=!1,Fh=Error("Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),jh=Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"),zh=Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),Uh={then:function(){console.error('Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.')}},Hh=null,$h=!1,Bh={"react-stack-bottom-frame":function(e,t,n){var r=jc;jc=!0;try{return e(t,n)}finally{jc=r}}},Wh=Bh["react-stack-bottom-frame"].bind(Bh),Vh={"react-stack-bottom-frame":function(e){var t=jc;jc=!0;try{return e.render()}finally{jc=t}}},qh=Vh["react-stack-bottom-frame"].bind(Vh),Yh={"react-stack-bottom-frame":function(e,t){try{t.componentDidMount()}catch(t){Hl(e,e.return,t)}}},Qh=Yh["react-stack-bottom-frame"].bind(Yh),Gh={"react-stack-bottom-frame":function(e,t,n,r,o){try{t.componentDidUpdate(n,r,o)}catch(t){Hl(e,e.return,t)}}},Jh=Gh["react-stack-bottom-frame"].bind(Gh),Xh={"react-stack-bottom-frame":function(e,t){var n=t.stack;e.componentDidCatch(t.value,{componentStack:null!==n?n:""})}},Kh=Xh["react-stack-bottom-frame"].bind(Xh),Zh={"react-stack-bottom-frame":function(e,t,n){try{n.componentWillUnmount()}catch(n){Hl(e,t,n)}}},em=Zh["react-stack-bottom-frame"].bind(Zh),tm={"react-stack-bottom-frame":function(e){var t=e.create;return e=e.inst,t=t(),e.destroy=t}},nm=tm["react-stack-bottom-frame"].bind(tm),rm={"react-stack-bottom-frame":function(e,t,n){try{n()}catch(n){Hl(e,t,n)}}},om=rm["react-stack-bottom-frame"].bind(rm),am={"react-stack-bottom-frame":function(e){return(0,e._init)(e._payload)}},im=am["react-stack-bottom-frame"].bind(am),lm=null,sm=0,um=null,cm=bh=!1,dm={},fm={},pm={};p=function(e,t,n){if(null!==n&&"object"==typeof n&&n._store&&(!n._store.validated&&null==n.key||2===n._store.validated)){if("object"!=typeof n._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");n._store.validated=1;var r=b(e),o=r||"null";if(!dm[o]){dm[o]=!0,n=n._owner,e=e._debugOwner;var a="";e&&"number"==typeof e.tag&&(o=b(e))&&(a="\n\nCheck the render method of `"+o+"`."),a||r&&(a="\n\nCheck the top-level render call using <"+r+">.");var i="";null!=n&&e!==n&&(r=null,"number"==typeof n.tag?r=b(n):"string"==typeof n.name&&(r=n.name),r&&(i=" It was passed a child from "+r+".")),T(t,(function(){console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',a,i)}))}}};var hm=Jn(!0),mm=Jn(!1),ym=D(null),gm=D(0),vm=D(null),bm=null,wm=1,Sm=2,km=D(0),Em=0,xm=1,Rm=2,Cm=4,Tm=8,_m="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Pm=nc.unstable_scheduleCallback,Lm=nc.unstable_NormalPriority,Om={$$typeof:pc,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0,_currentRenderer:null,_currentRenderer2:null},Dm=null,Am=0,Mm=0,Nm=null,Im=Lc.S;Lc.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Dm){var n=Dm=[];Am=0,Mm=is(),Nm={status:"pending",value:void 0,then:function(e){n.push(e)}}}Am++,t.then(sr,sr)}(0,t),null!==Im&&Im(e,t)};var Fm,jm=D(null),zm=new Set,Um=new Set,Hm=new Set,$m=new Set,Bm=0,Wm=null,Vm=null,qm=null,Ym=!1,Qm=!1,Gm=!1,Jm=0,Xm=0,Km=null,Zm=0,ey=25,ty=null,ny=null,ry=-1,oy=!1,ay=function(){return{lastEffect:null,events:null,stores:null,memoCache:null}},iy={readContext:Na,use:_r,useCallback:yr,useContext:yr,useEffect:yr,useImperativeHandle:yr,useLayoutEffect:yr,useInsertionEffect:yr,useMemo:yr,useReducer:yr,useRef:yr,useState:yr,useDebugValue:yr,useDeferredValue:yr,useTransition:yr,useSyncExternalStore:yr,useId:yr};iy.useCacheRefresh=yr,iy.useMemoCache=yr,iy.useHostTransitionStatus=yr,iy.useFormState=yr,iy.useActionState=yr,iy.useOptimistic=yr;var ly=null,sy=null,uy=null,cy=null,dy=null,fy=null,py=null;(ly={readContext:function(e){return Na(e)},use:_r,useCallback:function(e,t){return ty="useCallback",fr(),hr(t),yo(e,t)},useContext:function(e){return ty="useContext",fr(),Na(e)},useEffect:function(e,t){return ty="useEffect",fr(),hr(t),co(e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",fr(),hr(n),ho(e,t,n)},useInsertionEffect:function(e,t){ty="useInsertionEffect",fr(),hr(t),so(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",fr(),hr(t),fo(e,t)},useMemo:function(e,t){ty="useMemo",fr(),hr(t);var n=Lc.H;Lc.H=dy;try{return vo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",fr();var r=Lc.H;Lc.H=dy;try{return Or(e,t,n)}finally{Lc.H=r}},useRef:function(e){return ty="useRef",fr(),lo(e)},useState:function(e){ty="useState",fr();var t=Lc.H;Lc.H=dy;try{return Br(e)}finally{Lc.H=t}},useDebugValue:function(){ty="useDebugValue",fr()},useDeferredValue:function(e,t){return ty="useDeferredValue",fr(),wo(e,t)},useTransition:function(){return ty="useTransition",fr(),Po()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",fr(),Nr(e,t,n)},useId:function(){return ty="useId",fr(),Ao()},useCacheRefresh:function(){return ty="useCacheRefresh",fr(),Mo()}}).useMemoCache=Pr,ly.useHostTransitionStatus=Do,ly.useFormState=function(e,t){return ty="useFormState",fr(),mr(),to(e,t)},ly.useActionState=function(e,t){return ty="useActionState",fr(),to(e,t)},ly.useOptimistic=function(e){return ty="useOptimistic",fr(),Wr(e)},(sy={readContext:function(e){return Na(e)},use:_r,useCallback:function(e,t){return ty="useCallback",pr(),yo(e,t)},useContext:function(e){return ty="useContext",pr(),Na(e)},useEffect:function(e,t){return ty="useEffect",pr(),co(e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",pr(),ho(e,t,n)},useInsertionEffect:function(e,t){ty="useInsertionEffect",pr(),so(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",pr(),fo(e,t)},useMemo:function(e,t){ty="useMemo",pr();var n=Lc.H;Lc.H=dy;try{return vo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",pr();var r=Lc.H;Lc.H=dy;try{return Or(e,t,n)}finally{Lc.H=r}},useRef:function(e){return ty="useRef",pr(),lo(e)},useState:function(e){ty="useState",pr();var t=Lc.H;Lc.H=dy;try{return Br(e)}finally{Lc.H=t}},useDebugValue:function(){ty="useDebugValue",pr()},useDeferredValue:function(e,t){return ty="useDeferredValue",pr(),wo(e,t)},useTransition:function(){return ty="useTransition",pr(),Po()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",pr(),Nr(e,t,n)},useId:function(){return ty="useId",pr(),Ao()},useCacheRefresh:function(){return ty="useCacheRefresh",pr(),Mo()}}).useMemoCache=Pr,sy.useHostTransitionStatus=Do,sy.useFormState=function(e,t){return ty="useFormState",pr(),mr(),to(e,t)},sy.useActionState=function(e,t){return ty="useActionState",pr(),to(e,t)},sy.useOptimistic=function(e){return ty="useOptimistic",pr(),Wr(e)},(uy={readContext:function(e){return Na(e)},use:_r,useCallback:function(e,t){return ty="useCallback",pr(),go(e,t)},useContext:function(e){return ty="useContext",pr(),Na(e)},useEffect:function(e,t){ty="useEffect",pr(),uo(2048,Tm,e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",pr(),mo(e,t,n)},useInsertionEffect:function(e,t){return ty="useInsertionEffect",pr(),uo(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",pr(),uo(4,Cm,e,t)},useMemo:function(e,t){ty="useMemo",pr();var n=Lc.H;Lc.H=fy;try{return bo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",pr();var r=Lc.H;Lc.H=fy;try{return Dr(e)}finally{Lc.H=r}},useRef:function(){return ty="useRef",pr(),Cr().memoizedState},useState:function(){ty="useState",pr();var e=Lc.H;Lc.H=fy;try{return Dr(Lr)}finally{Lc.H=e}},useDebugValue:function(){ty="useDebugValue",pr()},useDeferredValue:function(e,t){return ty="useDeferredValue",pr(),So(e,t)},useTransition:function(){return ty="useTransition",pr(),Lo()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",pr(),Ir(e,t,n)},useId:function(){return ty="useId",pr(),Cr().memoizedState},useCacheRefresh:function(){return ty="useCacheRefresh",pr(),Cr().memoizedState}}).useMemoCache=Pr,uy.useHostTransitionStatus=Do,uy.useFormState=function(e){return ty="useFormState",pr(),mr(),no(e)},uy.useActionState=function(e){return ty="useActionState",pr(),no(e)},uy.useOptimistic=function(e,t){return ty="useOptimistic",pr(),Vr(e,t)},(cy={readContext:function(e){return Na(e)},use:_r,useCallback:function(e,t){return ty="useCallback",pr(),go(e,t)},useContext:function(e){return ty="useContext",pr(),Na(e)},useEffect:function(e,t){ty="useEffect",pr(),uo(2048,Tm,e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",pr(),mo(e,t,n)},useInsertionEffect:function(e,t){return ty="useInsertionEffect",pr(),uo(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",pr(),uo(4,Cm,e,t)},useMemo:function(e,t){ty="useMemo",pr();var n=Lc.H;Lc.H=py;try{return bo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",pr();var r=Lc.H;Lc.H=py;try{return Mr(e)}finally{Lc.H=r}},useRef:function(){return ty="useRef",pr(),Cr().memoizedState},useState:function(){ty="useState",pr();var e=Lc.H;Lc.H=py;try{return Mr(Lr)}finally{Lc.H=e}},useDebugValue:function(){ty="useDebugValue",pr()},useDeferredValue:function(e,t){return ty="useDeferredValue",pr(),ko(e,t)},useTransition:function(){return ty="useTransition",pr(),Oo()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",pr(),Ir(e,t,n)},useId:function(){return ty="useId",pr(),Cr().memoizedState},useCacheRefresh:function(){return ty="useCacheRefresh",pr(),Cr().memoizedState}}).useMemoCache=Pr,cy.useHostTransitionStatus=Do,cy.useFormState=function(e){return ty="useFormState",pr(),mr(),ao(e)},cy.useActionState=function(e){return ty="useActionState",pr(),ao(e)},cy.useOptimistic=function(e,t){return ty="useOptimistic",pr(),Yr(e,t)},(dy={readContext:function(e){return d(),Na(e)},use:function(e){return c(),_r(e)},useCallback:function(e,t){return ty="useCallback",c(),fr(),yo(e,t)},useContext:function(e){return ty="useContext",c(),fr(),Na(e)},useEffect:function(e,t){return ty="useEffect",c(),fr(),co(e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",c(),fr(),ho(e,t,n)},useInsertionEffect:function(e,t){ty="useInsertionEffect",c(),fr(),so(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",c(),fr(),fo(e,t)},useMemo:function(e,t){ty="useMemo",c(),fr();var n=Lc.H;Lc.H=dy;try{return vo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",c(),fr();var r=Lc.H;Lc.H=dy;try{return Or(e,t,n)}finally{Lc.H=r}},useRef:function(e){return ty="useRef",c(),fr(),lo(e)},useState:function(e){ty="useState",c(),fr();var t=Lc.H;Lc.H=dy;try{return Br(e)}finally{Lc.H=t}},useDebugValue:function(){ty="useDebugValue",c(),fr()},useDeferredValue:function(e,t){return ty="useDeferredValue",c(),fr(),wo(e,t)},useTransition:function(){return ty="useTransition",c(),fr(),Po()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",c(),fr(),Nr(e,t,n)},useId:function(){return ty="useId",c(),fr(),Ao()},useCacheRefresh:function(){return ty="useCacheRefresh",fr(),Mo()},useMemoCache:function(e){return c(),Pr(e)}}).useHostTransitionStatus=Do,dy.useFormState=function(e,t){return ty="useFormState",c(),fr(),to(e,t)},dy.useActionState=function(e,t){return ty="useActionState",c(),fr(),to(e,t)},dy.useOptimistic=function(e){return ty="useOptimistic",c(),fr(),Wr(e)},(fy={readContext:function(e){return d(),Na(e)},use:function(e){return c(),_r(e)},useCallback:function(e,t){return ty="useCallback",c(),pr(),go(e,t)},useContext:function(e){return ty="useContext",c(),pr(),Na(e)},useEffect:function(e,t){ty="useEffect",c(),pr(),uo(2048,Tm,e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",c(),pr(),mo(e,t,n)},useInsertionEffect:function(e,t){return ty="useInsertionEffect",c(),pr(),uo(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",c(),pr(),uo(4,Cm,e,t)},useMemo:function(e,t){ty="useMemo",c(),pr();var n=Lc.H;Lc.H=fy;try{return bo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",c(),pr();var r=Lc.H;Lc.H=fy;try{return Dr(e)}finally{Lc.H=r}},useRef:function(){return ty="useRef",c(),pr(),Cr().memoizedState},useState:function(){ty="useState",c(),pr();var e=Lc.H;Lc.H=fy;try{return Dr(Lr)}finally{Lc.H=e}},useDebugValue:function(){ty="useDebugValue",c(),pr()},useDeferredValue:function(e,t){return ty="useDeferredValue",c(),pr(),So(e,t)},useTransition:function(){return ty="useTransition",c(),pr(),Lo()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",c(),pr(),Ir(e,t,n)},useId:function(){return ty="useId",c(),pr(),Cr().memoizedState},useCacheRefresh:function(){return ty="useCacheRefresh",pr(),Cr().memoizedState},useMemoCache:function(e){return c(),Pr(e)}}).useHostTransitionStatus=Do,fy.useFormState=function(e){return ty="useFormState",c(),pr(),no(e)},fy.useActionState=function(e){return ty="useActionState",c(),pr(),no(e)},fy.useOptimistic=function(e,t){return ty="useOptimistic",c(),pr(),Vr(e,t)},(py={readContext:function(e){return d(),Na(e)},use:function(e){return c(),_r(e)},useCallback:function(e,t){return ty="useCallback",c(),pr(),go(e,t)},useContext:function(e){return ty="useContext",c(),pr(),Na(e)},useEffect:function(e,t){ty="useEffect",c(),pr(),uo(2048,Tm,e,t)},useImperativeHandle:function(e,t,n){return ty="useImperativeHandle",c(),pr(),mo(e,t,n)},useInsertionEffect:function(e,t){return ty="useInsertionEffect",c(),pr(),uo(4,Rm,e,t)},useLayoutEffect:function(e,t){return ty="useLayoutEffect",c(),pr(),uo(4,Cm,e,t)},useMemo:function(e,t){ty="useMemo",c(),pr();var n=Lc.H;Lc.H=fy;try{return bo(e,t)}finally{Lc.H=n}},useReducer:function(e,t,n){ty="useReducer",c(),pr();var r=Lc.H;Lc.H=fy;try{return Mr(e)}finally{Lc.H=r}},useRef:function(){return ty="useRef",c(),pr(),Cr().memoizedState},useState:function(){ty="useState",c(),pr();var e=Lc.H;Lc.H=fy;try{return Mr(Lr)}finally{Lc.H=e}},useDebugValue:function(){ty="useDebugValue",c(),pr()},useDeferredValue:function(e,t){return ty="useDeferredValue",c(),pr(),ko(e,t)},useTransition:function(){return ty="useTransition",c(),pr(),Oo()},useSyncExternalStore:function(e,t,n){return ty="useSyncExternalStore",c(),pr(),Ir(e,t,n)},useId:function(){return ty="useId",c(),pr(),Cr().memoizedState},useCacheRefresh:function(){return ty="useCacheRefresh",pr(),Cr().memoizedState},useMemoCache:function(e){return c(),Pr(e)}}).useHostTransitionStatus=Do,py.useFormState=function(e){return ty="useFormState",c(),pr(),ao(e)},py.useActionState=function(e){return ty="useActionState",c(),pr(),ao(e)},py.useOptimistic=function(e,t){return ty="useOptimistic",c(),pr(),Yr(e,t)};var hy={},my=new Set,yy=new Set,gy=new Set,vy=new Set,by=new Set,wy=new Set,Sy=new Set,ky=new Set,Ey=new Set,xy=new Set;Object.freeze(hy);var Ry={isMounted:function(e){var t=Fc;if(null!==t&&jc&&1===t.tag){var n=t.stateNode;n._warnedAboutRefsInRender||console.error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",b(t)||"A component"),n._warnedAboutRefsInRender=!0}return!!(e=e._reactInternals)&&_(e)===e},enqueueSetState:function(e,t,n){var r=pl(e=e._reactInternals),o=Ua(r);o.payload=t,null!=n&&(Bo(n),o.callback=n),null!==(t=Ha(e,o,r))&&(ml(t,e,r),$a(t,e,r)),Z(e,r)},enqueueReplaceState:function(e,t,n){var r=pl(e=e._reactInternals),o=Ua(r);o.tag=Yy,o.payload=t,null!=n&&(Bo(n),o.callback=n),null!==(t=Ha(e,o,r))&&(ml(t,e,r),$a(t,e,r)),Z(e,r)},enqueueForceUpdate:function(e,t){var n=pl(e=e._reactInternals),r=Ua(n);r.tag=Qy,null!=t&&(Bo(t),r.callback=t),null!==(t=Ha(e,r,n))&&(ml(t,e,n),$a(t,e,n)),null!==dd&&"function"==typeof dd.markForceUpdateScheduled&&dd.markForceUpdateScheduled(e,n)}},Cy="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},Ty=null,_y=null,Py=Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."),Ly=!1,Oy={},Dy={},Ay={},My={},Ny=!1,Iy={},Fy={},jy={dehydrated:null,treeContext:null,retryLane:0},zy=!1,Uy=D(null),Hy=D(null),$y={},By=null,Wy=null,Vy=!1,qy=0,Yy=1,Qy=2,Gy=3,Jy=!1,Xy=!1,Ky=null,Zy=!1,eg=null;eg=new Set;var tg=!1,ng=!1,rg=!1,og="function"==typeof WeakSet?WeakSet:Set,ag=null,ig=null,lg=null,sg=!1,ug=null,cg=!1,dg=null,fg=8192,pg=!1;try{var hg=Object.preventExtensions({});new Map([[hg,null]]),new Set([hg])}catch(e){pg=!0}var mg={getCacheForType:function(e){var t=Na(Om),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n},getOwner:function(){return Fc}};if("function"==typeof Symbol&&Symbol.for){var yg=Symbol.for;yg("selector.component"),yg("selector.has_pseudo_class"),yg("selector.role"),yg("selector.test_id"),yg("selector.text")}var gg=[],vg="function"==typeof WeakMap?WeakMap:Map,bg=0,wg=2,Sg=4,kg=0,Eg=1,xg=2,Rg=3,Cg=4,Tg=5,_g=6,Pg=bg,Lg=null,Og=null,Dg=0,Ag=0,Mg=1,Ng=2,Ig=3,Fg=4,jg=5,zg=6,Ug=7,Hg=8,$g=Ag,Bg=null,Wg=!1,Vg=!1,qg=!1,Yg=0,Qg=kg,Gg=0,Jg=0,Xg=0,Kg=0,Zg=0,ev=null,tv=null,nv=!1,rv=0,ov=300,av=1/0,iv=500,lv=null,sv=null,uv=!1,cv=null,dv=0,fv=0,pv=null,hv=50,mv=0,yv=null,gv=!1,vv=!1,bv=50,wv=0,Sv=null,kv=!1,Ev=0,xv=1,Rv=2,Cv=null,Tv=!1,_v=new Set,Pv=null,Lv=null,Ov=!1,Dv=!1,Av=!1,Mv=!1,Nv=0,Iv={};!function(){for(var e=0;e<Up.length;e++){var t=Up[e];tn(t.toLowerCase(),"on"+(t=t[0].toUpperCase()+t.slice(1)))}tn(Dp,"onAnimationEnd"),tn(Ap,"onAnimationIteration"),tn(Mp,"onAnimationStart"),tn("dblclick","onDoubleClick"),tn("focusin","onFocus"),tn("focusout","onBlur"),tn(Np,"onTransitionRun"),tn(Ip,"onTransitionStart"),tn(Fp,"onTransitionCancel"),tn(jp,"onTransitionEnd")}(),ke("onMouseEnter",["mouseout","mouseover"]),ke("onMouseLeave",["mouseout","mouseover"]),ke("onPointerEnter",["pointerout","pointerover"]),ke("onPointerLeave",["pointerout","pointerover"]),Se("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Se("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Se("onBeforeInput",["compositionend","keypress","textInput","paste"]),Se("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Se("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Se("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fv="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jv=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Fv)),zv="_reactListening"+Math.random().toString(36).slice(2),Uv=!1,Hv=!1,$v=!1,Bv=!1,Wv=!1,Vv=!1,qv=!1,Yv={},Qv=!0,Gv=/\r\n?/g,Jv=/\u0000|\uFFFD/g,Xv="http://www.w3.org/1999/xlink",Kv="http://www.w3.org/XML/1998/namespace",Zv="javascript:throw new Error('React form unexpectedly submitted.')",eb="suppressHydrationWarning",tb="$",nb="/$",rb="$?",ob="$!",ab="F!",ib="F",lb="style",sb=0,ub=1,cb=2,db=null,fb=null,pb={dialog:!0,webview:!0},hb=null,mb="function"==typeof setTimeout?setTimeout:void 0,yb="function"==typeof clearTimeout?clearTimeout:void 0,gb=-1,vb="function"==typeof Promise?Promise:void 0,bb="function"==typeof queueMicrotask?queueMicrotask:void 0!==vb?function(e){return vb.resolve(null).then(e).catch($s)}:mb,wb=0,Sb=1,kb=2,Eb=3,xb=4,Rb=new Map,Cb=new Set,Tb=Uc.d;Uc.d={f:function(){var e=Tb.f(),t=Sl();return e||t},r:function(e){var t=ge(e);null!==t&&5===t.tag&&"form"===t.type?_o(t):Tb.r(e)},D:function(e){Tb.D(e),du("dns-prefetch",e,null)},C:function(e,t){Tb.C(e,t),du("preconnect",e,t)},L:function(e,t,n){Tb.L(e,t,n);var r=Fb;if(r&&e&&t){var o='link[rel="preload"][as="'+Me(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+Me(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+Me(n.imageSizes)+'"]')):o+='[href="'+Me(e)+'"]';var a=o;switch(t){case"style":a=hu(e);break;case"script":a=gu(e)}Rb.has(a)||(e=Oc({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),Rb.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(mu(a))||"script"===t&&r.querySelector(vu(a))||(_s(t=r.createElement("link"),"link",e),we(t),r.head.appendChild(t)))}},m:function(e,t){Tb.m(e,t);var n=Fb;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+Me(r)+'"][href="'+Me(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=gu(e)}if(!Rb.has(a)&&(e=Oc({rel:"modulepreload",href:e},t),Rb.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(vu(a)))return}_s(r=n.createElement("link"),"link",e),we(r),n.head.appendChild(r)}}},X:function(e,t){Tb.X(e,t);var n=Fb;if(n&&e){var r=be(n).hoistableScripts,o=gu(e),a=r.get(o);a||((a=n.querySelector(vu(o)))||(e=Oc({src:e,async:!0},t),(t=Rb.get(o))&&ku(e,t),we(a=n.createElement("script")),_s(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){Tb.S(e,t,n);var r=Fb;if(r&&e){var o=be(r).hoistableStyles,a=hu(e);t=t||"default";var i=o.get(a);if(!i){var l={loading:wb,preload:null};if(i=r.querySelector(mu(a)))l.loading=Sb|xb;else{e=Oc({rel:"stylesheet",href:e,"data-precedence":t},n),(n=Rb.get(a))&&Su(e,n);var s=i=r.createElement("link");we(s),_s(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=Sb})),s.addEventListener("error",(function(){l.loading|=kb})),l.loading|=xb,wu(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,t){Tb.M(e,t);var n=Fb;if(n&&e){var r=be(n).hoistableScripts,o=gu(e),a=r.get(o);a||((a=n.querySelector(vu(o)))||(e=Oc({src:e,async:!0,type:"module"},t),(t=Rb.get(o))&&ku(e,t),we(a=n.createElement("script")),_s(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var _b,Pb,Lb,Ob,Db,Ab,Mb,Nb,Ib,Fb="undefined"==typeof document?null:document,jb=null,zb=null,Ub=null,Hb=null,$b=Hc,Bb={$$typeof:pc,Provider:null,Consumer:null,_currentValue:$b,_currentValue2:$b,_threadCount:0},Wb="%c%s%c ",Vb="background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",qb="",Yb=" ",Qb=Function.prototype.bind,Gb=!1;_b=function(t,n,o,a){null!==(n=e(t,n))&&(o=r(n.memoizedState,o,0,a),n.memoizedState=o,n.baseState=o,t.memoizedProps=Oc({},t.memoizedProps),null!==(o=an(t,2))&&ml(o,t,2))},Pb=function(t,n,r){null!==(n=e(t,n))&&(r=i(n.memoizedState,r,0),n.memoizedState=r,n.baseState=r,t.memoizedProps=Oc({},t.memoizedProps),null!==(r=an(t,2))&&ml(r,t,2))},Lb=function(t,n,r,a){null!==(n=e(t,n))&&(r=o(n.memoizedState,r,a),n.memoizedState=r,n.baseState=r,t.memoizedProps=Oc({},t.memoizedProps),null!==(r=an(t,2))&&ml(r,t,2))},Ob=function(e,t,n){e.pendingProps=r(e.memoizedProps,t,0,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=an(e,2))&&ml(t,e,2)},Db=function(e,t){e.pendingProps=i(e.memoizedProps,t,0),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=an(e,2))&&ml(t,e,2)},Ab=function(e,t,n){e.pendingProps=o(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),null!==(t=an(e,2))&&ml(t,e,2)},Mb=function(e){var t=an(e,2);null!==t&&ml(t,e,2)},Nb=function(e){s=e},Ib=function(e){l=e};var Jb,Xb=!0,Kb=null,Zb=!1,ew=null,tw=null,nw=null,rw=new Map,ow=new Map,aw=[],iw="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "),lw=null;if(ec.prototype.render=Zu.prototype.render=function(e,t){var n=this._internalRoot;if(null===n)throw Error("Cannot update an unmounted root.");"function"==typeof t?console.error("does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."):m(t)?console.error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."):void 0!==t&&console.error("You passed a second argument to root.render(...) but it only accepts one argument."),Mu(t=n.current,pl(t),e,n,null,null)},ec.prototype.unmount=Zu.prototype.unmount=function(e){if("function"==typeof e&&console.error("does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."),null!==(e=this._internalRoot)){this._internalRoot=null;var t=e.containerInfo;(Pg&(wg|Sg))!==bg&&console.error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."),Au(null,e,null,null),Sl(),t[Cd]=null}},ec.prototype.unstable_scheduleHydration=function(e){if(e){var t=he();e={blockedOn:null,target:e,priority:t};for(var n=0;n<aw.length&&0!==t&&t<aw[n].priority;n++);aw.splice(n,0,e),0===n&&qu(e)}},function(){var e=rc.version;if("19.0.0"!==e)throw Error('Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      '+e+"\n  - react-dom:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch")}(),"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"),Uc.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error("Unable to find node on an unmounted component.");throw e=Object.keys(e).join(","),Error("Argument appears to not be a ReactComponent. Keys: "+e)}return e=function(e){var t=e.alternate;if(!t){if(null===(t=_(e)))throw Error("Unable to find node on an unmounted component.");return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return L(o),e;if(a===r)return L(o),t;a=a.sibling}throw Error("Unable to find node on an unmounted component.")}if(n.return!==r.return)n=o,r=a;else{for(var i=!1,l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}if(!i)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(n.alternate!==r)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==n.tag)throw Error("Unable to find node on an unmounted component.");return n.stateNode.current===n?e:t}(t),null===(e=null!==e?O(e):null)?null:e.stateNode},(Jb={bundleType:1,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:Lc,findFiberByHostInstance:ye,reconcilerVersion:"19.0.0"}).overrideHookState=_b,Jb.overrideHookStateDeletePath=Pb,Jb.overrideHookStateRenamePath=Lb,Jb.overrideProps=Ob,Jb.overridePropsDeletePath=Db,Jb.overridePropsRenamePath=Ab,Jb.scheduleUpdate=Mb,Jb.setErrorHandler=Nb,Jb.setSuspenseHandler=Ib,Jb.scheduleRefresh=function(e,t){if(null!==Qp){var n=t.staleFamilies;t=t.updatedFamilies,zl(),pn(e.current,t,n),Sl()}},Jb.scheduleRoot=function(e,t){e.context===Yp&&(Au(t,e,null,null),Sl())},Jb.setRefreshHandler=function(e){Qp=e},Jb.getCurrentFiber=function(){return Fc},Jb.getLaneLabelMap=function(){for(var e=new Map,t=1,n=0;31>n;n++){var r=ee(t);e.set(t,r),t*=2}return e},Jb.injectProfilingHooks=function(e){dd=e},!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return console.error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"),!0;try{ud=t.inject(e),cd=t}catch(e){console.error("React instrumentation encountered an error: %s.",e)}return!!t.checkDCE}(Jb)&&Nd&&window.top===window.self&&(-1<navigator.userAgent.indexOf("Chrome")&&-1===navigator.userAgent.indexOf("Edge")||-1<navigator.userAgent.indexOf("Firefox"))){var sw=window.location.protocol;/^(https?|file):$/.test(sw)&&console.info("%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools"+("file:"===sw?"\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq":""),"font-weight:bold")}t.createRoot=function(e,t){if(!m(e))throw Error("Target container is not a DOM element.");tc(e);var n=!1,r="",o=Qo,a=Go,i=Jo;return null!=t&&(t.hydrate?console.warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."):"object"==typeof t&&null!==t&&t.$$typeof===ic&&console.error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"),!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(i=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Ou(e,1,!1,null,0,n,r,o,a,i,0,null),e[Cd]=t.current,fs(8===e.nodeType?e.parentNode:e),new Zu(t)},t.hydrateRoot=function(e,t,n){if(!m(e))throw Error("Target container is not a DOM element.");tc(e),void 0===t&&console.error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");var r=!1,o="",a=Qo,i=Go,l=Jo,s=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(i=n.onCaughtError),void 0!==n.onRecoverableError&&(l=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(s=n.formState)),(t=Ou(e,1,!0,t,0,r,o,a,i,l,0,s)).context=Du(null),(o=Ua(r=pl(n=t.current))).callback=null,Ha(n,o,r),t.current.lanes=r,se(t,r),Kl(t),e[Cd]=t.current,fs(e),new ec(t)},t.version="19.0.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/cjs/react-dom.development.js":(e,t,n)=>{!function(){function e(){}function r(e){return""+e}function o(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}function a(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":'something with type "'+typeof e+'"'}function i(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":"string"==typeof e?JSON.stringify(e):"number"==typeof e?"`"+e+"`":'something with type "'+typeof e+'"'}function l(){var e=d.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var s=n("./node_modules/react/index.js"),u={d:{f:e,r:function(){throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.")},D:e,C:e,L:e,m:e,X:e,S:e,M:e},p:0,findDOMNode:null},c=Symbol.for("react.portal"),d=s.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=u,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error("Target container is not a DOM element.");return function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;try{r(o);var a=!1}catch(e){a=!0}return a&&(console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.","function"==typeof Symbol&&Symbol.toStringTag&&o[Symbol.toStringTag]||o.constructor.name||"Object"),r(o)),{$$typeof:c,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=d.T,n=u.p;try{if(d.T=null,u.p=2,e)return e()}finally{d.T=t,u.p=n,u.d.f()&&console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.")}},t.preconnect=function(e,t){"string"==typeof e&&e?null!=t&&"object"!=typeof t?console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",i(t)):null!=t&&"string"!=typeof t.crossOrigin&&console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",a(t.crossOrigin)):console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,u.d.C(e,t))},t.prefetchDNS=function(e){if("string"==typeof e&&e){if(1<arguments.length){var t=arguments[1];"object"==typeof t&&t.hasOwnProperty("crossOrigin")?console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",i(t)):console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",i(t))}}else console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e));"string"==typeof e&&u.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&e?null==t||"object"!=typeof t?console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",i(t)):"style"!==t.as&&"script"!==t.as&&console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',i(t.as)):console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=o(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,s="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?u.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:s}):"script"===n&&u.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:s,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){var n="";"string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"script"!==t.as&&(n+=" The `as` option encountered was "+i(t.as)+"."),n?console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",n):"script"===(n=t&&"string"==typeof t.as?t.as:"script")||(n=i(n),console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',n,e)),"string"==typeof e&&("object"==typeof t&&null!==t?null!=t.as&&"script"!==t.as||(n=o(t.as,t.crossOrigin),u.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})):null==t&&u.d.M(e))},t.preload=function(e,t){var n="";if("string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),null==t||"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":"string"==typeof t.as&&t.as||(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',n),"string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var r=o(n=t.as,t.crossOrigin);u.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){var n="";"string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"string"!=typeof t.as&&(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',n),"string"==typeof e&&(t?(n=o(t.as,t.crossOrigin),u.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})):u.d.m(e))},t.requestFormReset=function(e){u.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return l().useFormState(e,t,n)},t.useFormStatus=function(){return l().useHostTransitionStatus()},t.version="19.0.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react-dom/client.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom-client.development.js")},"./node_modules/react-dom/index.js":(e,t,n)=>{e.exports=n("./node_modules/react-dom/cjs/react-dom.development.js")},"./node_modules/react-router-dom/dist/index.js":(e,t,n)=>{var r,o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,l=Object.prototype.hasOwnProperty,s=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of i(t))l.call(e,s)||s===n||o(e,s,{get:()=>t[s],enumerable:!(r=a(t,s))||r.enumerable});return e},u={};((e,t)=>{for(var n in t)o(e,n,{get:t[n],enumerable:!0})})(u,{HydratedRouter:()=>c.HydratedRouter,RouterProvider:()=>c.RouterProvider}),e.exports=(r=u,s(o({},"__esModule",{value:!0}),r));var c=n("./node_modules/react-router/dist/development/dom-export.js");((e,t,n)=>{s(e,t,"default"),n&&s(n,t,"default")})(u,n("./node_modules/react-router/dist/development/index.js"),e.exports)},"./node_modules/react-router/dist/development/dom-export.js":(e,t,n)=>{var r,o=Object.create,a=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,s=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))u.call(e,o)||o===n||a(e,o,{get:()=>t[o],enumerable:!(r=i(t,o))||r.enumerable});return e},d=(e,t,n)=>(n=null!=e?o(s(e)):{},c(!t&&e&&e.__esModule?n:a(n,"default",{value:e,enumerable:!0}),e)),f={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(f,{HydratedRouter:()=>gn,RouterProvider:()=>fn}),e.exports=(r=f,c(a({},"__esModule",{value:!0}),r));var p=d(n("./node_modules/react/index.js")),h=d(n("./node_modules/react-dom/index.js")),m="popstate";function y(e={}){return function(e,t,n,r={}){let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l="POP",s=null,u=c();function c(){return(i.state||{idx:null}).idx}function d(){l="POP";let e=c(),t=null==e?null:e-u;u=e,s&&s({action:l,location:p.location,delta:t})}function f(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:S(e);return n=n.replace(/ $/,"%20"),g(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==u&&(u=0,i.replaceState({...i.state,idx:u},""));let p={get action(){return l},get location(){return e(o,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return o.addEventListener(m,d),s=e,()=>{o.removeEventListener(m,d),s=null}},createHref:e=>t(o,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l="PUSH";let r=w(p.location,e,t);n&&n(r,e),u=c()+1;let d=b(r,u),f=p.createHref(r);try{i.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(f)}a&&s&&s({action:l,location:p.location,delta:1})},replace:function(e,t){l="REPLACE";let r=w(p.location,e,t);n&&n(r,e),u=c();let o=b(r,u),d=p.createHref(r);i.replaceState(o,"",d),a&&s&&s({action:l,location:p.location,delta:0})},go:e=>i.go(e)};return p}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return w("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:S(t)}),null,e)}function g(e,t){if(!1===e||null==e)throw new Error(t)}function v(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function b(e,t){return{usr:e.state,key:e.key,idx:t}}function w(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?k(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function S({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function k(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}var E=new Set(["lazy","caseSensitive","path","id","index","children"]);function x(e,t,n=[],r={}){return e.map(((e,o)=>{let a=[...n,String(o)],i="string"==typeof e.id?e.id:a.join("-");if(g(!0!==e.index||!e.children,"Cannot specify children on an index route"),g(!r[i],`Found a route id collision on id "${i}".  Route id's must be globally unique within Data Router usages`),function(e){return!0===e.index}(e)){let n={...e,...t(e),id:i};return r[i]=n,n}{let n={...e,...t(e),id:i,children:void 0};return r[i]=n,e.children&&(n.children=x(e.children,t,a,r)),n}}))}function R(e,t,n="/"){return C(e,t,n,!1)}function C(e,t,n,r){let o=U(("string"==typeof t?k(t):t).pathname||"/",n);if(null==o)return null;let a=T(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let t=z(o);i=F(a[e],t,r)}return i}function T(e,t=[],n=[],r=""){let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(g(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let l=B([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(g(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${l}".`),T(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:I(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of _(e.path))o(e,t,n);else o(e,t)})),t}function _(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=_(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var P=/^:[\w-]+$/,L=3,O=2,D=1,A=10,M=-2,N=e=>"*"===e;function I(e,t){let n=e.split("/"),r=n.length;return n.some(N)&&(r+=M),t&&(r+=O),n.filter((e=>!N(e))).reduce(((e,t)=>e+(P.test(t)?L:""===t?D:A)),r)}function F(e,t,n=!1){let{routesMeta:r}=e,o={},a="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===a?t:t.slice(a.length)||"/",c=j({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&n&&!r[r.length-1].route.index&&(c=j({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(o,c.params),i.push({params:o,pathname:B([a,c.pathname]),pathnameBase:W(B([a,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(a=B([a,c.pathnameBase]))}return i}function j(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){v("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=l[r]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[t]=n&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function z(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return v(!1,`The URL path "${e}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function U(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function H(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function $(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}var B=e=>e.join("/").replace(/\/\/+/g,"/"),W=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),V=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",Y=class{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}};var Q=(e,t=302)=>{let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,{...n,headers:r})},G=class{constructor(e,t,n,r=!1){this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}};function J(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var X=["POST","PUT","PATCH","DELETE"],K=new Set(X),Z=["GET",...X],ee=new Set(Z),te=new Set([301,302,303,307,308]),ne=new Set([307,308]),re={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},oe={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ae={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ie=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,le=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),se="remix-router-transitions",ue=Symbol("ResetLoaderData");function ce(e,t,n,r,o,a){let i,l;if(o){i=[];for(let e of t)if(i.push(e),e.route.id===o){l=e;break}}else i=t,l=t[t.length-1];let s=function(e,t,n,r=!1){let o;"string"==typeof e?o=k(e):(o={...e},g(!o.pathname||!o.pathname.includes("?"),H("?","pathname","search",o)),g(!o.pathname||!o.pathname.includes("#"),H("#","pathname","hash",o)),g(!o.search||!o.search.includes("#"),H("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let s=function(e,t="/"){let{pathname:n,search:r="",hash:o=""}="string"==typeof e?k(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:V(r),hash:q(o)}}(o,a),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}(r||".",function(e){let t=$(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}(i),U(e.pathname,n)||e.pathname,"path"===a);if(null==r&&(s.search=e.search,s.hash=e.hash),(null==r||""===r||"."===r)&&l){let e=Ue(s.search);if(l.route.index&&!e)s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index";else if(!l.route.index&&e){let e=new URLSearchParams(s.search),t=e.getAll("index");e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();s.search=n?`?${n}`:""}}return"/"!==n&&(s.pathname="/"===s.pathname?n:B([n,s.pathname])),S(s)}function de(e,t,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:t};if(n.formMethod&&(r=n.formMethod,!ee.has(r.toUpperCase())))return{path:t,error:Oe(405,{method:n.formMethod})};var r;let o,a,i=()=>({path:t,error:Oe(400,{type:"invalid-body"})}),l=(n.formMethod||"get").toUpperCase(),s=Ae(t);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!ze(l))return i();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,[t,n])=>`${e}${t}=${n}\n`),""):String(n.body);return{path:t,submission:{formMethod:l,formAction:s,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!ze(l))return i();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:t,submission:{formMethod:l,formAction:s,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(g("function"==typeof FormData,"FormData is not available in this environment"),n.formData)o=xe(n.formData),a=n.formData;else if(n.body instanceof FormData)o=xe(n.body),a=n.body;else if(n.body instanceof URLSearchParams)o=n.body,a=Re(o);else if(null==n.body)o=new URLSearchParams,a=new FormData;else try{o=new URLSearchParams(n.body),a=Re(o)}catch(e){return i()}let u={formMethod:l,formAction:s,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:a,json:void 0,text:void 0};if(ze(u.formMethod))return{path:t,submission:u};let c=k(t);return e&&c.search&&Ue(c.search)&&o.append("index",""),c.search=`?${o}`,{path:S(c),submission:u}}function fe(e,t,n=!1){let r=e.findIndex((e=>e.route.id===t));return r>=0?e.slice(0,n?r+1:r):e}function pe(e,t,n,r,o,a,i,l,s,u,c,d,f,p){let h=p?Ne(p[1])?p[1].error:p[1].data:void 0,m=e.createURL(t.location),y=e.createURL(o),g=n;a&&t.errors?g=fe(n,Object.keys(t.errors)[0],!0):p&&Ne(p[1])&&(g=fe(n,p[0]));let v=p?p[1].statusCode:void 0,b=v&&v>=400,w=g.filter(((e,n)=>{let{route:o}=e;if(o.lazy)return!0;if(null==o.loader)return!1;if(a)return he(o,t.loaderData,t.errors);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=!e.hasOwnProperty(n.route.id);return r||o}(t.loaderData,t.matches[n],e))return!0;let l=t.matches[n],s=e;return ye(e,{currentUrl:m,currentParams:l.params,nextUrl:y,nextParams:s.params,...r,actionResult:h,actionStatus:v,defaultShouldRevalidate:!b&&(i||m.pathname+m.search===y.pathname+y.search||m.search!==y.search||me(l,s))})})),S=[];return u.forEach(((e,o)=>{if(a||!n.some((t=>t.route.id===e.routeId))||s.has(o))return;let u=R(d,e.path,f);if(!u)return void S.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let p=t.fetchers.get(o),g=He(u,e.path),w=!1;c.has(o)?w=!1:l.has(o)?(l.delete(o),w=!0):w=p&&"idle"!==p.state&&void 0===p.data?i:ye(g,{currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params,...r,actionResult:h,actionStatus:v,defaultShouldRevalidate:!b&&i}),w&&S.push({key:o,routeId:e.routeId,path:e.path,matches:u,match:g,controller:new AbortController})})),[w,S]}function he(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let r=null!=t&&void 0!==t[e.id],o=null!=n&&void 0!==n[e.id];return!(!r&&o)&&("function"==typeof e.loader&&!0===e.loader.hydrate||!r&&!o)}function me(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ye(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}function ge(e,t,n,r,o){let a;if(e){let t=r[e];g(t,`No route found to patch children into: routeId = ${e}`),t.children||(t.children=[]),a=t.children}else a=n;let i=x(t.filter((e=>!a.some((t=>ve(e,t))))),o,[e||"_","patch",String(a?.length||"0")],r);a.push(...i)}function ve(e,t){return"id"in e&&"id"in t&&e.id===t.id||e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive&&(!(e.children&&0!==e.children.length||t.children&&0!==t.children.length)||e.children.every(((e,n)=>t.children?.some((t=>ve(e,t))))))}async function be({matches:e}){let t=e.filter((e=>e.shouldLoad));return(await Promise.all(t.map((e=>e.resolve())))).reduce(((e,n,r)=>Object.assign(e,{[t[r].route.id]:n})),{})}async function we(e){let{result:t,type:n}=e;if(je(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:"error",error:e}}return"error"===n?{type:"error",error:new G(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:"data",data:e,statusCode:t.status,headers:t.headers}}return"error"===n?Fe(t)?t.data instanceof Error?{type:"error",error:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"error",error:new G(t.init?.status||500,void 0,t.data),statusCode:J(t)?t.status:void 0,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"error",error:t,statusCode:J(t)?t.status:void 0}:Fe(t)?{type:"data",data:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"data",data:t}}function Se(e,t,n,r,o){let a=e.headers.get("Location");if(g(a,"Redirects returned/thrown from loaders/actions must have a Location header"),!ie.test(a)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);a=ce(new URL(t.url),i,o,a),e.headers.set("Location",a)}return e}function ke(e,t,n){if(ie.test(e)){let r=e,o=r.startsWith("//")?new URL(t.protocol+r):new URL(r),a=null!=U(o.pathname,n);if(o.origin===t.origin&&a)return o.pathname+o.search+o.hash}return e}function Ee(e,t,n,r){let o=e.createURL(Ae(t)).toString(),a={signal:n};if(r&&ze(r.formMethod)){let{formMethod:e,formEncType:t}=r;a.method=e.toUpperCase(),"application/json"===t?(a.headers=new Headers({"Content-Type":t}),a.body=JSON.stringify(r.json)):"text/plain"===t?a.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?a.body=xe(r.formData):a.body=r.formData}return new Request(o,a)}function xe(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function Re(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Ce(e,t,n,r,o,a){let{loaderData:i,errors:l}=function(e,t,n,r=!1,o=!1){let a,i={},l=null,s=!1,u={},c=n&&Ne(n[1])?n[1].error:void 0;return e.forEach((n=>{if(!(n.route.id in t))return;let d=n.route.id,f=t[d];if(g(!Ie(f),"Cannot handle redirect results in processLoaderData"),Ne(f)){let t=f.error;if(void 0!==c&&(t=c,c=void 0),l=l||{},o)l[d]=t;else{let n=Pe(e,d);null==l[n.route.id]&&(l[n.route.id]=t)}r||(i[d]=ue),s||(s=!0,a=J(f.error)?f.error.status:500),f.headers&&(u[d]=f.headers)}else i[d]=f.data,f.statusCode&&200!==f.statusCode&&!s&&(a=f.statusCode),f.headers&&(u[d]=f.headers)})),void 0!==c&&n&&(l={[n[0]]:c},i[n[0]]=void 0),{loaderData:i,errors:l,statusCode:a||200,loaderHeaders:u}}(t,n,r);return o.forEach((t=>{let{key:n,match:r,controller:o}=t,i=a[n];if(g(i,"Did not find corresponding fetcher result"),!o||!o.signal.aborted)if(Ne(i)){let t=Pe(e.matches,r?.route.id);l&&l[t.route.id]||(l={...l,[t.route.id]:i.error}),e.fetchers.delete(n)}else if(Ie(i))g(!1,"Unhandled fetcher revalidation redirect");else{let t=Ve(i.data);e.fetchers.set(n,t)}})),{loaderData:i,errors:l}}function Te(e,t,n,r){let o=Object.entries(t).filter((([,e])=>e!==ue)).reduce(((e,[t,n])=>(e[t]=n,e)),{});for(let a of n){let n=a.route.id;if(!t.hasOwnProperty(n)&&e.hasOwnProperty(n)&&a.route.loader&&(o[n]=e[n]),r&&r.hasOwnProperty(n))break}return o}function _e(e){return e?Ne(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function Pe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Le(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Oe(e,{pathname:t,routeId:n,method:r,type:o,message:a}={}){let i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",r&&t&&n?l=`You made a ${r} request to "${t}" but did not provide a \`loader\` for route "${n}", so there is no way to handle the request.`:"invalid-body"===o&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l=`Route "${n}" does not match URL "${t}"`):404===e?(i="Not Found",l=`No route matches URL "${t}"`):405===e&&(i="Method Not Allowed",r&&t&&n?l=`You made a ${r.toUpperCase()} request to "${t}" but did not provide an \`action\` for route "${n}", so there is no way to handle the request.`:r&&(l=`Invalid request method "${r.toUpperCase()}"`)),new G(e||500,i,new Error(l),!0)}function De(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[n,r]=t[e];if(Ie(r))return{key:n,result:r}}}function Ae(e){return S({..."string"==typeof e?k(e):e,hash:""})}function Me(e){return je(e.result)&&te.has(e.result.status)}function Ne(e){return"error"===e.type}function Ie(e){return"redirect"===(e&&e.type)}function Fe(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function je(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function ze(e){return K.has(e.toUpperCase())}function Ue(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function He(e,t){let n="string"==typeof t?k(t).search:t.search;if(e[e.length-1].route.index&&Ue(n||""))return e[e.length-1];let r=$(e);return r[r.length-1]}function $e(e){let{formMethod:t,formAction:n,formEncType:r,text:o,formData:a,json:i}=e;if(t&&n&&r)return null!=o?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:o}:null!=a?{formMethod:t,formAction:n,formEncType:r,formData:a,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function Be(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function We(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Ve(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}var qe=d(n("./node_modules/react/index.js")),Ye=d(n("./node_modules/react/index.js")),Qe=Ye.createContext(null);Qe.displayName="DataRouter";var Ge=Ye.createContext(null);Ge.displayName="DataRouterState";var Je=Ye.createContext({isTransitioning:!1});Je.displayName="ViewTransition";var Xe=Ye.createContext(new Map);Xe.displayName="Fetchers",Ye.createContext(null).displayName="Await";var Ke=Ye.createContext(null);Ke.displayName="Navigation";var Ze=Ye.createContext(null);Ze.displayName="Location";var et=Ye.createContext({outlet:null,matches:[],isDataRoute:!1});et.displayName="Route";var tt=Ye.createContext(null);tt.displayName="RouteError";var nt=d(n("./node_modules/react/index.js"));function rt(){return null!=nt.useContext(Ze)}function ot(){let e=ut(),t=J(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:r},a={padding:"2px 4px",backgroundColor:r},i=null;return console.error("Error handled by React Router default ErrorBoundary:",e),i=nt.createElement(nt.Fragment,null,nt.createElement("p",null,"💿 Hey developer 👋"),nt.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",nt.createElement("code",{style:a},"ErrorBoundary")," or"," ",nt.createElement("code",{style:a},"errorElement")," prop on your route.")),nt.createElement(nt.Fragment,null,nt.createElement("h2",null,"Unexpected Application Error!"),nt.createElement("h3",{style:{fontStyle:"italic"}},t),n?nt.createElement("pre",{style:o},n):null,i)}nt.createContext(null);var at=nt.createElement(ot,null),it=class extends nt.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?nt.createElement(et.Provider,{value:this.props.routeContext},nt.createElement(tt.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function lt({routeContext:e,match:t,children:n}){let r=nt.useContext(Qe);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),nt.createElement(et.Provider,{value:e},n)}function st(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function ut(){let e=nt.useContext(tt),t=function(){let e=nt.useContext(Ge);return g(e,st("useRouteError")),e}(),n=function(e){let t=function(e){let t=nt.useContext(et);return g(t,st(e)),t}(e),n=t.matches[t.matches.length-1];return g(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}("useRouteError");return void 0!==e?e:t.errors?.[n]}var ct={};function dt(e,t,n){t||ct[e]||(ct[e]=!0,v(!1,n))}var ft={};function pt(e,t){e||ft[t]||(ft[t]=!0,console.warn(t))}var ht=!0;function mt(e){let t={hasErrorBoundary:e.hasErrorBoundary||null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&(ht&&e.element&&v(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(t,{element:qe.createElement(e.Component),Component:void 0})),e.HydrateFallback&&(ht&&e.hydrateFallbackElement&&v(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(t,{hydrateFallbackElement:qe.createElement(e.HydrateFallback),HydrateFallback:void 0})),e.ErrorBoundary&&(ht&&e.errorElement&&v(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(t,{errorElement:qe.createElement(e.ErrorBoundary),ErrorBoundary:void 0})),t}var yt=class{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}};function gt({router:e,flushSync:t}){let[n,r]=qe.useState(e.state),[o,a]=qe.useState(),[i,l]=qe.useState({isTransitioning:!1}),[s,u]=qe.useState(),[c,d]=qe.useState(),[f,p]=qe.useState(),h=qe.useRef(new Map),m=qe.useCallback(((n,{deletedFetchers:o,flushSync:i,viewTransitionOpts:f})=>{n.fetchers.forEach(((e,t)=>{void 0!==e.data&&h.current.set(t,e.data)})),o.forEach((e=>h.current.delete(e))),pt(!1===i||null!=t,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let m=null!=e.window&&null!=e.window.document&&"function"==typeof e.window.document.startViewTransition;if(pt(null==f||m,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),f&&m){if(t&&i){t((()=>{c&&(s&&s.resolve(),c.skipTransition()),l({isTransitioning:!0,flushSync:!0,currentLocation:f.currentLocation,nextLocation:f.nextLocation})}));let o=e.window.document.startViewTransition((()=>{t((()=>r(n)))}));return o.finished.finally((()=>{t((()=>{u(void 0),d(void 0),a(void 0),l({isTransitioning:!1})}))})),void t((()=>d(o)))}c?(s&&s.resolve(),c.skipTransition(),p({state:n,currentLocation:f.currentLocation,nextLocation:f.nextLocation})):(a(n),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}))}else t&&i?t((()=>r(n))):qe.startTransition((()=>r(n)))}),[e.window,t,c,s]);qe.useLayoutEffect((()=>e.subscribe(m)),[e,m]),qe.useEffect((()=>{i.isTransitioning&&!i.flushSync&&u(new yt)}),[i]),qe.useEffect((()=>{if(s&&o&&e.window){let t=o,n=s.promise,i=e.window.document.startViewTransition((async()=>{qe.startTransition((()=>r(t))),await n}));i.finished.finally((()=>{u(void 0),d(void 0),a(void 0),l({isTransitioning:!1})})),d(i)}}),[o,s,e.window]),qe.useEffect((()=>{s&&o&&n.location.key===o.location.key&&s.resolve()}),[s,c,n.location,o]),qe.useEffect((()=>{!i.isTransitioning&&f&&(a(f.state),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}),p(void 0))}),[i.isTransitioning,f]);let y=qe.useMemo((()=>({createHref:e.createHref,encodeLocation:e.encodeLocation,go:t=>e.navigate(t),push:(t,n,r)=>e.navigate(t,{state:n,preventScrollReset:r?.preventScrollReset}),replace:(t,n,r)=>e.navigate(t,{replace:!0,state:n,preventScrollReset:r?.preventScrollReset})})),[e]),g=e.basename||"/",v=qe.useMemo((()=>({router:e,navigator:y,static:!1,basename:g})),[e,y,g]);return qe.createElement(qe.Fragment,null,qe.createElement(Qe.Provider,{value:v},qe.createElement(Ge.Provider,{value:n},qe.createElement(Xe.Provider,{value:h.current},qe.createElement(Je.Provider,{value:i},qe.createElement(bt,{basename:g,location:n.location,navigationType:n.historyAction,navigator:y},qe.createElement(vt,{routes:e.routes,future:e.future,state:n})))))),null)}var vt=qe.memo((function({routes:e,future:t,state:n}){return function(e,t,n){g(rt(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:r,static:o}=nt.useContext(Ke),{matches:a}=nt.useContext(et),i=a[a.length-1],l=i?i.params:{},s=i?i.pathname:"/",u=i?i.pathnameBase:"/",c=i&&i.route;{let e=c&&c.path||"";dt(s,!c||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${s}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let d,f=(g(rt(),"useLocation() may be used only in the context of a <Router> component."),nt.useContext(Ze).location);if(t){let e="string"==typeof t?k(t):t;g("/"===u||e.pathname?.startsWith(u),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${u}" but pathname "${e.pathname}" was given in the \`location\` prop.`),d=e}else d=f;let p=d.pathname||"/",h=p;if("/"!==u){let e=u.replace(/^\//,"").split("/");h="/"+p.replace(/^\//,"").split("/").slice(e.length).join("/")}let m=!o&&n&&n.matches&&n.matches.length>0?n.matches:R(e,{pathname:h});v(c||null!=m,`No routes matched location "${d.pathname}${d.search}${d.hash}" `),v(null==m||void 0!==m[m.length-1].route.element||void 0!==m[m.length-1].route.Component||void 0!==m[m.length-1].route.lazy,`Matched leaf route at location "${d.pathname}${d.search}${d.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`);let y=function(e,t=[],n=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let r=e,o=n?.errors;if(null!=o){let e=r.findIndex((e=>e.route.id&&void 0!==o?.[e.route.id]));g(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(o).join(",")}`),r=r.slice(0,Math.min(r.length,e+1))}let a=!1,i=-1;if(n)for(let e=0;e<r.length;e++){let t=r[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(i=e),t.route.id){let{loaderData:e,errors:o}=n,l=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!o||void 0===o[t.route.id]);if(t.route.lazy||l){a=!0,r=i>=0?r.slice(0,i+1):[r[0]];break}}}return r.reduceRight(((e,l,s)=>{let u,c=!1,d=null,f=null;n&&(u=o&&l.route.id?o[l.route.id]:void 0,d=l.route.errorElement||at,a&&(i<0&&0===s?(dt("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),c=!0,f=null):i===s&&(c=!0,f=l.route.hydrateFallbackElement||null)));let p=t.concat(r.slice(0,s+1)),h=()=>{let t;return t=u?d:c?f:l.route.Component?nt.createElement(l.route.Component,null):l.route.element?l.route.element:e,nt.createElement(lt,{match:l,routeContext:{outlet:e,matches:p,isDataRoute:null!=n},children:t})};return n&&(l.route.ErrorBoundary||l.route.errorElement||0===s)?nt.createElement(it,{location:n.location,revalidation:n.revalidation,component:d,error:u,children:h(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):h()}),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:B([u,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:B([u,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,n);return t&&y?nt.createElement(Ze.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...d},navigationType:"POP"}},y):y}(e,void 0,n)}));function bt({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:o,static:a=!1}){g(!rt(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),l=qe.useMemo((()=>({basename:i,navigator:o,static:a,future:{}})),[i,o,a]);"string"==typeof n&&(n=k(n));let{pathname:s="/",search:u="",hash:c="",state:d=null,key:f="default"}=n,p=qe.useMemo((()=>{let e=U(s,i);return null==e?null:{location:{pathname:e,search:u,hash:c,state:d,key:f},navigationType:r}}),[i,s,u,c,d,f,r]);return v(null!=p,`<Router basename="${i}"> is not able to match the URL "${s}${u}${c}" because it does not start with the basename, so the <Router> won't render anything.`),null==p?null:qe.createElement(Ke.Provider,{value:l},qe.createElement(Ze.Provider,{children:t,value:p}))}var wt,St=d(n("./node_modules/react/index.js"));function kt(e,t){if(!1===e||null==e)throw new Error(t)}async function Et(e,t){if(!e.css&&!t.links||!function(){if(void 0!==wt)return wt;let e=document.createElement("link");return wt=e.relList.supports("preload"),e=null,wt}())return;let n=[];if(e.css&&n.push(...e.css.map((e=>({rel:"stylesheet",href:e})))),t.links&&n.push(...t.links()),0===n.length)return;let r=[];for(let e of n)null!=(o=e)&&"string"==typeof o.page||"stylesheet"!==e.rel||r.push({...e,rel:"preload",as:"style"});var o;let a=r.filter((e=>(!e.media||window.matchMedia(e.media).matches)&&!document.querySelector(`link[rel="stylesheet"][href="${e.href}"]`)));await Promise.all(a.map(xt))}async function xt(e){return new Promise((t=>{let n=document.createElement("link");function r(){document.head.contains(n)&&document.head.removeChild(n)}Object.assign(n,e),n.onload=()=>{r(),t()},n.onerror=()=>{r(),t()},document.head.appendChild(n)}))}function Rt(e){return{__html:e}}d(n("./node_modules/react/index.js"));var Ct=n("./node_modules/turbo-stream/dist/turbo-stream.js");async function Tt(e){let t={signal:e.signal};if("GET"!==e.method){t.method=e.method;let n=e.headers.get("Content-Type");n&&/\bapplication\/json\b/.test(n)?(t.headers={"Content-Type":n},t.body=JSON.stringify(await e.json())):n&&/\btext\/plain\b/.test(n)?(t.headers={"Content-Type":n},t.body=await e.text()):n&&/\bapplication\/x-www-form-urlencoded\b/.test(n)?t.body=new URLSearchParams(await e.text()):t.body=await e.formData()}return t}var _t=Symbol("SingleFetchRedirect");function Pt(e,t,n,r){return e((async()=>{let e=new URL(t);e.searchParams.set("_routes",r);let{data:o}=await Dt(e,n);return Mt(o,r)}))}function Lt(e){let t=e.searchParams.getAll("index");e.searchParams.delete("index");let n=[];for(let e of t)e&&n.push(e);for(let t of n)e.searchParams.append("index",t);return e}function Ot(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}async function Dt(e,t){let n=await fetch(e,t);if(404===n.status&&!n.headers.has("X-Remix-Response"))throw new G(404,"Not Found",!0);if(new Set([100,101,204,205]).has(n.status))return t.method&&"GET"!==t.method?{status:n.status,data:{data:void 0}}:{status:n.status,data:{}};kt(n.body,"No response body to decode");try{let e=await At(n.body,window);return{status:n.status,data:e.value}}catch(e){throw new Error("Unable to decode turbo-stream response")}}function At(e,t){return(0,Ct.decode)(e,{plugins:[(e,...n)=>{if("SanitizedError"===e){let[e,r,o]=n,a=Error;e&&e in t&&"function"==typeof t[e]&&(a=t[e]);let i=new a(r);return i.stack=o,{value:i}}if("ErrorResponse"===e){let[e,t,r]=n;return{value:new G(t,r,e)}}return"SingleFetchRedirect"===e?{value:{[_t]:n[0]}}:"SingleFetchClassInstance"===e?{value:n[0]}:"SingleFetchFallback"===e?{value:void 0}:void 0}]})}function Mt(e,t){let n=e[_t];return n?Nt(n,t):void 0!==e[t]?Nt(e[t],t):null}function Nt(e,t){if("error"in e)throw e.error;if("redirect"in e){let t={};throw e.revalidate&&(t["X-Remix-Revalidate"]="yes"),e.reload&&(t["X-Remix-Reload-Document"]="yes"),e.replace&&(t["X-Remix-Replace"]="yes"),Q(e.redirect,{status:e.status,headers:t})}if("data"in e)return e.data;throw new Error(`No response found for routeId "${t}"`)}function It(){let e,t,n=new Promise(((r,o)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{o(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}var Ft=d(n("./node_modules/react/index.js")),jt=d(n("./node_modules/react/index.js")),zt=d(n("./node_modules/react/index.js")),Ut=class extends zt.Component{constructor(e){super(e),this.state={error:e.error||null,location:e.location}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error||null,location:e.location}:{error:e.error||t.error,location:t.location}}render(){return this.state.error?zt.createElement(Ht,{error:this.state.error,isOutsideRemixApp:!0}):this.props.children}};function Ht({error:e,isOutsideRemixApp:t}){console.error(e);let n,r=zt.createElement("script",{dangerouslySetInnerHTML:{__html:'\n        console.log(\n          "💿 Hey developer 👋. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."\n        );\n      '}});if(J(e))return zt.createElement($t,{title:"Unhandled Thrown Response!"},zt.createElement("h1",{style:{fontSize:"24px"}},e.status," ",e.statusText),r);if(e instanceof Error)n=e;else{let t=null==e?"Unknown Error":"object"==typeof e&&"toString"in e?e.toString():JSON.stringify(e);n=new Error(t)}return zt.createElement($t,{title:"Application Error!",isOutsideRemixApp:t},zt.createElement("h1",{style:{fontSize:"24px"}},"Application Error"),zt.createElement("pre",{style:{padding:"2rem",background:"hsla(10, 50%, 50%, 0.1)",color:"red",overflow:"auto"}},n.stack),r)}function $t({title:e,renderScripts:t,isOutsideRemixApp:n,children:r}){let{routeModules:o}=un();return o.root?.Layout&&!n?r:zt.createElement("html",{lang:"en"},zt.createElement("head",null,zt.createElement("meta",{charSet:"utf-8"}),zt.createElement("meta",{name:"viewport",content:"width=device-width,initial-scale=1,viewport-fit=cover"}),zt.createElement("title",null,e)),zt.createElement("body",null,zt.createElement("main",{style:{fontFamily:"system-ui, sans-serif",padding:"2rem"}},r,t?zt.createElement(dn,null):null)))}var Bt=d(n("./node_modules/react/index.js"));function Wt(){return Bt.createElement($t,{title:"Loading...",renderScripts:!0},Bt.createElement("script",{dangerouslySetInnerHTML:{__html:'\n              console.log(\n                "💿 Hey developer 👋. You can provide a way better UX than this " +\n                "when your app is loading JS modules and/or running `clientLoader` " +\n                "functions. Check out https://remix.run/route/hydrate-fallback " +\n                "for more information."\n              );\n            '}}))}function Vt(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function qt(e,t,n){let r=Kt(t),o=!t.HydrateFallback||n&&"root"!==e.id?"root"===e.id?Wt:void 0:t.HydrateFallback,a=t.ErrorBoundary?t.ErrorBoundary:"root"===e.id?()=>jt.createElement(Ht,{error:ut()}):void 0;return"root"===e.id&&t.Layout?{...r?{element:jt.createElement(t.Layout,null,jt.createElement(r,null))}:{Component:r},...a?{errorElement:jt.createElement(t.Layout,null,jt.createElement(a,null))}:{ErrorBoundary:a},...o?{hydrateFallbackElement:jt.createElement(t.Layout,null,jt.createElement(o,null))}:{HydrateFallback:o}}:{Component:r,ErrorBoundary:a,HydrateFallback:o}}function Yt(e,t,n,r,o,a){return Jt(t,n,r,a,"",Vt(t),e)}function Qt(e,t,n){if(n){let n=`You cannot call ${"action"===e?"serverAction()":"serverLoader()"} in SPA Mode (routeId: "${t.id}")`;throw console.error(n),new G(400,"Bad Request",new Error(n),!0)}let r=`You are trying to call ${"action"===e?"serverAction()":"serverLoader()"} on a route that does not have a server ${e} (routeId: "${t.id}")`;if("loader"===e&&!t.hasLoader||"action"===e&&!t.hasAction)throw console.error(r),new G(400,"Bad Request",new Error(r),!0)}function Gt(e,t){let n="clientAction"===e?"a":"an",r=`Route "${t}" does not have ${n} ${e}, but you are trying to submit to it. To fix this, please add ${n} \`${e}\` function to the route`;throw console.error(r),new G(405,"Method Not Allowed",new Error(r),!0)}function Jt(e,t,n,r,o="",a=Vt(e),i){return(a[o]||[]).map((o=>{let l=t[o.id];function s(e){return kt("function"==typeof e,"No single fetch function available for route handler"),e()}function u(e){return o.hasLoader?s(e):Promise.resolve(null)}function c(e){if(!o.hasAction)throw Gt("action",o.id);return s(e)}async function d(e){let n=t[o.id],r=n?Et(o,n):Promise.resolve();try{return e()}finally{await r}}let f={id:o.id,index:o.index,path:o.path};if(l){Object.assign(f,{...f,...qt(o,l,r),handle:l.handle,shouldRevalidate:Xt(l,o.id,i)});let e=n&&n.loaderData&&o.id in n.loaderData,t=e?n?.loaderData?.[o.id]:void 0,a=n&&n.errors&&o.id in n.errors,s=a?n?.errors?.[o.id]:void 0,p=null==i&&(!0===l.clientLoader?.hydrate||!o.hasLoader);f.loader=async({request:n,params:i},c)=>{try{return await d((async()=>(kt(l,"No `routeModule` available for critical-route loader"),l.clientLoader?l.clientLoader({request:n,params:i,async serverLoader(){if(Qt("loader",o,r),p){if(e)return t;if(a)throw s}return u(c)}}):r?null:u(c))))}finally{p=!1}},f.loader.hydrate=Zt(o,l,r),f.action=({request:e,params:t},n)=>d((async()=>{if(kt(l,"No `routeModule` available for critical-route action"),!l.clientAction){if(r)throw Gt("clientAction",o.id);return c(n)}return l.clientAction({request:e,params:t,serverAction:async()=>(Qt("action",o,r),c(n))})}))}else o.hasClientLoader||(f.loader=({request:e},t)=>d((()=>r?Promise.resolve(null):u(t)))),o.hasClientAction||(f.action=({request:e},t)=>d((()=>{if(r)throw Gt("clientAction",o.id);return c(t)}))),f.lazy=async()=>{let e=await async function(e,t){let n=await async function(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}(e,t);return await Et(e,n),{Component:Kt(n),ErrorBoundary:n.ErrorBoundary,clientAction:n.clientAction,clientLoader:n.clientLoader,handle:n.handle,links:n.links,meta:n.meta,shouldRevalidate:n.shouldRevalidate}}(o,t),n={...e};if(e.clientLoader){let t=e.clientLoader;n.loader=(e,n)=>t({...e,serverLoader:async()=>(Qt("loader",o,r),u(n))})}if(e.clientAction){let t=e.clientAction;n.action=(e,n)=>t({...e,serverAction:async()=>(Qt("action",o,r),c(n))})}return{...n.loader?{loader:n.loader}:{},...n.action?{action:n.action}:{},hasErrorBoundary:n.hasErrorBoundary,shouldRevalidate:Xt(n,o.id,i),handle:n.handle,Component:n.Component,ErrorBoundary:n.ErrorBoundary}};let p=Jt(e,t,n,r,o.id,a,i);return p.length>0&&(f.children=p),f}))}function Xt(e,t,n){if(n)return function(e,t,n){let r=!1;return o=>r?t?t(o):o.defaultShouldRevalidate:(r=!0,n.has(e))}(t,e.shouldRevalidate,n);if(e.shouldRevalidate){let t=e.shouldRevalidate;return e=>t({...e,defaultShouldRevalidate:!0})}return e.shouldRevalidate}function Kt(e){if(null!=e.default)return"object"==typeof e.default&&0===Object.keys(e.default).length?void 0:e.default}function Zt(e,t,n){return n&&"root"!==e.id||null!=t.clientLoader&&(!0===t.clientLoader.hydrate||!0!==e.hasLoader)}var en=new Set,tn=1e3,nn=new Set,rn=7680;function on(e){return!e}function an(e,t,n,r){if(on(n))return async({path:o,patch:a})=>{nn.has(o)||await ln([o],e,t,n,r,a)}}async function ln(e,t,n,r,o,a){let i=`${null!=o?o:"/"}/__manifest`.replace(/\/+/g,"/"),l=new URL(i,window.location.origin);if(e.sort().forEach((e=>l.searchParams.append("p",e))),l.searchParams.set("version",t.version),l.toString().length>rn)return void en.clear();let s=await fetch(l);if(!s.ok)throw new Error(`${s.status} ${s.statusText}`);if(s.status>=400)throw new Error(await s.text());let u=await s.json(),c=new Set(Object.keys(t.routes)),d=Object.values(u).reduce(((e,t)=>(t&&!c.has(t.id)&&(e[t.id]=t),e)),{});Object.assign(t.routes,d),e.forEach((e=>function(e,t){if(t.size>=tn){let e=t.values().next().value;t.delete(e)}t.add(e)}(e,nn)));let f=new Set;Object.values(d).forEach((e=>{!e||e.parentId&&d[e.parentId]||f.add(e.parentId)})),f.forEach((e=>a(e||null,Jt(d,n,null,r,e))))}var sn=St.createContext(void 0);function un(){let e=St.useContext(sn);return kt(e,"You must render this element inside a <HydratedRouter> element"),e}sn.displayName="FrameworkContext";var cn=!1;function dn(e){let{manifest:t,serverHandoffString:n,isSpaMode:r,renderMeta:o}=un(),{router:a,static:i,staticContext:l}=function(){let e=St.useContext(Qe);return kt(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}(),{matches:s}=function(){let e=St.useContext(Ge);return kt(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}(),u=on(r);o&&(o.didRenderScripts=!0);let c=function(e,t,n){return n&&!cn?[e[0]]:e}(s,0,r);St.useEffect((()=>{cn=!0}),[]);let d=St.useMemo((()=>{let r=l?`window.__reactRouterContext = ${n};window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());`:" ",o=i?`${t.hmr?.runtime?`import ${JSON.stringify(t.hmr.runtime)};`:""}${u?"":`import ${JSON.stringify(t.url)}`};\n${c.map(((e,n)=>`import * as route${n} from ${JSON.stringify(t.routes[e.route.id].module)};`)).join("\n")}\n  ${u?`window.__reactRouterManifest = ${JSON.stringify(function(e,t){let n=new Set(t.state.matches.map((e=>e.route.id))),r=t.state.location.pathname.split("/").filter(Boolean),o=["/"];for(r.pop();r.length>0;)o.push(`/${r.join("/")}`),r.pop();o.forEach((e=>{let r=R(t.routes,e,t.basename);r&&r.forEach((e=>n.add(e.route.id)))}));let a=[...n].reduce(((t,n)=>Object.assign(t,{[n]:e.routes[n]})),{});return{...e,routes:a}}(t,a),null,2)};`:""}\n  window.__reactRouterRouteModules = {${c.map(((e,t)=>`${JSON.stringify(e.route.id)}:route${t}`)).join(",")}};\n\nimport(${JSON.stringify(t.entry.module)});`:" ";return St.createElement(St.Fragment,null,St.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Rt(r),type:void 0}),St.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Rt(o),type:"module",async:!0}))}),[]),f=c.map((e=>{let n=t.routes[e.route.id];return n?(n.imports||[]).concat([n.module]):[]})).flat(1),p=cn?[]:t.entry.imports.concat(f);return cn?null:St.createElement(St.Fragment,null,u?null:St.createElement("link",{rel:"modulepreload",href:t.url,crossOrigin:e.crossOrigin}),St.createElement("link",{rel:"modulepreload",href:t.entry.module,crossOrigin:e.crossOrigin}),(h=p,[...new Set(h)]).map((t=>St.createElement("link",{key:t,rel:"modulepreload",href:t,crossOrigin:e.crossOrigin}))),d);var h}function fn(e){return p.createElement(gt,{flushSync:h.flushSync,...e})}var pn=d(n("./node_modules/react/index.js")),hn=null,mn=null;function yn(){if(!hn&&window.__reactRouterContext&&window.__reactRouterManifest&&window.__reactRouterRouteModules&&(hn={context:window.__reactRouterContext,manifest:window.__reactRouterManifest,routeModules:window.__reactRouterRouteModules,stateDecodingPromise:void 0,router:void 0,routerInitialized:!1}),!hn)throw new Error("You must be using the SSR features of React Router in order to skip passing a `router` prop to `<RouterProvider>`");let e=hn;if(!hn.stateDecodingPromise){let t=hn.context.stream;g(t,"No stream found for single fetch decoding"),hn.context.stream=void 0,hn.stateDecodingPromise=At(t,window).then((t=>{hn.context.state=t.value,e.stateDecodingPromise.value=!0})).catch((t=>{e.stateDecodingPromise.error=t}))}if(hn.stateDecodingPromise.error)throw hn.stateDecodingPromise.error;if(!hn.stateDecodingPromise.value)throw hn.stateDecodingPromise;let t,n=Jt(hn.manifest.routes,hn.routeModules,hn.context.state,hn.context.isSpaMode);if(!hn.context.isSpaMode){t={...hn.context.state,loaderData:{...hn.context.state.loaderData}};let e=R(n,window.location,window.__reactRouterContext?.basename);if(e)for(let n of e){let e=n.route.id,r=hn.routeModules[e],o=hn.manifest.routes[e];r&&o&&Zt(o,r,hn.context.isSpaMode)&&(r.HydrateFallback||!o.hasLoader)?delete t.loaderData[e]:o&&!o.hasLoader&&(t.loaderData[e]=null)}t&&t.errors&&(t.errors=function(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new G(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let o=new t(r.message);o.stack=r.stack,n[e]=o}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack=r.stack,n[e]=t}}else n[e]=r;return n}(t.errors))}let r=function(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement;g(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let r,o,a,i=e.mapRouteProperties||le,l={},s=x(e.routes,i,void 0,l),u=e.basename||"/",c=e.dataStrategy||be,d=e.patchRoutesOnNavigation,f={...e.future},p=null,h=new Set,m=null,y=null,b=null,S=null!=e.hydrationData,k=R(s,e.history.location,u),T=!1,_=null;if(null==k&&!d){let t=Oe(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Le(s);k=n,_={[r.id]:t}}if(k&&!e.hydrationData&&Ze(k,s,e.history.location.pathname).active&&(k=null),k)if(k.some((e=>e.route.lazy)))o=!1;else if(k.some((e=>e.route.loader))){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null;if(n){let e=k.findIndex((e=>void 0!==n[e.route.id]));o=k.slice(0,e+1).every((e=>!he(e.route,t,n)))}else o=k.every((e=>!he(e.route,t,n)))}else o=!0;else{o=!1,k=[];let t=Ze(null,s,e.history.location.pathname);t.active&&t.matches&&(T=!0,k=t.matches)}let P,L,O={historyAction:e.history.action,location:e.history.location,matches:k,initialized:o,navigation:re,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||_,fetchers:new Map,blockers:new Map},D="POP",A=!1,M=!1,N=new Map,I=null,F=!1,j=!1,z=new Set,H=new Map,$=0,B=-1,W=new Map,V=new Set,q=new Map,Y=new Map,Q=new Set,G=new Map,X=null;function K(e,t={}){O={...O,...e};let n=[],r=[];O.fetchers.forEach(((e,t)=>{"idle"===e.state&&(Q.has(t)?n.push(t):r.push(t))})),Q.forEach((e=>{O.fetchers.has(e)||H.has(e)||n.push(e)})),[...h].forEach((e=>e(O,{deletedFetchers:n,viewTransitionOpts:t.viewTransitionOpts,flushSync:!0===t.flushSync}))),n.forEach((e=>Ae(e))),r.forEach((e=>O.fetchers.delete(e)))}function Z(t,n,{flushSync:o}={}){let a,i=null!=O.actionData&&null!=O.navigation.formMethod&&ze(O.navigation.formMethod)&&"loading"===O.navigation.state&&!0!==t.state?._isRedirect;a=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:i?O.actionData:null;let l=n.loaderData?Te(O.loaderData,n.loaderData,n.matches||[],n.errors):O.loaderData,u=O.blockers;u.size>0&&(u=new Map(u),u.forEach(((e,t)=>u.set(t,ae))));let c,d=!0===A||null!=O.navigation.formMethod&&ze(O.navigation.formMethod)&&!0!==t.state?._isRedirect;if(r&&(s=r,r=void 0),F||"POP"===D||("PUSH"===D?e.history.push(t,t.state):"REPLACE"===D&&e.history.replace(t,t.state)),"POP"===D){let e=N.get(O.location.pathname);e&&e.has(t.pathname)?c={currentLocation:O.location,nextLocation:t}:N.has(t.pathname)&&(c={currentLocation:t,nextLocation:O.location})}else if(M){let e=N.get(O.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),N.set(O.location.pathname,e)),c={currentLocation:O.location,nextLocation:t}}K({...n,actionData:a,loaderData:l,historyAction:D,location:t,initialized:!0,navigation:re,revalidation:"idle",restoreScrollPosition:Ke(t,n.matches||O.matches),preventScrollReset:d,blockers:u},{viewTransitionOpts:c,flushSync:!0===o}),D="POP",A=!1,M=!1,F=!1,j=!1,X?.resolve(),X=null}async function ee(t,n,o){P&&P.abort(),P=null,D=t,F=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(m&&b){let n=Xe(e,t);m[n]=b()}}(O.location,O.matches),A=!0===(o&&o.preventScrollReset),M=!0===(o&&o.enableViewTransition);let a=r||s,i=o&&o.overrideNavigation,l=o?.initialHydration&&O.matches&&O.matches.length>0&&!T?O.matches:R(a,n,u),c=!0===(o&&o.flushSync);if(l&&O.initialized&&!j&&(f=n,(d=O.location).pathname===f.pathname&&d.search===f.search&&(""===d.hash?""!==f.hash:d.hash===f.hash||""!==f.hash))&&!(o&&o.submission&&ze(o.submission.formMethod)))return void Z(n,{matches:l},{flushSync:c});var d,f;let p=Ze(l,a,n.pathname);if(p.active&&p.matches&&(l=p.matches),!l){let{error:e,notFoundMatches:t,route:r}=Je(n.pathname);return void Z(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:c})}P=new AbortController;let h,y=Ee(e.history,n,P.signal,o&&o.submission);if(o&&o.pendingError)h=[Pe(l).route.id,{type:"error",error:o.pendingError}];else if(o&&o.submission&&ze(o.submission.formMethod)){let t=await async function(e,t,n,r,o,a={}){ye();let i,l=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(K({navigation:l},{flushSync:!0===a.flushSync}),o){let n=await et(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let e=Pe(n.partialMatches).route.id;return{matches:n.partialMatches,pendingActionResult:[e,{type:"error",error:n.error}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=Je(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:"error",error:n}]}}r=n.matches}let s=He(r,t);if(s.route.action||s.route.lazy){if(i=(await fe("action",0,e,[s],r,null))[s.route.id],e.signal.aborted)return{shortCircuited:!0}}else i={type:"error",error:Oe(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(Ie(i)){let t;return t=a&&null!=a.replace?a.replace:ke(i.response.headers.get("Location"),new URL(e.url),u)===O.location.pathname+O.location.search,await ue(e,i,!0,{submission:n,replace:t}),{shortCircuited:!0}}if(Ne(i)){let e=Pe(r,s.route.id);return!0!==(a&&a.replace)&&(D="PUSH"),{matches:r,pendingActionResult:[e.route.id,i]}}return{matches:r,pendingActionResult:[s.route.id,i]}}(y,n,o.submission,l,p.active,{replace:o.replace,flushSync:c});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Ne(r)&&J(r.error)&&404===r.error.status)return P=null,void Z(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,h=t.pendingActionResult,i=Be(n,o.submission),c=!1,p.active=!1,y=Ee(e.history,y.url,y.signal)}let{shortCircuited:g,matches:v,loaderData:w,errors:S}=await async function(t,n,o,a,i,l,c,d,f,p,h){let m=i||Be(n,l),y=l||c||$e(m),g=!F&&!f;if(a){if(g){let e=te(h);K({navigation:m,...void 0!==e?{actionData:e}:{}},{flushSync:p})}let e=await et(o,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let t=Pe(e.partialMatches).route.id;return{matches:e.partialMatches,loaderData:{},errors:{[t]:e.error}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=Je(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}o=e.matches}let v=r||s,[b,w]=pe(e.history,O,o,y,n,!0===f,j,z,Q,q,V,v,u,h);if(B=++$,0===b.length&&0===w.length){let e=Ue();return Z(n,{matches:o,loaderData:{},errors:h&&Ne(h[1])?{[h[0]]:h[1].error}:null,..._e(h),...e?{fetchers:new Map(O.fetchers)}:{}},{flushSync:p}),{shortCircuited:!0}}if(g){let e={};if(!a){e.navigation=m;let t=te(h);void 0!==t&&(e.actionData=t)}w.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=O.fetchers.get(e.key),n=We(void 0,t?t.data:void 0);O.fetchers.set(e.key,n)})),new Map(O.fetchers)}(w)),K(e,{flushSync:p})}w.forEach((e=>{Fe(e.key),e.controller&&H.set(e.key,e.controller)}));let S=()=>w.forEach((e=>Fe(e.key)));P&&P.signal.addEventListener("abort",S);let{loaderResults:k,fetcherResults:E}=await me(0,o,b,w,t);if(t.signal.aborted)return{shortCircuited:!0};P&&P.signal.removeEventListener("abort",S),w.forEach((e=>H.delete(e.key)));let x=De(k);if(x)return await ue(t,x.result,!0,{replace:d}),{shortCircuited:!0};if(x=De(E),x)return V.add(x.key),await ue(t,x.result,!0,{replace:d}),{shortCircuited:!0};let{loaderData:R,errors:C}=Ce(O,o,k,h,w,E);f&&O.errors&&(C={...O.errors,...C});let T=Ue(),_=qe(B);return{matches:o,loaderData:R,errors:C,...T||_||w.length>0?{fetchers:new Map(O.fetchers)}:{}}}(y,n,l,p.active,i,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,o&&!0===o.initialHydration,c,h);g||(P=null,Z(n,{matches:v||l,..._e(h),loaderData:w,errors:S}))}function te(e){return e&&!Ne(e[1])?{[e[0]]:e[1].data}:O.actionData?0===Object.keys(O.actionData).length?null:O.actionData:void 0}async function ue(r,o,a,{submission:i,fetcherSubmission:l,preventScrollReset:s,replace:c}={}){o.response.headers.has("X-Remix-Revalidate")&&(j=!0);let d=o.response.headers.get("Location");g(d,"Expected a Location header on the redirect Response"),d=ke(d,new URL(r.url),u);let f=w(O.location,d,{_isRedirect:!0});if(n){let n=!1;if(o.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(ie.test(d)){const r=e.history.createURL(d);n=r.origin!==t.location.origin||null==U(r.pathname,u)}if(n)return void(c?t.location.replace(d):t.location.assign(d))}P=null;let p=!0===c||o.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:h,formAction:m,formEncType:y}=O.navigation;!i&&!l&&h&&m&&y&&(i=$e(O.navigation));let v=i||l;if(ne.has(o.response.status)&&v&&ze(v.formMethod))await ee(p,f,{submission:{...v,formAction:d},preventScrollReset:s||A,enableViewTransition:a?M:void 0});else{let e=Be(f,i);await ee(p,f,{overrideNavigation:e,fetcherSubmission:l,preventScrollReset:s||A,enableViewTransition:a?M:void 0})}}async function fe(e,t,n,r,o,a){let s,d={};try{s=await async function(e,t,n,r,o,a,i,l,s,u){let c=a.map((e=>e.route.lazy?async function(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];g(o,"No route found in manifest");let a={};for(let e in r){let t=void 0!==o[e]&&"hasErrorBoundary"!==e;v(!t,`Route "${o.id}" has a static property "${e}" defined but its lazy function is also returning a value for this property. The lazy route property "${e}" will be ignored.`),t||E.has(e)||(a[e]=r[e])}Object.assign(o,a),Object.assign(o,{...t(o),lazy:void 0})}(e.route,s,l):void 0)),d=a.map(((e,n)=>{let a=c[n],i=o.some((t=>t.route.id===e.route.id));return{...e,shouldLoad:i,resolve:async n=>(n&&"GET"===r.method&&(e.route.lazy||e.route.loader)&&(i=!0),i?async function(e,t,n,r,o,a){let i,l,s=r=>{let i,s=new Promise(((e,t)=>i=t));l=()=>i(),t.signal.addEventListener("abort",l);let u=o=>"function"!=typeof r?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${e}" [routeId: ${n.route.id}]`)):r({request:t,params:n.params,context:a},...void 0!==o?[o]:[]),c=(async()=>{try{return{type:"data",result:await(o?o((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let o=n.route[e];if(r)if(o){let e,[t]=await Promise.all([s(o).catch((t=>{e=t})),r]);if(void 0!==e)throw e;i=t}else{if(await r,o=n.route[e],!o){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw Oe(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:"data",result:void 0}}i=await s(o)}else{if(!o){let e=new URL(t.url);throw Oe(404,{pathname:e.pathname+e.search})}i=await s(o)}}catch(e){return{type:"error",result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return i}(t,r,e,a,n,u):Promise.resolve({type:"data",result:void 0}))}})),f=await e({matches:d,request:r,params:a[0].params,fetcherKey:i,context:u});try{await Promise.all(c)}catch(e){}return f}(c,e,0,n,r,o,a,l,i)}catch(e){return r.forEach((t=>{d[t.route.id]={type:"error",error:e}})),d}for(let[e,t]of Object.entries(s))if(Me(t)){let r=t.result;d[e]={type:"redirect",response:Se(r,n,e,o,u)}}else d[e]=await we(t);return d}async function me(t,n,r,o,a){let i=fe("loader",0,a,r,n,null),l=Promise.all(o.map((async t=>{if(t.matches&&t.match&&t.controller){let n=(await fe("loader",0,Ee(e.history,t.path,t.controller.signal),[t.match],t.matches,t.key))[t.match.route.id];return{[t.key]:n}}return Promise.resolve({[t.key]:{type:"error",error:Oe(404,{pathname:t.path})}})})));return{loaderResults:await i,fetcherResults:(await l).reduce(((e,t)=>Object.assign(e,t)),{})}}function ye(){j=!0,q.forEach(((e,t)=>{H.has(t)&&z.add(t),Fe(t)}))}function ve(e,t,n={}){O.fetchers.set(e,t),K({fetchers:new Map(O.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function xe(e,t,n,r={}){let o=Pe(O.matches,t);Ae(e),K({errors:{[o.route.id]:n},fetchers:new Map(O.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Re(e){return Y.set(e,(Y.get(e)||0)+1),Q.has(e)&&Q.delete(e),O.fetchers.get(e)||oe}function Ae(e){let t=O.fetchers.get(e);!H.has(e)||t&&"loading"===t.state&&W.has(e)||Fe(e),q.delete(e),W.delete(e),V.delete(e),Q.delete(e),z.delete(e),O.fetchers.delete(e)}function Fe(e){let t=H.get(e);t&&(t.abort(),H.delete(e))}function je(e){for(let t of e){let e=Ve(Re(t).data);O.fetchers.set(t,e)}}function Ue(){let e=[],t=!1;for(let n of V){let r=O.fetchers.get(n);g(r,`Expected fetcher: ${n}`),"loading"===r.state&&(V.delete(n),e.push(n),t=!0)}return je(e),t}function qe(e){let t=[];for(let[n,r]of W)if(r<e){let e=O.fetchers.get(n);g(e,`Expected fetcher: ${n}`),"loading"===e.state&&(Fe(n),W.delete(n),t.push(n))}return je(t),t.length>0}function Ye(e){O.blockers.delete(e),G.delete(e)}function Qe(e,t){let n=O.blockers.get(e)||ae;g("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,`Invalid blocker state transition: ${n.state} -> ${t.state}`);let r=new Map(O.blockers);r.set(e,t),K({blockers:r})}function Ge({currentLocation:e,nextLocation:t,historyAction:n}){if(0===G.size)return;G.size>1&&v(!1,"A router only supports one blocker at a time");let r=Array.from(G.entries()),[o,a]=r[r.length-1],i=O.blockers.get(o);return i&&"proceeding"===i.state?void 0:a({currentLocation:e,nextLocation:t,historyAction:n})?o:void 0}function Je(e){let t=Oe(404,{pathname:e}),n=r||s,{matches:o,route:a}=Le(n);return{notFoundMatches:o,route:a,error:t}}function Xe(e,t){return y&&y(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}(e,O.loaderData))))||e.key}function Ke(e,t){if(m){let n=Xe(e,t),r=m[n];if("number"==typeof r)return r}return null}function Ze(e,t,n){if(d){if(!e)return{active:!0,matches:C(t,n,u,!0)||[]};if(Object.keys(e[0].params).length>0)return{active:!0,matches:C(t,n,u,!0)}}return{active:!1,matches:null}}async function et(e,t,n){if(!d)return{type:"success",matches:e};let o=e;for(;;){let e=null==r,a=r||s,c=l;try{await d({path:t,matches:o,patch:(e,t)=>{n.aborted||ge(e,t,a,c,i)}})}catch(e){return{type:"error",error:e,partialMatches:o}}finally{e&&!n.aborted&&(s=[...s])}if(n.aborted)return{type:"aborted"};let f=R(a,t,u);if(f)return{type:"success",matches:f};let p=C(a,t,u,!0);if(!p||o.length===p.length&&o.every(((e,t)=>e.route.id===p[t].route.id)))return{type:"success",matches:null};o=p}}return a={get basename(){return u},get future(){return f},get state(){return O},get routes(){return s},get window(){return t},initialize:function(){if(p=e.history.listen((({action:t,location:n,delta:r})=>{if(L)return L(),void(L=void 0);v(0===G.size||null!=r,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Ge({currentLocation:O.location,nextLocation:n,historyAction:t});if(o&&null!=r){let t=new Promise((e=>{L=e}));return e.history.go(-1*r),void Qe(o,{state:"blocked",location:n,proceed(){Qe(o,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),t.then((()=>e.history.go(r)))},reset(){let e=new Map(O.blockers);e.set(o,ae),K({blockers:e})}})}return ee(t,n)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(se);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,N);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(se,JSON.stringify(n))}catch(e){v(!1,`Failed to save applied view transitions in sessionStorage (${e}).`)}}}(t,N);t.addEventListener("pagehide",e),I=()=>t.removeEventListener("pagehide",e)}return O.initialized||ee("POP",O.location,{initialHydration:!0}),a},subscribe:function(e){return h.add(e),()=>h.delete(e)},enableScrollRestoration:function(e,t,n){if(m=e,b=t,y=n||null,!S&&O.navigation===re){S=!0;let e=Ke(O.location,O.matches);null!=e&&K({restoreScrollPosition:e})}return()=>{m=null,b=null,y=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let o=ce(O.location,O.matches,u,n,r?.fromRouteId,r?.relative),{path:a,submission:i,error:l}=de(!1,o,r),s=O.location,c=w(O.location,a,r&&r.state);c={...c,...e.history.encodeLocation(c)};let d=r&&null!=r.replace?r.replace:void 0,f="PUSH";!0===d?f="REPLACE":!1===d||null!=i&&ze(i.formMethod)&&i.formAction===O.location.pathname+O.location.search&&(f="REPLACE");let p=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,h=!0===(r&&r.flushSync),m=Ge({currentLocation:s,nextLocation:c,historyAction:f});m?Qe(m,{state:"blocked",location:c,proceed(){Qe(m,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,r)},reset(){let e=new Map(O.blockers);e.set(m,ae),K({blockers:e})}}):await ee(f,c,{submission:i,pendingError:l,preventScrollReset:p,replace:r&&r.replace,enableViewTransition:r&&r.viewTransition,flushSync:h})},fetch:async function(t,n,o,a){Fe(t);let i=!0===(a&&a.flushSync),l=r||s,c=ce(O.location,O.matches,u,o,n,a?.relative),d=R(l,c,u),f=Ze(d,l,c);if(f.active&&f.matches&&(d=f.matches),!d)return void xe(t,n,Oe(404,{pathname:c}),{flushSync:i});let{path:p,submission:h,error:m}=de(!0,c,a);if(m)return void xe(t,n,m,{flushSync:i});let y=He(d,p),v=!0===(a&&a.preventScrollReset);h&&ze(h.formMethod)?await async function(t,n,o,a,i,l,c,d,f){function p(e){if(!e.route.action&&!e.route.lazy){let e=Oe(405,{method:f.formMethod,pathname:o,routeId:n});return xe(t,n,e,{flushSync:c}),!0}return!1}if(ye(),q.delete(t),!l&&p(a))return;let h=O.fetchers.get(t);ve(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(f,h),{flushSync:c});let m=new AbortController,y=Ee(e.history,o,m.signal,f);if(l){let e=await et(i,o,y.signal);if("aborted"===e.type)return;if("error"===e.type)return void xe(t,n,e.error,{flushSync:c});if(!e.matches)return void xe(t,n,Oe(404,{pathname:o}),{flushSync:c});if(p(a=He(i=e.matches,o)))return}H.set(t,m);let v=$,b=(await fe("action",0,y,[a],i,t))[a.route.id];if(y.signal.aborted)return void(H.get(t)===m&&H.delete(t));if(Q.has(t)){if(Ie(b)||Ne(b))return void ve(t,Ve(void 0))}else{if(Ie(b))return H.delete(t),B>v?void ve(t,Ve(void 0)):(V.add(t),ve(t,We(f)),ue(y,b,!1,{fetcherSubmission:f,preventScrollReset:d}));if(Ne(b))return void xe(t,n,b.error)}let w=O.navigation.location||O.location,S=Ee(e.history,w,m.signal),k=r||s,E="idle"!==O.navigation.state?R(k,O.navigation.location,u):O.matches;g(E,"Didn't find any matches after fetcher action");let x=++$;W.set(t,x);let C=We(f,b.data);O.fetchers.set(t,C);let[T,_]=pe(e.history,O,E,f,w,!1,j,z,Q,q,V,k,u,[a.route.id,b]);_.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=O.fetchers.get(t),r=We(void 0,n?n.data:void 0);O.fetchers.set(t,r),Fe(t),e.controller&&H.set(t,e.controller)})),K({fetchers:new Map(O.fetchers)});let L=()=>_.forEach((e=>Fe(e.key)));m.signal.addEventListener("abort",L);let{loaderResults:A,fetcherResults:M}=await me(0,E,T,_,S);if(m.signal.aborted)return;m.signal.removeEventListener("abort",L),W.delete(t),H.delete(t),_.forEach((e=>H.delete(e.key)));let N=De(A);if(N)return ue(S,N.result,!1,{preventScrollReset:d});if(N=De(M),N)return V.add(N.key),ue(S,N.result,!1,{preventScrollReset:d});let{loaderData:I,errors:F}=Ce(O,E,A,void 0,_,M);if(O.fetchers.has(t)){let e=Ve(b.data);O.fetchers.set(t,e)}qe(x),"loading"===O.navigation.state&&x>B?(g(D,"Expected pending action"),P&&P.abort(),Z(O.navigation.location,{matches:E,loaderData:I,errors:F,fetchers:new Map(O.fetchers)})):(K({errors:F,loaderData:Te(O.loaderData,I,E,F),fetchers:new Map(O.fetchers)}),j=!1)}(t,n,p,y,d,f.active,i,v,h):(q.set(t,{routeId:n,path:p}),await async function(t,n,r,o,a,i,l,s,u){let c=O.fetchers.get(t);ve(t,We(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,f=Ee(e.history,r,d.signal);if(i){let e=await et(a,r,f.signal);if("aborted"===e.type)return;if("error"===e.type)return void xe(t,n,e.error,{flushSync:l});if(!e.matches)return void xe(t,n,Oe(404,{pathname:r}),{flushSync:l});o=He(a=e.matches,r)}H.set(t,d);let p=$,h=(await fe("loader",0,f,[o],a,t))[o.route.id];if(H.get(t)===d&&H.delete(t),!f.signal.aborted){if(!Q.has(t))return Ie(h)?B>p?void ve(t,Ve(void 0)):(V.add(t),void await ue(f,h,!1,{preventScrollReset:s})):void(Ne(h)?xe(t,n,h.error):ve(t,Ve(h.data)));ve(t,Ve(void 0))}}(t,n,p,y,d,f.active,i,v,h))},revalidate:function(){X||(X=function(){let e,t,n=new Promise(((r,o)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{o(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}()),ye(),K({revalidation:"loading"});let e=X.promise;return"submitting"===O.navigation.state?e:"idle"===O.navigation.state?(ee(O.historyAction,O.location,{startUninterruptedRevalidation:!0}),e):(ee(D||O.historyAction,O.navigation.location,{overrideNavigation:O.navigation,enableViewTransition:!0===M}),e)},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Re,deleteFetcher:function(e){let t=(Y.get(e)||0)-1;t<=0?(Y.delete(e),Q.add(e)):Y.set(e,t),K({fetchers:new Map(O.fetchers)})},dispose:function(){p&&p(),I&&I(),h.clear(),P&&P.abort(),O.fetchers.forEach(((e,t)=>Ae(t))),O.blockers.forEach(((e,t)=>Ye(t)))},getBlocker:function(e,t){let n=O.blockers.get(e)||ae;return G.get(e)!==t&&G.set(e,t),n},deleteBlocker:Ye,patchRoutes:function(e,t){let n=null==r;ge(e,t,r||s,l,i),n&&(s=[...s],K({}))},_internalFetchControllers:H,_internalSetRoutes:function(e){l={},r=x(e,i,void 0,l)}},a}({routes:n,history:y(),basename:hn.context.basename,hydrationData:t,mapRouteProperties:mt,dataStrategy:(o=hn.manifest,a=hn.routeModules,i=()=>r,async({request:e,matches:t,fetcherKey:n})=>"GET"!==e.method?async function(e,t){let n=t.find((e=>e.shouldLoad));kt(n,"No action match found");let r,o=await n.resolve((async t=>await t((async()=>{let t=Ot(e.url),o=await Tt(e),{data:a,status:i}=await Dt(t,o);return r=i,Nt(a,n.route.id)}))));return je(o.result)||J(o.result)?{[n.route.id]:o}:{[n.route.id]:{type:o.type,result:(a=o.result,i=r,new Y(a,"number"==typeof i?{status:i}:i))}};var a,i}(e,t):n?async function(e,t){let n=t.find((e=>e.shouldLoad));kt(n,"No fetcher match found");let r=await n.resolve((async t=>Pt(t,Lt(Ot(e.url)),await Tt(e),n.route.id)));return{[n.route.id]:r}}(e,t):async function(e,t,n,r,o){let a=new Set,i=!1,l=o.map((()=>It())),s=Promise.all(l.map((e=>e.promise))),u=It(),c=Lt(Ot(r.url)),d=await Tt(r),f={},p=Promise.all(o.map((async(r,o)=>r.resolve((async s=>{l[o].resolve();let p=e.routes[r.route.id];if(!r.shouldLoad){if(!n.state.initialized)return;if(r.route.id in n.state.loaderData&&p&&p.hasLoader&&t[r.route.id]?.shouldRevalidate)return void(i=!0)}if(p&&p.hasClientLoader){p.hasLoader&&(i=!0);try{let e=await Pt(s,c,d,r.route.id);f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}else{p&&p.hasLoader&&a.add(r.route.id);try{let e=await s((async()=>Mt(await u.promise,r.route.id)));f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}})))));if(await s,n.state.initialized&&0!==a.size||window.__reactRouterHdrActive)try{i&&a.size>0&&c.searchParams.set("_routes",o.filter((e=>a.has(e.route.id))).map((e=>e.route.id)).join(","));let e=await Dt(c,d);u.resolve(e.data)}catch(e){u.reject(e)}else u.resolve({});return await p,f}(o,a,i(),e,t)),patchRoutesOnNavigation:an(hn.manifest,hn.routeModules,hn.context.isSpaMode,hn.context.basename)});var o,a,i;return hn.router=r,r.state.initialized&&(hn.routerInitialized=!0,r.initialize()),r.createRoutesForHMR=Yt,window.__reactRouterDataRouter=r,r}function gn(){mn||(mn=yn());let[e,t]=pn.useState(hn?.context.criticalCss);hn&&(window.__reactRouterClearCriticalCss=()=>t(void 0));let[n,r]=pn.useState(mn.state.location);return pn.useLayoutEffect((()=>{hn&&hn.router&&!hn.routerInitialized&&(hn.routerInitialized=!0,hn.router.initialize())}),[]),pn.useLayoutEffect((()=>{if(hn&&hn.router)return hn.router.subscribe((e=>{e.location!==n&&r(e.location)}))}),[n]),g(hn,"ssrInfo unavailable for HydratedRouter"),o=mn,a=hn.manifest,i=hn.routeModules,l=hn.context.isSpaMode,Ft.useEffect((()=>{if(!on(l)||!0===navigator.connection?.saveData)return;function e(e){let t="FORM"===e.tagName?e.getAttribute("action"):e.getAttribute("href");if(!t)return;let n="A"===e.tagName?e.pathname:new URL(t,window.location.origin).pathname;nn.has(n)||en.add(n)}async function t(){document.querySelectorAll("a[data-discover], form[data-discover]").forEach(e);let t=Array.from(en.keys()).filter((e=>!nn.has(e)||(en.delete(e),!1)));if(0!==t.length)try{await ln(t,a,i,l,o.basename,o.patchRoutes)}catch(e){console.error("Failed to fetch manifest patches",e)}}let n=function(e){let t;return(...n)=>{window.clearTimeout(t),t=window.setTimeout((()=>e(...n)),100)}}(t);t();let r=new MutationObserver((()=>n()));return r.observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["data-discover","href","action"]}),()=>r.disconnect()}),[l,a,i,o]),pn.createElement(pn.Fragment,null,pn.createElement(sn.Provider,{value:{manifest:hn.manifest,routeModules:hn.routeModules,future:hn.context.future,criticalCss:e,isSpaMode:hn.context.isSpaMode}},pn.createElement(Ut,{location:n},pn.createElement(fn,{router:mn}))),pn.createElement(pn.Fragment,null));var o,a,i,l}},"./node_modules/react-router/dist/development/index.js":(e,t,n)=>{var r,o=Object.create,a=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,s=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))u.call(e,o)||o===n||a(e,o,{get:()=>t[o],enumerable:!(r=i(t,o))||r.enumerable});return e},d=(e,t,n)=>(n=null!=e?o(s(e)):{},c(!t&&e&&e.__esModule?n:a(n,"default",{value:e,enumerable:!0}),e)),f={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(f,{Await:()=>Sn,BrowserRouter:()=>Zr,Form:()=>ao,HashRouter:()=>eo,IDLE_BLOCKER:()=>me,IDLE_FETCHER:()=>he,IDLE_NAVIGATION:()=>pe,Link:()=>ro,Links:()=>Hr,MemoryRouter:()=>mn,Meta:()=>Wr,NavLink:()=>oo,Navigate:()=>yn,NavigationType:()=>p,Outlet:()=>gn,PrefetchPageLinks:()=>$r,Route:()=>vn,Router:()=>bn,RouterProvider:()=>pn,Routes:()=>wn,Scripts:()=>qr,ScrollRestoration:()=>io,ServerRouter:()=>Uo,StaticRouter:()=>To,StaticRouterProvider:()=>_o,UNSAFE_DataRouterContext:()=>ft,UNSAFE_DataRouterStateContext:()=>pt,UNSAFE_ErrorResponseImpl:()=>ae,UNSAFE_FetchersContext:()=>mt,UNSAFE_FrameworkContext:()=>Fr,UNSAFE_LocationContext:()=>vt,UNSAFE_NavigationContext:()=>gt,UNSAFE_RemixErrorBoundary:()=>fr,UNSAFE_RouteContext:()=>bt,UNSAFE_ServerMode:()=>Ko,UNSAFE_SingleFetchRedirectSymbol:()=>Kn,UNSAFE_ViewTransitionContext:()=>ht,UNSAFE_createBrowserHistory:()=>y,UNSAFE_createClientRoutes:()=>Er,UNSAFE_createClientRoutesWithHMRRevalidationOptOut:()=>wr,UNSAFE_createRouter:()=>we,UNSAFE_decodeViaTurboStream:()=>ar,UNSAFE_deserializeErrors:()=>Ia,UNSAFE_getPatchRoutesOnNavigationFunction:()=>Dr,UNSAFE_getSingleFetchDataStrategy:()=>er,UNSAFE_invariant:()=>v,UNSAFE_mapRouteProperties:()=>cn,UNSAFE_shouldHydrateRouteLoader:()=>Cr,UNSAFE_useFogOFWarDiscovery:()=>Ar,UNSAFE_useScrollRestoration:()=>ko,createBrowserRouter:()=>Gr,createCookie:()=>Qo,createCookieSessionStorage:()=>Ma,createHashRouter:()=>Jr,createMemoryRouter:()=>dn,createMemorySessionStorage:()=>Na,createPath:()=>k,createRequestHandler:()=>Ta,createRoutesFromChildren:()=>xn,createRoutesFromElements:()=>Rn,createRoutesStub:()=>$o,createSearchParams:()=>On,createSession:()=>La,createSessionStorage:()=>Da,createStaticHandler:()=>Do,createStaticRouter:()=>Ao,data:()=>te,generatePath:()=>H,isCookie:()=>Go,isRouteErrorResponse:()=>ie,isSession:()=>Oa,matchPath:()=>$,matchRoutes:()=>T,parsePath:()=>E,redirect:()=>ne,redirectDocument:()=>re,renderMatches:()=>Cn,replace:()=>oe,resolvePath:()=>V,unstable_HistoryRouter:()=>to,unstable_setDevServerHooks:()=>ma,unstable_usePrompt:()=>xo,useActionData:()=>Kt,useAsyncError:()=>tn,useAsyncValue:()=>en,useBeforeUnload:()=>Eo,useBlocker:()=>rn,useFetcher:()=>go,useFetchers:()=>vo,useFormAction:()=>yo,useHref:()=>Et,useInRouterContext:()=>xt,useLinkClickHandler:()=>co,useLoaderData:()=>Jt,useLocation:()=>Rt,useMatch:()=>Tt,useMatches:()=>Gt,useNavigate:()=>Lt,useNavigation:()=>Yt,useNavigationType:()=>Ct,useOutlet:()=>At,useOutletContext:()=>Dt,useParams:()=>Mt,useResolvedPath:()=>Nt,useRevalidator:()=>Qt,useRouteError:()=>Zt,useRouteLoaderData:()=>Xt,useRoutes:()=>It,useSearchParams:()=>fo,useSubmit:()=>mo,useViewTransitionState:()=>Ro}),e.exports=(r=f,c(a({},"__esModule",{value:!0}),r));var p=(e=>(e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE",e))(p||{}),h="popstate";function m(e={}){let t,{initialEntries:n=["/"],initialIndex:r,v5Compat:o=!1}=e;t=n.map(((e,t)=>c(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let a=s(null==r?t.length-1:r),i="POP",l=null;function s(e){return Math.min(Math.max(e,0),t.length-1)}function u(){return t[a]}function c(e,n=null,r){let o=S(t?u().pathname:"/",e,n,r);return b("/"===o.pathname.charAt(0),`relative pathnames are not supported in memory history: ${JSON.stringify(e)}`),o}function d(e){return"string"==typeof e?e:k(e)}return{get index(){return a},get action(){return i},get location(){return u()},createHref:d,createURL:e=>new URL(d(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?E(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){i="PUSH";let r=c(e,n);a+=1,t.splice(a,t.length,r),o&&l&&l({action:i,location:r,delta:1})},replace(e,n){i="REPLACE";let r=c(e,n);t[a]=r,o&&l&&l({action:i,location:r,delta:0})},go(e){i="POP";let n=s(a+e),r=t[n];a=n,l&&l({action:i,location:r,delta:e})},listen:e=>(l=e,()=>{l=null})}}function y(e={}){return x((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return S("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:k(t)}),null,e)}function g(e={}){return x((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=E(e.location.hash.substring(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),S("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:k(t))}),(function(e,t){b("/"===e.pathname.charAt(0),`relative pathnames are not supported in hash history.push(${JSON.stringify(t)})`)}),e)}function v(e,t){if(!1===e||null==e)throw new Error(t)}function b(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function w(e,t){return{usr:e.state,key:e.key,idx:t}}function S(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?E(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function k({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function E(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}function x(e,t,n,r={}){let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l="POP",s=null,u=c();function c(){return(i.state||{idx:null}).idx}function d(){l="POP";let e=c(),t=null==e?null:e-u;u=e,s&&s({action:l,location:p.location,delta:t})}function f(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:k(e);return n=n.replace(/ $/,"%20"),v(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==u&&(u=0,i.replaceState({...i.state,idx:u},""));let p={get action(){return l},get location(){return e(o,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return o.addEventListener(h,d),s=e,()=>{o.removeEventListener(h,d),s=null}},createHref:e=>t(o,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l="PUSH";let r=S(p.location,e,t);n&&n(r,e),u=c()+1;let d=w(r,u),f=p.createHref(r);try{i.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(f)}a&&s&&s({action:l,location:p.location,delta:1})},replace:function(e,t){l="REPLACE";let r=S(p.location,e,t);n&&n(r,e),u=c();let o=w(r,u),d=p.createHref(r);i.replaceState(o,"",d),a&&s&&s({action:l,location:p.location,delta:0})},go:e=>i.go(e)};return p}var R=new Set(["lazy","caseSensitive","path","id","index","children"]);function C(e,t,n=[],r={}){return e.map(((e,o)=>{let a=[...n,String(o)],i="string"==typeof e.id?e.id:a.join("-");if(v(!0!==e.index||!e.children,"Cannot specify children on an index route"),v(!r[i],`Found a route id collision on id "${i}".  Route id's must be globally unique within Data Router usages`),function(e){return!0===e.index}(e)){let n={...e,...t(e),id:i};return r[i]=n,n}{let n={...e,...t(e),id:i,children:void 0};return r[i]=n,e.children&&(n.children=C(e.children,t,a,r)),n}}))}function T(e,t,n="/"){return _(e,t,n,!1)}function _(e,t,n,r){let o=W(("string"==typeof t?E(t):t).pathname||"/",n);if(null==o)return null;let a=L(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let t=B(o);i=U(a[e],t,r)}return i}function P(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}function L(e,t=[],n=[],r=""){let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(v(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let l=J([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(v(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${l}".`),L(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:z(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of O(e.path))o(e,t,n);else o(e,t)})),t}function O(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=O(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var D=/^:[\w-]+$/,A=3,M=2,N=1,I=10,F=-2,j=e=>"*"===e;function z(e,t){let n=e.split("/"),r=n.length;return n.some(j)&&(r+=F),t&&(r+=M),n.filter((e=>!j(e))).reduce(((e,t)=>e+(D.test(t)?A:""===t?N:I)),r)}function U(e,t,n=!1){let{routesMeta:r}=e,o={},a="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===a?t:t.slice(a.length)||"/",c=$({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&n&&!r[r.length-1].route.index&&(c=$({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(o,c.params),i.push({params:o,pathname:J([a,c.pathname]),pathnameBase:X(J([a,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(a=J([a,c.pathnameBase]))}return i}function H(e,t={}){let n=e;n.endsWith("*")&&"*"!==n&&!n.endsWith("/*")&&(b(!1,`Route path "${n}" will be treated as if it were "${n.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${n.replace(/\*$/,"/*")}".`),n=n.replace(/\*$/,"/*"));const r=n.startsWith("/")?"/":"",o=e=>null==e?"":"string"==typeof e?e:String(e);return r+n.split(/\/+/).map(((e,n,r)=>{if(n===r.length-1&&"*"===e)return o(t["*"]);const a=e.match(/^:([\w-]+)(\??)$/);if(a){const[,e,n]=a;let r=t[e];return v("?"===n||null!=r,`Missing ":${e}" param`),o(r)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")}function $(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){b("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=l[r]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[t]=n&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function B(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return b(!1,`The URL path "${e}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function W(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function V(e,t="/"){let{pathname:n,search:r="",hash:o=""}="string"==typeof e?E(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:K(r),hash:Z(o)}}function q(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function Y(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function Q(e){let t=Y(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}function G(e,t,n,r=!1){let o;"string"==typeof e?o=E(e):(o={...e},v(!o.pathname||!o.pathname.includes("?"),q("?","pathname","search",o)),v(!o.pathname||!o.pathname.includes("#"),q("#","pathname","hash",o)),v(!o.search||!o.search.includes("#"),q("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let s=V(o,a),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}var J=e=>e.join("/").replace(/\/\/+/g,"/"),X=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),K=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",ee=class{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}};function te(e,t){return new ee(e,"number"==typeof t?{status:t}:t)}var ne=(e,t=302)=>{let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,{...n,headers:r})},re=(e,t)=>{let n=ne(e,t);return n.headers.set("X-Remix-Reload-Document","true"),n},oe=(e,t)=>{let n=ne(e,t);return n.headers.set("X-Remix-Replace","true"),n},ae=class{constructor(e,t,n,r=!1){this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}};function ie(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var le=["POST","PUT","PATCH","DELETE"],se=new Set(le),ue=["GET",...le],ce=new Set(ue),de=new Set([301,302,303,307,308]),fe=new Set([307,308]),pe={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},he={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},me={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ge=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ve="remix-router-transitions",be=Symbol("ResetLoaderData");function we(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement;v(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let r,o,a,i=e.mapRouteProperties||ge,l={},s=C(e.routes,i,void 0,l),u=e.basename||"/",c=e.dataStrategy||De,d=e.patchRoutesOnNavigation,f={...e.future},p=null,h=new Set,m=null,y=null,g=null,w=null!=e.hydrationData,k=T(s,e.history.location,u),E=!1,x=null;if(null==k&&!d){let t=qe(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Ve(s);k=n,x={[r.id]:t}}if(k&&!e.hydrationData&&je(k,s,e.history.location.pathname).active&&(k=null),k)if(k.some((e=>e.route.lazy)))o=!1;else if(k.some((e=>e.route.loader))){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null;if(n){let e=k.findIndex((e=>void 0!==n[e.route.id]));o=k.slice(0,e+1).every((e=>!Te(e.route,t,n)))}else o=k.every((e=>!Te(e.route,t,n)))}else o=!0;else{o=!1,k=[];let t=je(null,s,e.history.location.pathname);t.active&&t.matches&&(E=!0,k=t.matches)}let R,L,O={historyAction:e.history.action,location:e.history.location,matches:k,initialized:o,navigation:pe,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||x,fetchers:new Map,blockers:new Map},D="POP",A=!1,M=!1,N=new Map,I=null,F=!1,j=!1,z=new Set,U=new Map,H=0,$=-1,B=new Map,V=new Set,q=new Map,Y=new Map,Q=new Set,G=new Map,J=null;function X(e,t={}){O={...O,...e};let n=[],r=[];O.fetchers.forEach(((e,t)=>{"idle"===e.state&&(Q.has(t)?n.push(t):r.push(t))})),Q.forEach((e=>{O.fetchers.has(e)||U.has(e)||n.push(e)})),[...h].forEach((e=>e(O,{deletedFetchers:n,viewTransitionOpts:t.viewTransitionOpts,flushSync:!0===t.flushSync}))),n.forEach((e=>ue(e))),r.forEach((e=>O.fetchers.delete(e)))}function K(t,n,{flushSync:o}={}){let a,i=null!=O.actionData&&null!=O.navigation.formMethod&&rt(O.navigation.formMethod)&&"loading"===O.navigation.state&&!0!==t.state?._isRedirect;a=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:i?O.actionData:null;let l=n.loaderData?$e(O.loaderData,n.loaderData,n.matches||[],n.errors):O.loaderData,u=O.blockers;u.size>0&&(u=new Map(u),u.forEach(((e,t)=>u.set(t,me))));let c,d=!0===A||null!=O.navigation.formMethod&&rt(O.navigation.formMethod)&&!0!==t.state?._isRedirect;if(r&&(s=r,r=void 0),F||"POP"===D||("PUSH"===D?e.history.push(t,t.state):"REPLACE"===D&&e.history.replace(t,t.state)),"POP"===D){let e=N.get(O.location.pathname);e&&e.has(t.pathname)?c={currentLocation:O.location,nextLocation:t}:N.has(t.pathname)&&(c={currentLocation:t,nextLocation:O.location})}else if(M){let e=N.get(O.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),N.set(O.location.pathname,e)),c={currentLocation:O.location,nextLocation:t}}X({...n,actionData:a,loaderData:l,historyAction:D,location:t,initialized:!0,navigation:pe,revalidation:"idle",restoreScrollPosition:Oe(t,n.matches||O.matches),preventScrollReset:d,blockers:u},{viewTransitionOpts:c,flushSync:!0===o}),D="POP",A=!1,M=!1,F=!1,j=!1,J?.resolve(),J=null}async function Z(t,n,o){R&&R.abort(),R=null,D=t,F=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(m&&g){let n=Pe(e,t);m[n]=g()}}(O.location,O.matches),A=!0===(o&&o.preventScrollReset),M=!0===(o&&o.enableViewTransition);let a=r||s,i=o&&o.overrideNavigation,l=o?.initialHydration&&O.matches&&O.matches.length>0&&!E?O.matches:T(a,n,u),c=!0===(o&&o.flushSync);if(l&&O.initialized&&!j&&(d=O.location,f=n,d.pathname===f.pathname&&d.search===f.search&&(""===d.hash?""!==f.hash:d.hash===f.hash||""!==f.hash))&&!(o&&o.submission&&rt(o.submission.formMethod)))return void K(n,{matches:l},{flushSync:c});var d,f;let p=je(l,a,n.pathname);if(p.active&&p.matches&&(l=p.matches),!l){let{error:e,notFoundMatches:t,route:r}=_e(n.pathname);return void K(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:c})}R=new AbortController;let h,y=Fe(e.history,n,R.signal,o&&o.submission);if(o&&o.pendingError)h=[We(l).route.id,{type:"error",error:o.pendingError}];else if(o&&o.submission&&rt(o.submission.formMethod)){let t=await async function(e,t,n,r,o,a={}){oe();let i,l=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(X({navigation:l},{flushSync:!0===a.flushSync}),o){let n=await ze(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let e=We(n.partialMatches).route.id;return{matches:n.partialMatches,pendingActionResult:[e,{type:"error",error:n.error}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=_e(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:"error",error:n}]}}r=n.matches}let s=at(r,t);if(s.route.action||s.route.lazy){if(i=(await ne("action",O,e,[s],r,null))[s.route.id],e.signal.aborted)return{shortCircuited:!0}}else i={type:"error",error:qe(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(Xe(i)){let t;return t=a&&null!=a.replace?a.replace:Ie(i.response.headers.get("Location"),new URL(e.url),u)===O.location.pathname+O.location.search,await te(e,i,!0,{submission:n,replace:t}),{shortCircuited:!0}}if(Je(i)){let e=We(r,s.route.id);return!0!==(a&&a.replace)&&(D="PUSH"),{matches:r,pendingActionResult:[e.route.id,i]}}return{matches:r,pendingActionResult:[s.route.id,i]}}(y,n,o.submission,l,p.active,{replace:o.replace,flushSync:c});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Je(r)&&ie(r.error)&&404===r.error.status)return R=null,void K(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,h=t.pendingActionResult,i=lt(n,o.submission),c=!1,p.active=!1,y=Fe(e.history,y.url,y.signal)}let{shortCircuited:v,matches:b,loaderData:w,errors:S}=await async function(t,n,o,a,i,l,c,d,f,p,h){let m=i||lt(n,l),y=l||c||it(m),g=!F&&!f;if(a){if(g){let e=ee(h);X({navigation:m,...void 0!==e?{actionData:e}:{}},{flushSync:p})}let e=await ze(o,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let t=We(e.partialMatches).route.id;return{matches:e.partialMatches,loaderData:{},errors:{[t]:e.error}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=_e(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}o=e.matches}let v=r||s,[b,w]=Ce(e.history,O,o,y,n,!0===f,j,z,Q,q,V,v,u,h);if($=++H,0===b.length&&0===w.length){let e=be();return K(n,{matches:o,loaderData:{},errors:h&&Je(h[1])?{[h[0]]:h[1].error}:null,...Be(h),...e?{fetchers:new Map(O.fetchers)}:{}},{flushSync:p}),{shortCircuited:!0}}if(g){let e={};if(!a){e.navigation=m;let t=ee(h);void 0!==t&&(e.actionData=t)}w.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=O.fetchers.get(e.key),n=st(void 0,t?t.data:void 0);O.fetchers.set(e.key,n)})),new Map(O.fetchers)}(w)),X(e,{flushSync:p})}w.forEach((e=>{ce(e.key),e.controller&&U.set(e.key,e.controller)}));let S=()=>w.forEach((e=>ce(e.key)));R&&R.signal.addEventListener("abort",S);let{loaderResults:k,fetcherResults:E}=await re(O,o,b,w,t);if(t.signal.aborted)return{shortCircuited:!0};R&&R.signal.removeEventListener("abort",S),w.forEach((e=>U.delete(e.key)));let x=Ye(k);if(x)return await te(t,x.result,!0,{replace:d}),{shortCircuited:!0};if(x=Ye(E),x)return V.add(x.key),await te(t,x.result,!0,{replace:d}),{shortCircuited:!0};let{loaderData:C,errors:T}=He(O,o,k,h,w,E);f&&O.errors&&(T={...O.errors,...T});let _=be(),P=we($);return{matches:o,loaderData:C,errors:T,..._||P||w.length>0?{fetchers:new Map(O.fetchers)}:{}}}(y,n,l,p.active,i,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,o&&!0===o.initialHydration,c,h);v||(R=null,K(n,{matches:b||l,...Be(h),loaderData:w,errors:S}))}function ee(e){return e&&!Je(e[1])?{[e[0]]:e[1].data}:O.actionData?0===Object.keys(O.actionData).length?null:O.actionData:void 0}async function te(r,o,a,{submission:i,fetcherSubmission:l,preventScrollReset:s,replace:c}={}){o.response.headers.has("X-Remix-Revalidate")&&(j=!0);let d=o.response.headers.get("Location");v(d,"Expected a Location header on the redirect Response"),d=Ie(d,new URL(r.url),u);let f=S(O.location,d,{_isRedirect:!0});if(n){let n=!1;if(o.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(ye.test(d)){const r=e.history.createURL(d);n=r.origin!==t.location.origin||null==W(r.pathname,u)}if(n)return void(c?t.location.replace(d):t.location.assign(d))}R=null;let p=!0===c||o.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:h,formAction:m,formEncType:y}=O.navigation;!i&&!l&&h&&m&&y&&(i=it(O.navigation));let g=i||l;if(fe.has(o.response.status)&&g&&rt(g.formMethod))await Z(p,f,{submission:{...g,formAction:d},preventScrollReset:s||A,enableViewTransition:a?M:void 0});else{let e=lt(f,i);await Z(p,f,{overrideNavigation:e,fetcherSubmission:l,preventScrollReset:s||A,enableViewTransition:a?M:void 0})}}async function ne(e,t,n,r,o,a){let s,d={};try{s=await Ae(c,e,0,n,r,o,a,l,i)}catch(e){return r.forEach((t=>{d[t.route.id]={type:"error",error:e}})),d}for(let[e,t]of Object.entries(s))if(Ge(t)){let r=t.result;d[e]={type:"redirect",response:Ne(r,n,e,o,u)}}else d[e]=await Me(t);return d}async function re(t,n,r,o,a){let i=ne("loader",0,a,r,n,null),l=Promise.all(o.map((async t=>{if(t.matches&&t.match&&t.controller){let n=(await ne("loader",0,Fe(e.history,t.path,t.controller.signal),[t.match],t.matches,t.key))[t.match.route.id];return{[t.key]:n}}return Promise.resolve({[t.key]:{type:"error",error:qe(404,{pathname:t.path})}})})));return{loaderResults:await i,fetcherResults:(await l).reduce(((e,t)=>Object.assign(e,t)),{})}}function oe(){j=!0,q.forEach(((e,t)=>{U.has(t)&&z.add(t),ce(t)}))}function ae(e,t,n={}){O.fetchers.set(e,t),X({fetchers:new Map(O.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function le(e,t,n,r={}){let o=We(O.matches,t);ue(e),X({errors:{[o.route.id]:n},fetchers:new Map(O.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function se(e){return Y.set(e,(Y.get(e)||0)+1),Q.has(e)&&Q.delete(e),O.fetchers.get(e)||he}function ue(e){let t=O.fetchers.get(e);!U.has(e)||t&&"loading"===t.state&&B.has(e)||ce(e),q.delete(e),B.delete(e),V.delete(e),Q.delete(e),z.delete(e),O.fetchers.delete(e)}function ce(e){let t=U.get(e);t&&(t.abort(),U.delete(e))}function de(e){for(let t of e){let e=ut(se(t).data);O.fetchers.set(t,e)}}function be(){let e=[],t=!1;for(let n of V){let r=O.fetchers.get(n);v(r,`Expected fetcher: ${n}`),"loading"===r.state&&(V.delete(n),e.push(n),t=!0)}return de(e),t}function we(e){let t=[];for(let[n,r]of B)if(r<e){let e=O.fetchers.get(n);v(e,`Expected fetcher: ${n}`),"loading"===e.state&&(ce(n),B.delete(n),t.push(n))}return de(t),t.length>0}function Se(e){O.blockers.delete(e),G.delete(e)}function ke(e,t){let n=O.blockers.get(e)||me;v("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,`Invalid blocker state transition: ${n.state} -> ${t.state}`);let r=new Map(O.blockers);r.set(e,t),X({blockers:r})}function Re({currentLocation:e,nextLocation:t,historyAction:n}){if(0===G.size)return;G.size>1&&b(!1,"A router only supports one blocker at a time");let r=Array.from(G.entries()),[o,a]=r[r.length-1],i=O.blockers.get(o);return i&&"proceeding"===i.state?void 0:a({currentLocation:e,nextLocation:t,historyAction:n})?o:void 0}function _e(e){let t=qe(404,{pathname:e}),n=r||s,{matches:o,route:a}=Ve(n);return{notFoundMatches:o,route:a,error:t}}function Pe(e,t){return y&&y(e,t.map((e=>P(e,O.loaderData))))||e.key}function Oe(e,t){if(m){let n=Pe(e,t),r=m[n];if("number"==typeof r)return r}return null}function je(e,t,n){if(d){if(!e)return{active:!0,matches:_(t,n,u,!0)||[]};if(Object.keys(e[0].params).length>0)return{active:!0,matches:_(t,n,u,!0)}}return{active:!1,matches:null}}async function ze(e,t,n){if(!d)return{type:"success",matches:e};let o=e;for(;;){let e=null==r,a=r||s,c=l;try{await d({path:t,matches:o,patch:(e,t)=>{n.aborted||Le(e,t,a,c,i)}})}catch(e){return{type:"error",error:e,partialMatches:o}}finally{e&&!n.aborted&&(s=[...s])}if(n.aborted)return{type:"aborted"};let f=T(a,t,u);if(f)return{type:"success",matches:f};let p=_(a,t,u,!0);if(!p||o.length===p.length&&o.every(((e,t)=>e.route.id===p[t].route.id)))return{type:"success",matches:null};o=p}}return a={get basename(){return u},get future(){return f},get state(){return O},get routes(){return s},get window(){return t},initialize:function(){if(p=e.history.listen((({action:t,location:n,delta:r})=>{if(L)return L(),void(L=void 0);b(0===G.size||null!=r,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Re({currentLocation:O.location,nextLocation:n,historyAction:t});if(o&&null!=r){let t=new Promise((e=>{L=e}));return e.history.go(-1*r),void ke(o,{state:"blocked",location:n,proceed(){ke(o,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),t.then((()=>e.history.go(r)))},reset(){let e=new Map(O.blockers);e.set(o,me),X({blockers:e})}})}return Z(t,n)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(ve);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,N);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(ve,JSON.stringify(n))}catch(e){b(!1,`Failed to save applied view transitions in sessionStorage (${e}).`)}}}(t,N);t.addEventListener("pagehide",e),I=()=>t.removeEventListener("pagehide",e)}return O.initialized||Z("POP",O.location,{initialHydration:!0}),a},subscribe:function(e){return h.add(e),()=>h.delete(e)},enableScrollRestoration:function(e,t,n){if(m=e,g=t,y=n||null,!w&&O.navigation===pe){w=!0;let e=Oe(O.location,O.matches);null!=e&&X({restoreScrollPosition:e})}return()=>{m=null,g=null,y=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let o=Ee(O.location,O.matches,u,n,r?.fromRouteId,r?.relative),{path:a,submission:i,error:l}=xe(!1,o,r),s=O.location,c=S(O.location,a,r&&r.state);c={...c,...e.history.encodeLocation(c)};let d=r&&null!=r.replace?r.replace:void 0,f="PUSH";!0===d?f="REPLACE":!1===d||null!=i&&rt(i.formMethod)&&i.formAction===O.location.pathname+O.location.search&&(f="REPLACE");let p=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,h=!0===(r&&r.flushSync),m=Re({currentLocation:s,nextLocation:c,historyAction:f});m?ke(m,{state:"blocked",location:c,proceed(){ke(m,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,r)},reset(){let e=new Map(O.blockers);e.set(m,me),X({blockers:e})}}):await Z(f,c,{submission:i,pendingError:l,preventScrollReset:p,replace:r&&r.replace,enableViewTransition:r&&r.viewTransition,flushSync:h})},fetch:async function(t,n,o,a){ce(t);let i=!0===(a&&a.flushSync),l=r||s,c=Ee(O.location,O.matches,u,o,n,a?.relative),d=T(l,c,u),f=je(d,l,c);if(f.active&&f.matches&&(d=f.matches),!d)return void le(t,n,qe(404,{pathname:c}),{flushSync:i});let{path:p,submission:h,error:m}=xe(!0,c,a);if(m)return void le(t,n,m,{flushSync:i});let y=at(d,p),g=!0===(a&&a.preventScrollReset);h&&rt(h.formMethod)?await async function(t,n,o,a,i,l,c,d,f){function p(e){if(!e.route.action&&!e.route.lazy){let e=qe(405,{method:f.formMethod,pathname:o,routeId:n});return le(t,n,e,{flushSync:c}),!0}return!1}if(oe(),q.delete(t),!l&&p(a))return;let h=O.fetchers.get(t);ae(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(f,h),{flushSync:c});let m=new AbortController,y=Fe(e.history,o,m.signal,f);if(l){let e=await ze(i,o,y.signal);if("aborted"===e.type)return;if("error"===e.type)return void le(t,n,e.error,{flushSync:c});if(!e.matches)return void le(t,n,qe(404,{pathname:o}),{flushSync:c});if(p(a=at(i=e.matches,o)))return}U.set(t,m);let g=H,b=(await ne("action",0,y,[a],i,t))[a.route.id];if(y.signal.aborted)return void(U.get(t)===m&&U.delete(t));if(Q.has(t)){if(Xe(b)||Je(b))return void ae(t,ut(void 0))}else{if(Xe(b))return U.delete(t),$>g?void ae(t,ut(void 0)):(V.add(t),ae(t,st(f)),te(y,b,!1,{fetcherSubmission:f,preventScrollReset:d}));if(Je(b))return void le(t,n,b.error)}let w=O.navigation.location||O.location,S=Fe(e.history,w,m.signal),k=r||s,E="idle"!==O.navigation.state?T(k,O.navigation.location,u):O.matches;v(E,"Didn't find any matches after fetcher action");let x=++H;B.set(t,x);let C=st(f,b.data);O.fetchers.set(t,C);let[_,P]=Ce(e.history,O,E,f,w,!1,j,z,Q,q,V,k,u,[a.route.id,b]);P.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=O.fetchers.get(t),r=st(void 0,n?n.data:void 0);O.fetchers.set(t,r),ce(t),e.controller&&U.set(t,e.controller)})),X({fetchers:new Map(O.fetchers)});let L=()=>P.forEach((e=>ce(e.key)));m.signal.addEventListener("abort",L);let{loaderResults:A,fetcherResults:M}=await re(0,E,_,P,S);if(m.signal.aborted)return;m.signal.removeEventListener("abort",L),B.delete(t),U.delete(t),P.forEach((e=>U.delete(e.key)));let N=Ye(A);if(N)return te(S,N.result,!1,{preventScrollReset:d});if(N=Ye(M),N)return V.add(N.key),te(S,N.result,!1,{preventScrollReset:d});let{loaderData:I,errors:F}=He(O,E,A,void 0,P,M);if(O.fetchers.has(t)){let e=ut(b.data);O.fetchers.set(t,e)}we(x),"loading"===O.navigation.state&&x>$?(v(D,"Expected pending action"),R&&R.abort(),K(O.navigation.location,{matches:E,loaderData:I,errors:F,fetchers:new Map(O.fetchers)})):(X({errors:F,loaderData:$e(O.loaderData,I,E,F),fetchers:new Map(O.fetchers)}),j=!1)}(t,n,p,y,d,f.active,i,g,h):(q.set(t,{routeId:n,path:p}),await async function(t,n,r,o,a,i,l,s,u){let c=O.fetchers.get(t);ae(t,st(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,f=Fe(e.history,r,d.signal);if(i){let e=await ze(a,r,f.signal);if("aborted"===e.type)return;if("error"===e.type)return void le(t,n,e.error,{flushSync:l});if(!e.matches)return void le(t,n,qe(404,{pathname:r}),{flushSync:l});o=at(a=e.matches,r)}U.set(t,d);let p=H,h=(await ne("loader",0,f,[o],a,t))[o.route.id];if(U.get(t)===d&&U.delete(t),!f.signal.aborted){if(!Q.has(t))return Xe(h)?$>p?void ae(t,ut(void 0)):(V.add(t),void await te(f,h,!1,{preventScrollReset:s})):void(Je(h)?le(t,n,h.error):ae(t,ut(h.data)));ae(t,ut(void 0))}}(t,n,p,y,d,f.active,i,g,h))},revalidate:function(){J||(J=function(){let e,t,n=new Promise(((r,o)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{o(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}()),oe(),X({revalidation:"loading"});let e=J.promise;return"submitting"===O.navigation.state?e:"idle"===O.navigation.state?(Z(O.historyAction,O.location,{startUninterruptedRevalidation:!0}),e):(Z(D||O.historyAction,O.navigation.location,{overrideNavigation:O.navigation,enableViewTransition:!0===M}),e)},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:se,deleteFetcher:function(e){let t=(Y.get(e)||0)-1;t<=0?(Y.delete(e),Q.add(e)):Y.set(e,t),X({fetchers:new Map(O.fetchers)})},dispose:function(){p&&p(),I&&I(),h.clear(),R&&R.abort(),O.fetchers.forEach(((e,t)=>ue(t))),O.blockers.forEach(((e,t)=>Se(t)))},getBlocker:function(e,t){let n=O.blockers.get(e)||me;return G.get(e)!==t&&G.set(e,t),n},deleteBlocker:Se,patchRoutes:function(e,t){let n=null==r;Le(e,t,r||s,l,i),n&&(s=[...s],X({}))},_internalFetchControllers:U,_internalSetRoutes:function(e){l={},r=C(e,i,void 0,l)}},a}function Se(e,t){v(e.length>0,"You must provide a non-empty routes array to createStaticHandler");let n={},r=(t?t.basename:null)||"/",o=t?.mapRouteProperties||ge,a=C(e,o,void 0,n);async function i(e,t,n,r,o,a,i){v(e.signal,"query()/queryRoute() requests must contain an AbortController signal");try{if(rt(e.method)){let u=await async function(e,t,n,r,o,a,i){let u;if(n.route.action||n.route.lazy)u=(await s("action",e,[n],t,i,r,o))[n.route.id],e.signal.aborted&&ke(e,i);else{let t=qe(405,{method:e.method,pathname:new URL(e.url).pathname,routeId:n.route.id});if(i)throw t;u={type:"error",error:t}}if(Xe(u))throw new Response(null,{status:u.response.status,headers:{Location:u.response.headers.get("Location")}});if(i){if(Je(u))throw u.error;return{matches:[n],loaderData:{},actionData:{[n.route.id]:u.data},errors:null,statusCode:200,loaderHeaders:{},actionHeaders:{}}}let c=new Request(e.url,{headers:e.headers,redirect:e.redirect,signal:e.signal});if(Je(u)){let e=a?n:We(t,n.route.id);return{...await l(c,t,r,o,a,null,[e.route.id,u]),statusCode:ie(u.error)?u.error.status:null!=u.statusCode?u.statusCode:500,actionData:null,actionHeaders:{...u.headers?{[n.route.id]:u.headers}:{}}}}return{...await l(c,t,r,o,a,null),actionData:{[n.route.id]:u.data},...u.statusCode?{statusCode:u.statusCode}:{},actionHeaders:u.headers?{[n.route.id]:u.headers}:{}}}(e,n,i||at(n,t),r,o,a,null!=i);return u}let u=await l(e,n,r,o,a,i);return Ze(u)?u:{...u,actionData:null,actionHeaders:{}}}catch(e){if(null!=(u=e)&&"object"==typeof u&&"type"in u&&"result"in u&&("data"===u.type||"error"===u.type)&&Ze(e.result)){if("error"===e.type)throw e.result;return e.result}if(tt(e))return e;throw e}var u}async function l(e,t,n,r,o,a,i){let l=null!=a;if(l&&!a?.route.loader&&!a?.route.lazy)throw qe(400,{method:e.method,pathname:new URL(e.url).pathname,routeId:a?.route.id});let u=(a?[a]:i&&Je(i[1])?Re(t,i[0]):t).filter((e=>e.route.loader||e.route.lazy));if(0===u.length)return{matches:t,loaderData:t.reduce(((e,t)=>Object.assign(e,{[t.route.id]:null})),{}),errors:i&&Je(i[1])?{[i[0]]:i[1].error}:null,statusCode:200,loaderHeaders:{}};let c=await s("loader",e,u,t,l,n,r);e.signal.aborted&&ke(e,l);let d=Ue(t,c,i,!0,o),f=new Set(u.map((e=>e.route.id)));return t.forEach((e=>{f.has(e.route.id)||(d.loaderData[e.route.id]=null)})),{...d,matches:t}}async function s(e,t,a,i,l,s,u){let c=await Ae(u||De,e,0,t,a,i,null,n,o,s),d={};return await Promise.all(i.map((async e=>{if(!(e.route.id in c))return;let n=c[e.route.id];if(Ge(n))throw Ne(n.result,t,e.route.id,i,r);if(Ze(n.result)&&l)throw n;d[e.route.id]=await Me(n)}))),d}return{dataRoutes:a,query:async function(e,{requestContext:t,skipLoaderErrorBubbling:n,dataStrategy:o}={}){let l=new URL(e.url),s=e.method,u=S("",k(l),null,"default"),c=T(a,u,r);if(!nt(s)&&"HEAD"!==s){let e=qe(405,{method:s}),{matches:t,route:n}=Ve(a);return{basename:r,location:u,matches:t,loaderData:{},actionData:null,errors:{[n.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{}}}if(!c){let e=qe(404,{pathname:u.pathname}),{matches:t,route:n}=Ve(a);return{basename:r,location:u,matches:t,loaderData:{},actionData:null,errors:{[n.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{}}}let d=await i(e,u,c,t,o||null,!0===n,null);return Ze(d)?d:{location:u,basename:r,...d}},queryRoute:async function(e,{routeId:t,requestContext:n,dataStrategy:o}={}){let l=new URL(e.url),s=e.method,u=S("",k(l),null,"default"),c=T(a,u,r);if(!nt(s)&&"HEAD"!==s&&"OPTIONS"!==s)throw qe(405,{method:s});if(!c)throw qe(404,{pathname:u.pathname});let d=t?c.find((e=>e.route.id===t)):at(c,u);if(t&&!d)throw qe(403,{pathname:u.pathname,routeId:t});if(!d)throw qe(404,{pathname:u.pathname});let f=await i(e,u,c,n,o||null,!1,d);if(Ze(f))return f;let p=f.errors?Object.values(f.errors)[0]:void 0;if(void 0!==p)throw p;return f.actionData?Object.values(f.actionData)[0]:f.loaderData?Object.values(f.loaderData)[0]:void 0}}}function ke(e,t){if(void 0!==e.signal.reason)throw e.signal.reason;throw new Error(`${t?"queryRoute":"query"}() call aborted without an \`AbortSignal.reason\`: ${e.method} ${e.url}`)}function Ee(e,t,n,r,o,a){let i,l;if(o){i=[];for(let e of t)if(i.push(e),e.route.id===o){l=e;break}}else i=t,l=t[t.length-1];let s=G(r||".",Q(i),W(e.pathname,n)||e.pathname,"path"===a);if(null==r&&(s.search=e.search,s.hash=e.hash),(null==r||""===r||"."===r)&&l){let e=ot(s.search);if(l.route.index&&!e)s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index";else if(!l.route.index&&e){let e=new URLSearchParams(s.search),t=e.getAll("index");e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();s.search=n?`?${n}`:""}}return"/"!==n&&(s.pathname="/"===s.pathname?n:J([n,s.pathname])),k(s)}function xe(e,t,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:t};if(n.formMethod&&!nt(n.formMethod))return{path:t,error:qe(405,{method:n.formMethod})};let r,o,a=()=>({path:t,error:qe(400,{type:"invalid-body"})}),i=(n.formMethod||"get").toUpperCase(),l=Qe(t);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!rt(i))return a();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,[t,n])=>`${e}${t}=${n}\n`),""):String(n.body);return{path:t,submission:{formMethod:i,formAction:l,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!rt(i))return a();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:t,submission:{formMethod:i,formAction:l,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return a()}}}if(v("function"==typeof FormData,"FormData is not available in this environment"),n.formData)r=je(n.formData),o=n.formData;else if(n.body instanceof FormData)r=je(n.body),o=n.body;else if(n.body instanceof URLSearchParams)r=n.body,o=ze(r);else if(null==n.body)r=new URLSearchParams,o=new FormData;else try{r=new URLSearchParams(n.body),o=ze(r)}catch(e){return a()}let s={formMethod:i,formAction:l,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:o,json:void 0,text:void 0};if(rt(s.formMethod))return{path:t,submission:s};let u=E(t);return e&&u.search&&ot(u.search)&&r.append("index",""),u.search=`?${r}`,{path:k(u),submission:s}}function Re(e,t,n=!1){let r=e.findIndex((e=>e.route.id===t));return r>=0?e.slice(0,n?r+1:r):e}function Ce(e,t,n,r,o,a,i,l,s,u,c,d,f,p){let h=p?Je(p[1])?p[1].error:p[1].data:void 0,m=e.createURL(t.location),y=e.createURL(o),g=n;a&&t.errors?g=Re(n,Object.keys(t.errors)[0],!0):p&&Je(p[1])&&(g=Re(n,p[0]));let v=p?p[1].statusCode:void 0,b=v&&v>=400,w=g.filter(((e,n)=>{let{route:o}=e;if(o.lazy)return!0;if(null==o.loader)return!1;if(a)return Te(o,t.loaderData,t.errors);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=!e.hasOwnProperty(n.route.id);return r||o}(t.loaderData,t.matches[n],e))return!0;let l=t.matches[n],s=e;return Pe(e,{currentUrl:m,currentParams:l.params,nextUrl:y,nextParams:s.params,...r,actionResult:h,actionStatus:v,defaultShouldRevalidate:!b&&(i||m.pathname+m.search===y.pathname+y.search||m.search!==y.search||_e(l,s))})})),S=[];return u.forEach(((e,o)=>{if(a||!n.some((t=>t.route.id===e.routeId))||s.has(o))return;let u=T(d,e.path,f);if(!u)return void S.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let p=t.fetchers.get(o),g=at(u,e.path),w=!1;c.has(o)?w=!1:l.has(o)?(l.delete(o),w=!0):w=p&&"idle"!==p.state&&void 0===p.data?i:Pe(g,{currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params,...r,actionResult:h,actionStatus:v,defaultShouldRevalidate:!b&&i}),w&&S.push({key:o,routeId:e.routeId,path:e.path,matches:u,match:g,controller:new AbortController})})),[w,S]}function Te(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let r=null!=t&&void 0!==t[e.id],o=null!=n&&void 0!==n[e.id];return!(!r&&o)&&("function"==typeof e.loader&&!0===e.loader.hydrate||!r&&!o)}function _e(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Pe(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}function Le(e,t,n,r,o){let a;if(e){let t=r[e];v(t,`No route found to patch children into: routeId = ${e}`),t.children||(t.children=[]),a=t.children}else a=n;let i=C(t.filter((e=>!a.some((t=>Oe(e,t))))),o,[e||"_","patch",String(a?.length||"0")],r);a.push(...i)}function Oe(e,t){return"id"in e&&"id"in t&&e.id===t.id||e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive&&(!(e.children&&0!==e.children.length||t.children&&0!==t.children.length)||e.children.every(((e,n)=>t.children?.some((t=>Oe(e,t))))))}async function De({matches:e}){let t=e.filter((e=>e.shouldLoad));return(await Promise.all(t.map((e=>e.resolve())))).reduce(((e,n,r)=>Object.assign(e,{[t[r].route.id]:n})),{})}async function Ae(e,t,n,r,o,a,i,l,s,u){let c=a.map((e=>e.route.lazy?async function(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];v(o,"No route found in manifest");let a={};for(let e in r){let t=void 0!==o[e]&&"hasErrorBoundary"!==e;b(!t,`Route "${o.id}" has a static property "${e}" defined but its lazy function is also returning a value for this property. The lazy route property "${e}" will be ignored.`),t||R.has(e)||(a[e]=r[e])}Object.assign(o,a),Object.assign(o,{...t(o),lazy:void 0})}(e.route,s,l):void 0)),d=a.map(((e,n)=>{let a=c[n],i=o.some((t=>t.route.id===e.route.id));return{...e,shouldLoad:i,resolve:async n=>(n&&"GET"===r.method&&(e.route.lazy||e.route.loader)&&(i=!0),i?async function(e,t,n,r,o,a){let i,l,s=r=>{let i,s=new Promise(((e,t)=>i=t));l=()=>i(),t.signal.addEventListener("abort",l);let u=o=>"function"!=typeof r?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${e}" [routeId: ${n.route.id}]`)):r({request:t,params:n.params,context:a},...void 0!==o?[o]:[]),c=(async()=>{try{return{type:"data",result:await(o?o((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let o=n.route[e];if(r)if(o){let e,[t]=await Promise.all([s(o).catch((t=>{e=t})),r]);if(void 0!==e)throw e;i=t}else{if(await r,o=n.route[e],!o){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw qe(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:"data",result:void 0}}i=await s(o)}else{if(!o){let e=new URL(t.url);throw qe(404,{pathname:e.pathname+e.search})}i=await s(o)}}catch(e){return{type:"error",result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return i}(t,r,e,a,n,u):Promise.resolve({type:"data",result:void 0}))}})),f=await e({matches:d,request:r,params:a[0].params,fetcherKey:i,context:u});try{await Promise.all(c)}catch(e){}return f}async function Me(e){let{result:t,type:n}=e;if(Ze(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:"error",error:e}}return"error"===n?{type:"error",error:new ae(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:"data",data:e,statusCode:t.status,headers:t.headers}}return"error"===n?Ke(t)?t.data instanceof Error?{type:"error",error:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"error",error:new ae(t.init?.status||500,void 0,t.data),statusCode:ie(t)?t.status:void 0,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"error",error:t,statusCode:ie(t)?t.status:void 0}:Ke(t)?{type:"data",data:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"data",data:t}}function Ne(e,t,n,r,o){let a=e.headers.get("Location");if(v(a,"Redirects returned/thrown from loaders/actions must have a Location header"),!ye.test(a)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);a=Ee(new URL(t.url),i,o,a),e.headers.set("Location",a)}return e}function Ie(e,t,n){if(ye.test(e)){let r=e,o=r.startsWith("//")?new URL(t.protocol+r):new URL(r),a=null!=W(o.pathname,n);if(o.origin===t.origin&&a)return o.pathname+o.search+o.hash}return e}function Fe(e,t,n,r){let o=e.createURL(Qe(t)).toString(),a={signal:n};if(r&&rt(r.formMethod)){let{formMethod:e,formEncType:t}=r;a.method=e.toUpperCase(),"application/json"===t?(a.headers=new Headers({"Content-Type":t}),a.body=JSON.stringify(r.json)):"text/plain"===t?a.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?a.body=je(r.formData):a.body=r.formData}return new Request(o,a)}function je(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function ze(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Ue(e,t,n,r=!1,o=!1){let a,i={},l=null,s=!1,u={},c=n&&Je(n[1])?n[1].error:void 0;return e.forEach((n=>{if(!(n.route.id in t))return;let d=n.route.id,f=t[d];if(v(!Xe(f),"Cannot handle redirect results in processLoaderData"),Je(f)){let t=f.error;if(void 0!==c&&(t=c,c=void 0),l=l||{},o)l[d]=t;else{let n=We(e,d);null==l[n.route.id]&&(l[n.route.id]=t)}r||(i[d]=be),s||(s=!0,a=ie(f.error)?f.error.status:500),f.headers&&(u[d]=f.headers)}else i[d]=f.data,f.statusCode&&200!==f.statusCode&&!s&&(a=f.statusCode),f.headers&&(u[d]=f.headers)})),void 0!==c&&n&&(l={[n[0]]:c},i[n[0]]=void 0),{loaderData:i,errors:l,statusCode:a||200,loaderHeaders:u}}function He(e,t,n,r,o,a){let{loaderData:i,errors:l}=Ue(t,n,r);return o.forEach((t=>{let{key:n,match:r,controller:o}=t,i=a[n];if(v(i,"Did not find corresponding fetcher result"),!o||!o.signal.aborted)if(Je(i)){let t=We(e.matches,r?.route.id);l&&l[t.route.id]||(l={...l,[t.route.id]:i.error}),e.fetchers.delete(n)}else if(Xe(i))v(!1,"Unhandled fetcher revalidation redirect");else{let t=ut(i.data);e.fetchers.set(n,t)}})),{loaderData:i,errors:l}}function $e(e,t,n,r){let o=Object.entries(t).filter((([,e])=>e!==be)).reduce(((e,[t,n])=>(e[t]=n,e)),{});for(let a of n){let n=a.route.id;if(!t.hasOwnProperty(n)&&e.hasOwnProperty(n)&&a.route.loader&&(o[n]=e[n]),r&&r.hasOwnProperty(n))break}return o}function Be(e){return e?Je(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function We(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Ve(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function qe(e,{pathname:t,routeId:n,method:r,type:o,message:a}={}){let i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",r&&t&&n?l=`You made a ${r} request to "${t}" but did not provide a \`loader\` for route "${n}", so there is no way to handle the request.`:"invalid-body"===o&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l=`Route "${n}" does not match URL "${t}"`):404===e?(i="Not Found",l=`No route matches URL "${t}"`):405===e&&(i="Method Not Allowed",r&&t&&n?l=`You made a ${r.toUpperCase()} request to "${t}" but did not provide an \`action\` for route "${n}", so there is no way to handle the request.`:r&&(l=`Invalid request method "${r.toUpperCase()}"`)),new ae(e||500,i,new Error(l),!0)}function Ye(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[n,r]=t[e];if(Xe(r))return{key:n,result:r}}}function Qe(e){return k({..."string"==typeof e?E(e):e,hash:""})}function Ge(e){return Ze(e.result)&&de.has(e.result.status)}function Je(e){return"error"===e.type}function Xe(e){return"redirect"===(e&&e.type)}function Ke(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function Ze(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function et(e){return de.has(e)}function tt(e){return Ze(e)&&et(e.status)&&e.headers.has("Location")}function nt(e){return ce.has(e.toUpperCase())}function rt(e){return se.has(e.toUpperCase())}function ot(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function at(e,t){let n="string"==typeof t?E(t).search:t.search;if(e[e.length-1].route.index&&ot(n||""))return e[e.length-1];let r=Y(e);return r[r.length-1]}function it(e){let{formMethod:t,formAction:n,formEncType:r,text:o,formData:a,json:i}=e;if(t&&n&&r)return null!=o?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:o}:null!=a?{formMethod:t,formAction:n,formEncType:r,formData:a,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function lt(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function st(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function ut(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}var ct=d(n("./node_modules/react/index.js")),dt=d(n("./node_modules/react/index.js")),ft=dt.createContext(null);ft.displayName="DataRouter";var pt=dt.createContext(null);pt.displayName="DataRouterState";var ht=dt.createContext({isTransitioning:!1});ht.displayName="ViewTransition";var mt=dt.createContext(new Map);mt.displayName="Fetchers";var yt=dt.createContext(null);yt.displayName="Await";var gt=dt.createContext(null);gt.displayName="Navigation";var vt=dt.createContext(null);vt.displayName="Location";var bt=dt.createContext({outlet:null,matches:[],isDataRoute:!1});bt.displayName="Route";var wt=dt.createContext(null);wt.displayName="RouteError";var St=d(n("./node_modules/react/index.js")),kt=!0;function Et(e,{relative:t}={}){v(xt(),"useHref() may be used only in the context of a <Router> component.");let{basename:n,navigator:r}=St.useContext(gt),{hash:o,pathname:a,search:i}=Nt(e,{relative:t}),l=a;return"/"!==n&&(l="/"===a?n:J([n,a])),r.createHref({pathname:l,search:i,hash:o})}function xt(){return null!=St.useContext(vt)}function Rt(){return v(xt(),"useLocation() may be used only in the context of a <Router> component."),St.useContext(vt).location}function Ct(){return St.useContext(vt).navigationType}function Tt(e){v(xt(),"useMatch() may be used only in the context of a <Router> component.");let{pathname:t}=Rt();return St.useMemo((()=>$(e,B(t))),[t,e])}var _t="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function Pt(e){St.useContext(gt).static||St.useLayoutEffect(e)}function Lt(){let{isDataRoute:e}=St.useContext(bt);return e?function(){let{router:e}=Wt("useNavigate"),t=qt("useNavigate"),n=St.useRef(!1);return Pt((()=>{n.current=!0})),St.useCallback((async(r,o={})=>{b(n.current,_t),n.current&&("number"==typeof r?e.navigate(r):await e.navigate(r,{fromRouteId:t,...o}))}),[e,t])}():function(){v(xt(),"useNavigate() may be used only in the context of a <Router> component.");let e=St.useContext(ft),{basename:t,navigator:n}=St.useContext(gt),{matches:r}=St.useContext(bt),{pathname:o}=Rt(),a=JSON.stringify(Q(r)),i=St.useRef(!1);return Pt((()=>{i.current=!0})),St.useCallback(((r,l={})=>{if(b(i.current,_t),!i.current)return;if("number"==typeof r)return void n.go(r);let s=G(r,JSON.parse(a),o,"path"===l.relative);null==e&&"/"!==t&&(s.pathname="/"===s.pathname?t:J([t,s.pathname])),(l.replace?n.replace:n.push)(s,l.state,l)}),[t,n,a,o,e])}()}var Ot=St.createContext(null);function Dt(){return St.useContext(Ot)}function At(e){let t=St.useContext(bt).outlet;return t?St.createElement(Ot.Provider,{value:e},t):t}function Mt(){let{matches:e}=St.useContext(bt),t=e[e.length-1];return t?t.params:{}}function Nt(e,{relative:t}={}){let{matches:n}=St.useContext(bt),{pathname:r}=Rt(),o=JSON.stringify(Q(n));return St.useMemo((()=>G(e,JSON.parse(o),r,"path"===t)),[e,o,r,t])}function It(e,t){return Ft(e,t)}function Ft(e,t,n,r){v(xt(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:o,static:a}=St.useContext(gt),{matches:i}=St.useContext(bt),l=i[i.length-1],s=l?l.params:{},u=l?l.pathname:"/",c=l?l.pathnameBase:"/",d=l&&l.route;if(kt){let e=d&&d.path||"";an(u,!d||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${u}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let f,p=Rt();if(t){let e="string"==typeof t?E(t):t;v("/"===c||e.pathname?.startsWith(c),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${c}" but pathname "${e.pathname}" was given in the \`location\` prop.`),f=e}else f=p;let h=f.pathname||"/",m=h;if("/"!==c){let e=c.replace(/^\//,"").split("/");m="/"+h.replace(/^\//,"").split("/").slice(e.length).join("/")}let y=!a&&n&&n.matches&&n.matches.length>0?n.matches:T(e,{pathname:m});kt&&(b(d||null!=y,`No routes matched location "${f.pathname}${f.search}${f.hash}" `),b(null==y||void 0!==y[y.length-1].route.element||void 0!==y[y.length-1].route.Component||void 0!==y[y.length-1].route.lazy,`Matched leaf route at location "${f.pathname}${f.search}${f.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`));let g=$t(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:J([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:J([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,n,r);return t&&g?St.createElement(vt.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...f},navigationType:"POP"}},g):g}function jt(){let e=Zt(),t=ie(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:r},a={padding:"2px 4px",backgroundColor:r},i=null;return kt&&(console.error("Error handled by React Router default ErrorBoundary:",e),i=St.createElement(St.Fragment,null,St.createElement("p",null,"💿 Hey developer 👋"),St.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",St.createElement("code",{style:a},"ErrorBoundary")," or"," ",St.createElement("code",{style:a},"errorElement")," prop on your route."))),St.createElement(St.Fragment,null,St.createElement("h2",null,"Unexpected Application Error!"),St.createElement("h3",{style:{fontStyle:"italic"}},t),n?St.createElement("pre",{style:o},n):null,i)}var zt=St.createElement(jt,null),Ut=class extends St.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?St.createElement(bt.Provider,{value:this.props.routeContext},St.createElement(wt.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function Ht({routeContext:e,match:t,children:n}){let r=St.useContext(ft);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),St.createElement(bt.Provider,{value:e},n)}function $t(e,t=[],n=null,r=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let o=e,a=n?.errors;if(null!=a){let e=o.findIndex((e=>e.route.id&&void 0!==a?.[e.route.id]));v(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(a).join(",")}`),o=o.slice(0,Math.min(o.length,e+1))}let i=!1,l=-1;if(n)for(let e=0;e<o.length;e++){let t=o[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(l=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){i=!0,o=l>=0?o.slice(0,l+1):[o[0]];break}}}return o.reduceRight(((e,r,s)=>{let u,c=!1,d=null,f=null;n&&(u=a&&r.route.id?a[r.route.id]:void 0,d=r.route.errorElement||zt,i&&(l<0&&0===s?(an("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),c=!0,f=null):l===s&&(c=!0,f=r.route.hydrateFallbackElement||null)));let p=t.concat(o.slice(0,s+1)),h=()=>{let t;return t=u?d:c?f:r.route.Component?St.createElement(r.route.Component,null):r.route.element?r.route.element:e,St.createElement(Ht,{match:r,routeContext:{outlet:e,matches:p,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===s)?St.createElement(Ut,{location:n.location,revalidation:n.revalidation,component:d,error:u,children:h(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):h()}),null)}function Bt(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function Wt(e){let t=St.useContext(ft);return v(t,Bt(e)),t}function Vt(e){let t=St.useContext(pt);return v(t,Bt(e)),t}function qt(e){let t=function(e){let t=St.useContext(bt);return v(t,Bt(e)),t}(e),n=t.matches[t.matches.length-1];return v(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}function Yt(){return Vt("useNavigation").navigation}function Qt(){let e=Wt("useRevalidator"),t=Vt("useRevalidator");return St.useMemo((()=>({async revalidate(){await e.router.revalidate()},state:t.revalidation})),[e.router,t.revalidation])}function Gt(){let{matches:e,loaderData:t}=Vt("useMatches");return St.useMemo((()=>e.map((e=>P(e,t)))),[e,t])}function Jt(){let e=Vt("useLoaderData"),t=qt("useLoaderData");return e.loaderData[t]}function Xt(e){return Vt("useRouteLoaderData").loaderData[e]}function Kt(){let e=Vt("useActionData"),t=qt("useLoaderData");return e.actionData?e.actionData[t]:void 0}function Zt(){let e=St.useContext(wt),t=Vt("useRouteError"),n=qt("useRouteError");return void 0!==e?e:t.errors?.[n]}function en(){let e=St.useContext(yt);return e?._data}function tn(){let e=St.useContext(yt);return e?._error}var nn=0;function rn(e){let{router:t,basename:n}=Wt("useBlocker"),r=Vt("useBlocker"),[o,a]=St.useState(""),i=St.useCallback((t=>{if("function"!=typeof e)return!!e;if("/"===n)return e(t);let{currentLocation:r,nextLocation:o,historyAction:a}=t;return e({currentLocation:{...r,pathname:W(r.pathname,n)||r.pathname},nextLocation:{...o,pathname:W(o.pathname,n)||o.pathname},historyAction:a})}),[n,e]);return St.useEffect((()=>{let e=String(++nn);return a(e),()=>t.deleteBlocker(e)}),[t]),St.useEffect((()=>{""!==o&&t.getBlocker(o,i)}),[t,o,i]),o&&r.blockers.has(o)?r.blockers.get(o):me}var on={};function an(e,t,n){t||on[e]||(on[e]=!0,b(!1,n))}var ln={};function sn(e,t){e||ln[t]||(ln[t]=!0,console.warn(t))}var un=!0;function cn(e){let t={hasErrorBoundary:e.hasErrorBoundary||null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&(un&&e.element&&b(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(t,{element:ct.createElement(e.Component),Component:void 0})),e.HydrateFallback&&(un&&e.hydrateFallbackElement&&b(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(t,{hydrateFallbackElement:ct.createElement(e.HydrateFallback),HydrateFallback:void 0})),e.ErrorBoundary&&(un&&e.errorElement&&b(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(t,{errorElement:ct.createElement(e.ErrorBoundary),ErrorBoundary:void 0})),t}function dn(e,t){return we({basename:t?.basename,future:t?.future,history:m({initialEntries:t?.initialEntries,initialIndex:t?.initialIndex}),hydrationData:t?.hydrationData,routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation}).initialize()}var fn=class{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}};function pn({router:e,flushSync:t}){let[n,r]=ct.useState(e.state),[o,a]=ct.useState(),[i,l]=ct.useState({isTransitioning:!1}),[s,u]=ct.useState(),[c,d]=ct.useState(),[f,p]=ct.useState(),h=ct.useRef(new Map),m=ct.useCallback(((n,{deletedFetchers:o,flushSync:i,viewTransitionOpts:f})=>{n.fetchers.forEach(((e,t)=>{void 0!==e.data&&h.current.set(t,e.data)})),o.forEach((e=>h.current.delete(e))),sn(!1===i||null!=t,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let m=null!=e.window&&null!=e.window.document&&"function"==typeof e.window.document.startViewTransition;if(sn(null==f||m,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),f&&m){if(t&&i){t((()=>{c&&(s&&s.resolve(),c.skipTransition()),l({isTransitioning:!0,flushSync:!0,currentLocation:f.currentLocation,nextLocation:f.nextLocation})}));let o=e.window.document.startViewTransition((()=>{t((()=>r(n)))}));return o.finished.finally((()=>{t((()=>{u(void 0),d(void 0),a(void 0),l({isTransitioning:!1})}))})),void t((()=>d(o)))}c?(s&&s.resolve(),c.skipTransition(),p({state:n,currentLocation:f.currentLocation,nextLocation:f.nextLocation})):(a(n),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}))}else t&&i?t((()=>r(n))):ct.startTransition((()=>r(n)))}),[e.window,t,c,s]);ct.useLayoutEffect((()=>e.subscribe(m)),[e,m]),ct.useEffect((()=>{i.isTransitioning&&!i.flushSync&&u(new fn)}),[i]),ct.useEffect((()=>{if(s&&o&&e.window){let t=o,n=s.promise,i=e.window.document.startViewTransition((async()=>{ct.startTransition((()=>r(t))),await n}));i.finished.finally((()=>{u(void 0),d(void 0),a(void 0),l({isTransitioning:!1})})),d(i)}}),[o,s,e.window]),ct.useEffect((()=>{s&&o&&n.location.key===o.location.key&&s.resolve()}),[s,c,n.location,o]),ct.useEffect((()=>{!i.isTransitioning&&f&&(a(f.state),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}),p(void 0))}),[i.isTransitioning,f]);let y=ct.useMemo((()=>({createHref:e.createHref,encodeLocation:e.encodeLocation,go:t=>e.navigate(t),push:(t,n,r)=>e.navigate(t,{state:n,preventScrollReset:r?.preventScrollReset}),replace:(t,n,r)=>e.navigate(t,{replace:!0,state:n,preventScrollReset:r?.preventScrollReset})})),[e]),g=e.basename||"/",v=ct.useMemo((()=>({router:e,navigator:y,static:!1,basename:g})),[e,y,g]);return ct.createElement(ct.Fragment,null,ct.createElement(ft.Provider,{value:v},ct.createElement(pt.Provider,{value:n},ct.createElement(mt.Provider,{value:h.current},ct.createElement(ht.Provider,{value:i},ct.createElement(bn,{basename:g,location:n.location,navigationType:n.historyAction,navigator:y},ct.createElement(hn,{routes:e.routes,future:e.future,state:n})))))),null)}var hn=ct.memo((function({routes:e,future:t,state:n}){return Ft(e,void 0,n,t)}));function mn({basename:e,children:t,initialEntries:n,initialIndex:r}){let o=ct.useRef();null==o.current&&(o.current=m({initialEntries:n,initialIndex:r,v5Compat:!0}));let a=o.current,[i,l]=ct.useState({action:a.action,location:a.location}),s=ct.useCallback((e=>{ct.startTransition((()=>l(e)))}),[l]);return ct.useLayoutEffect((()=>a.listen(s)),[a,s]),ct.createElement(bn,{basename:e,children:t,location:i.location,navigationType:i.action,navigator:a})}function yn({to:e,replace:t,state:n,relative:r}){v(xt(),"<Navigate> may be used only in the context of a <Router> component.");let{static:o}=ct.useContext(gt);b(!o,"<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");let{matches:a}=ct.useContext(bt),{pathname:i}=Rt(),l=Lt(),s=G(e,Q(a),i,"path"===r),u=JSON.stringify(s);return ct.useEffect((()=>{l(JSON.parse(u),{replace:t,state:n,relative:r})}),[l,u,r,t,n]),null}function gn(e){return At(e.context)}function vn(e){v(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function bn({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:o,static:a=!1}){v(!xt(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),l=ct.useMemo((()=>({basename:i,navigator:o,static:a,future:{}})),[i,o,a]);"string"==typeof n&&(n=E(n));let{pathname:s="/",search:u="",hash:c="",state:d=null,key:f="default"}=n,p=ct.useMemo((()=>{let e=W(s,i);return null==e?null:{location:{pathname:e,search:u,hash:c,state:d,key:f},navigationType:r}}),[i,s,u,c,d,f,r]);return b(null!=p,`<Router basename="${i}"> is not able to match the URL "${s}${u}${c}" because it does not start with the basename, so the <Router> won't render anything.`),null==p?null:ct.createElement(gt.Provider,{value:l},ct.createElement(vt.Provider,{children:t,value:p}))}function wn({children:e,location:t}){return It(xn(e),t)}function Sn({children:e,errorElement:t,resolve:n}){return ct.createElement(kn,{resolve:n,errorElement:t},ct.createElement(En,null,e))}var kn=class extends ct.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,o=0;if(n instanceof Promise)if(this.state.error){o=2;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,o="_error"in r?2:"_data"in r?1:0):(o=0,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else o=1,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(2===o&&!t)throw r._error;if(2===o)return ct.createElement(yt.Provider,{value:r,children:t});if(1===o)return ct.createElement(yt.Provider,{value:r,children:e});throw r}};function En({children:e}){let t=en(),n="function"==typeof e?e(t):e;return ct.createElement(ct.Fragment,null,n)}function xn(e,t=[]){let n=[];return ct.Children.forEach(e,((e,r)=>{if(!ct.isValidElement(e))return;let o=[...t,r];if(e.type===ct.Fragment)return void n.push.apply(n,xn(e.props.children,o));v(e.type===vn,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),v(!e.props.index||!e.props.children,"An index route cannot have child routes.");let a={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=xn(e.props.children,o)),n.push(a)})),n}var Rn=xn;function Cn(e){return $t(e)}var Tn=d(n("./node_modules/react/index.js")),_n="get",Pn="application/x-www-form-urlencoded";function Ln(e){return null!=e&&"string"==typeof e.tagName}function On(e=""){return new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}var Dn=null,An=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function Mn(e){return null==e||An.has(e)?e:(b(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${Pn}"`),null)}var Nn,In=d(n("./node_modules/react/index.js"));function Fn(e,t){if(!1===e||null==e)throw new Error(t)}async function jn(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}async function zn(e,t){if(!e.css&&!t.links||!function(){if(void 0!==Nn)return Nn;let e=document.createElement("link");return Nn=e.relList.supports("preload"),e=null,Nn}())return;let n=[];if(e.css&&n.push(...e.css.map((e=>({rel:"stylesheet",href:e})))),t.links&&n.push(...t.links()),0===n.length)return;let r=[];for(let e of n)Hn(e)||"stylesheet"!==e.rel||r.push({...e,rel:"preload",as:"style"});let o=r.filter((e=>(!e.media||window.matchMedia(e.media).matches)&&!document.querySelector(`link[rel="stylesheet"][href="${e.href}"]`)));await Promise.all(o.map(Un))}async function Un(e){return new Promise((t=>{let n=document.createElement("link");function r(){document.head.contains(n)&&document.head.removeChild(n)}Object.assign(n,e),n.onload=()=>{r(),t()},n.onerror=()=>{r(),t()},document.head.appendChild(n)}))}function Hn(e){return null!=e&&"string"==typeof e.page}function $n(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function Bn(e,t,n,r,o,a){let i=(e,t)=>!n[t]||e.route.id!==n[t].route.id,l=(e,t)=>n[t].pathname!==e.pathname||n[t].route.path?.endsWith("*")&&n[t].params["*"]!==e.params["*"];return"assets"===a?t.filter(((e,t)=>i(e,t)||l(e,t))):"data"===a?t.filter(((t,a)=>{let s=r.routes[t.route.id];if(!s||!s.hasLoader)return!1;if(i(t,a)||l(t,a))return!0;if(t.route.shouldRevalidate){let r=t.route.shouldRevalidate({currentUrl:new URL(o.pathname+o.search+o.hash,window.origin),currentParams:n[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:t.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0})):[]}function Wn(e){return[...new Set(e)]}function Vn(e,t){let n=new Set,r=new Set(t);return e.reduce(((e,o)=>{if(t&&!Hn(o)&&"script"===o.as&&o.href&&r.has(o.href))return e;let a=JSON.stringify(function(e){let t={},n=Object.keys(e).sort();for(let r of n)t[r]=e[r];return t}(o));return n.has(a)||(n.add(a),e.push({key:a,link:o})),e}),[])}var qn={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},Yn=/[&><\u2028\u2029]/g;function Qn(e){return{__html:e}}var Gn=d(n("./node_modules/react/index.js")),Jn=n("./node_modules/turbo-stream/dist/turbo-stream.js");async function Xn(e){let t={signal:e.signal};if("GET"!==e.method){t.method=e.method;let n=e.headers.get("Content-Type");n&&/\bapplication\/json\b/.test(n)?(t.headers={"Content-Type":n},t.body=JSON.stringify(await e.json())):n&&/\btext\/plain\b/.test(n)?(t.headers={"Content-Type":n},t.body=await e.text()):n&&/\bapplication\/x-www-form-urlencoded\b/.test(n)?t.body=new URLSearchParams(await e.text()):t.body=await e.formData()}return t}var Kn=Symbol("SingleFetchRedirect");function Zn({context:e,identifier:t,reader:n,textDecoder:r,nonce:o}){if(!e.renderMeta||!e.renderMeta.didRenderScripts)return null;e.renderMeta.streamCache||(e.renderMeta.streamCache={});let{streamCache:a}=e.renderMeta,i=a[t];if(i||(i=a[t]=n.read().then((e=>{a[t].result={done:e.done,value:r.decode(e.value,{stream:!0})}})).catch((e=>{a[t].error=e}))),i.error)throw i.error;if(void 0===i.result)throw i;let{done:l,value:s}=i.result,u=s?Gn.createElement("script",{nonce:o,dangerouslySetInnerHTML:{__html:`window.__reactRouterContext.streamController.enqueue(${c=JSON.stringify(s),c.replace(Yn,(e=>qn[e]))});`}}):null;var c;return l?Gn.createElement(Gn.Fragment,null,u,Gn.createElement("script",{nonce:o,dangerouslySetInnerHTML:{__html:"window.__reactRouterContext.streamController.close();"}})):Gn.createElement(Gn.Fragment,null,u,Gn.createElement(Gn.Suspense,null,Gn.createElement(Zn,{context:e,identifier:t+1,reader:n,textDecoder:r,nonce:o})))}function er(e,t,n){return async({request:r,matches:o,fetcherKey:a})=>"GET"!==r.method?async function(e,t){let n=t.find((e=>e.shouldLoad));Fn(n,"No action match found");let r,o=await n.resolve((async t=>await t((async()=>{let t=rr(e.url),o=await Xn(e),{data:a,status:i}=await or(t,o);return r=i,lr(a,n.route.id)}))));return Ze(o.result)||ie(o.result)?{[n.route.id]:o}:{[n.route.id]:{type:o.type,result:te(o.result,r)}}}(r,o):a?async function(e,t){let n=t.find((e=>e.shouldLoad));Fn(n,"No fetcher match found");let r=await n.resolve((async t=>tr(t,nr(rr(e.url)),await Xn(e),n.route.id)));return{[n.route.id]:r}}(r,o):async function(e,t,n,r,o){let a=new Set,i=!1,l=o.map((()=>sr())),s=Promise.all(l.map((e=>e.promise))),u=sr(),c=nr(rr(r.url)),d=await Xn(r),f={},p=Promise.all(o.map((async(r,o)=>r.resolve((async s=>{l[o].resolve();let p=e.routes[r.route.id];if(!r.shouldLoad){if(!n.state.initialized)return;if(r.route.id in n.state.loaderData&&p&&p.hasLoader&&t[r.route.id]?.shouldRevalidate)return void(i=!0)}if(p&&p.hasClientLoader){p.hasLoader&&(i=!0);try{let e=await tr(s,c,d,r.route.id);f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}else{p&&p.hasLoader&&a.add(r.route.id);try{let e=await s((async()=>ir(await u.promise,r.route.id)));f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}})))));if(await s,n.state.initialized&&0!==a.size||window.__reactRouterHdrActive)try{i&&a.size>0&&c.searchParams.set("_routes",o.filter((e=>a.has(e.route.id))).map((e=>e.route.id)).join(","));let e=await or(c,d);u.resolve(e.data)}catch(e){u.reject(e)}else u.resolve({});return await p,f}(e,t,n(),r,o)}function tr(e,t,n,r){return e((async()=>{let e=new URL(t);e.searchParams.set("_routes",r);let{data:o}=await or(e,n);return ir(o,r)}))}function nr(e){let t=e.searchParams.getAll("index");e.searchParams.delete("index");let n=[];for(let e of t)e&&n.push(e);for(let t of n)e.searchParams.append("index",t);return e}function rr(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}async function or(e,t){let n=await fetch(e,t);if(404===n.status&&!n.headers.has("X-Remix-Response"))throw new ae(404,"Not Found",!0);if(new Set([100,101,204,205]).has(n.status))return t.method&&"GET"!==t.method?{status:n.status,data:{data:void 0}}:{status:n.status,data:{}};Fn(n.body,"No response body to decode");try{let e=await ar(n.body,window);return{status:n.status,data:e.value}}catch(e){throw new Error("Unable to decode turbo-stream response")}}function ar(e,t){return(0,Jn.decode)(e,{plugins:[(e,...n)=>{if("SanitizedError"===e){let[e,r,o]=n,a=Error;e&&e in t&&"function"==typeof t[e]&&(a=t[e]);let i=new a(r);return i.stack=o,{value:i}}if("ErrorResponse"===e){let[e,t,r]=n;return{value:new ae(t,r,e)}}return"SingleFetchRedirect"===e?{value:{[Kn]:n[0]}}:"SingleFetchClassInstance"===e?{value:n[0]}:"SingleFetchFallback"===e?{value:void 0}:void 0}]})}function ir(e,t){let n=e[Kn];return n?lr(n,t):void 0!==e[t]?lr(e[t],t):null}function lr(e,t){if("error"in e)throw e.error;if("redirect"in e){let t={};throw e.revalidate&&(t["X-Remix-Revalidate"]="yes"),e.reload&&(t["X-Remix-Reload-Document"]="yes"),e.replace&&(t["X-Remix-Replace"]="yes"),ne(e.redirect,{status:e.status,headers:t})}if("data"in e)return e.data;throw new Error(`No response found for routeId "${t}"`)}function sr(){let e,t,n=new Promise(((r,o)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{o(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}var ur=d(n("./node_modules/react/index.js")),cr=d(n("./node_modules/react/index.js")),dr=d(n("./node_modules/react/index.js")),fr=class extends dr.Component{constructor(e){super(e),this.state={error:e.error||null,location:e.location}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error||null,location:e.location}:{error:e.error||t.error,location:t.location}}render(){return this.state.error?dr.createElement(pr,{error:this.state.error,isOutsideRemixApp:!0}):this.props.children}};function pr({error:e,isOutsideRemixApp:t}){console.error(e);let n,r=dr.createElement("script",{dangerouslySetInnerHTML:{__html:'\n        console.log(\n          "💿 Hey developer 👋. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."\n        );\n      '}});if(ie(e))return dr.createElement(hr,{title:"Unhandled Thrown Response!"},dr.createElement("h1",{style:{fontSize:"24px"}},e.status," ",e.statusText),r);if(e instanceof Error)n=e;else{let t=null==e?"Unknown Error":"object"==typeof e&&"toString"in e?e.toString():JSON.stringify(e);n=new Error(t)}return dr.createElement(hr,{title:"Application Error!",isOutsideRemixApp:t},dr.createElement("h1",{style:{fontSize:"24px"}},"Application Error"),dr.createElement("pre",{style:{padding:"2rem",background:"hsla(10, 50%, 50%, 0.1)",color:"red",overflow:"auto"}},n.stack),r)}function hr({title:e,renderScripts:t,isOutsideRemixApp:n,children:r}){let{routeModules:o}=jr();return o.root?.Layout&&!n?r:dr.createElement("html",{lang:"en"},dr.createElement("head",null,dr.createElement("meta",{charSet:"utf-8"}),dr.createElement("meta",{name:"viewport",content:"width=device-width,initial-scale=1,viewport-fit=cover"}),dr.createElement("title",null,e)),dr.createElement("body",null,dr.createElement("main",{style:{fontFamily:"system-ui, sans-serif",padding:"2rem"}},r,t?dr.createElement(qr,null):null)))}var mr=d(n("./node_modules/react/index.js"));function yr(){return mr.createElement(hr,{title:"Loading...",renderScripts:!0},mr.createElement("script",{dangerouslySetInnerHTML:{__html:'\n              console.log(\n                "💿 Hey developer 👋. You can provide a way better UX than this " +\n                "when your app is loading JS modules and/or running `clientLoader` " +\n                "functions. Check out https://remix.run/route/hydrate-fallback " +\n                "for more information."\n              );\n            '}}))}function gr(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function vr(e,t,n){let r=Rr(t),o=!t.HydrateFallback||n&&"root"!==e.id?"root"===e.id?yr:void 0:t.HydrateFallback,a=t.ErrorBoundary?t.ErrorBoundary:"root"===e.id?()=>cr.createElement(pr,{error:Zt()}):void 0;return"root"===e.id&&t.Layout?{...r?{element:cr.createElement(t.Layout,null,cr.createElement(r,null))}:{Component:r},...a?{errorElement:cr.createElement(t.Layout,null,cr.createElement(a,null))}:{ErrorBoundary:a},...o?{hydrateFallbackElement:cr.createElement(t.Layout,null,cr.createElement(o,null))}:{HydrateFallback:o}}:{Component:r,ErrorBoundary:a,HydrateFallback:o}}function br(e,t,n,r,o="",a=gr(e),i=Promise.resolve({Component:()=>null})){return(a[o]||[]).map((o=>{let l=t[o.id];Fn(l,"No `routeModule` available to create server routes");let s={...vr(o,l,r),caseSensitive:o.caseSensitive,id:o.id,index:o.index,path:o.path,handle:l.handle,lazy:r?()=>i:void 0,loader:o.hasLoader||o.hasClientLoader?()=>null:void 0},u=br(e,t,n,r,o.id,a,i);return u.length>0&&(s.children=u),s}))}function wr(e,t,n,r,o,a){return Er(t,n,r,a,"",gr(t),e)}function Sr(e,t,n){if(n){let n=`You cannot call ${"action"===e?"serverAction()":"serverLoader()"} in SPA Mode (routeId: "${t.id}")`;throw console.error(n),new ae(400,"Bad Request",new Error(n),!0)}let r=`You are trying to call ${"action"===e?"serverAction()":"serverLoader()"} on a route that does not have a server ${e} (routeId: "${t.id}")`;if("loader"===e&&!t.hasLoader||"action"===e&&!t.hasAction)throw console.error(r),new ae(400,"Bad Request",new Error(r),!0)}function kr(e,t){let n="clientAction"===e?"a":"an",r=`Route "${t}" does not have ${n} ${e}, but you are trying to submit to it. To fix this, please add ${n} \`${e}\` function to the route`;throw console.error(r),new ae(405,"Method Not Allowed",new Error(r),!0)}function Er(e,t,n,r,o="",a=gr(e),i){return(a[o]||[]).map((o=>{let l=t[o.id];function s(e){return Fn("function"==typeof e,"No single fetch function available for route handler"),e()}function u(e){return o.hasLoader?s(e):Promise.resolve(null)}function c(e){if(!o.hasAction)throw kr("action",o.id);return s(e)}async function d(e){let n=t[o.id],r=n?zn(o,n):Promise.resolve();try{return e()}finally{await r}}let f={id:o.id,index:o.index,path:o.path};if(l){Object.assign(f,{...f,...vr(o,l,r),handle:l.handle,shouldRevalidate:xr(l,o.id,i)});let e=n&&n.loaderData&&o.id in n.loaderData,t=e?n?.loaderData?.[o.id]:void 0,a=n&&n.errors&&o.id in n.errors,s=a?n?.errors?.[o.id]:void 0,p=null==i&&(!0===l.clientLoader?.hydrate||!o.hasLoader);f.loader=async({request:n,params:i},c)=>{try{return await d((async()=>(Fn(l,"No `routeModule` available for critical-route loader"),l.clientLoader?l.clientLoader({request:n,params:i,async serverLoader(){if(Sr("loader",o,r),p){if(e)return t;if(a)throw s}return u(c)}}):r?null:u(c))))}finally{p=!1}},f.loader.hydrate=Cr(o,l,r),f.action=({request:e,params:t},n)=>d((async()=>{if(Fn(l,"No `routeModule` available for critical-route action"),!l.clientAction){if(r)throw kr("clientAction",o.id);return c(n)}return l.clientAction({request:e,params:t,serverAction:async()=>(Sr("action",o,r),c(n))})}))}else o.hasClientLoader||(f.loader=({request:e},t)=>d((()=>r?Promise.resolve(null):u(t)))),o.hasClientAction||(f.action=({request:e},t)=>d((()=>{if(r)throw kr("clientAction",o.id);return c(t)}))),f.lazy=async()=>{let e=await async function(e,t){let n=await jn(e,t);return await zn(e,n),{Component:Rr(n),ErrorBoundary:n.ErrorBoundary,clientAction:n.clientAction,clientLoader:n.clientLoader,handle:n.handle,links:n.links,meta:n.meta,shouldRevalidate:n.shouldRevalidate}}(o,t),n={...e};if(e.clientLoader){let t=e.clientLoader;n.loader=(e,n)=>t({...e,serverLoader:async()=>(Sr("loader",o,r),u(n))})}if(e.clientAction){let t=e.clientAction;n.action=(e,n)=>t({...e,serverAction:async()=>(Sr("action",o,r),c(n))})}return{...n.loader?{loader:n.loader}:{},...n.action?{action:n.action}:{},hasErrorBoundary:n.hasErrorBoundary,shouldRevalidate:xr(n,o.id,i),handle:n.handle,Component:n.Component,ErrorBoundary:n.ErrorBoundary}};let p=Er(e,t,n,r,o.id,a,i);return p.length>0&&(f.children=p),f}))}function xr(e,t,n){if(n)return function(e,t,n){let r=!1;return o=>r?t?t(o):o.defaultShouldRevalidate:(r=!0,n.has(e))}(t,e.shouldRevalidate,n);if(e.shouldRevalidate){let t=e.shouldRevalidate;return e=>t({...e,defaultShouldRevalidate:!0})}return e.shouldRevalidate}function Rr(e){if(null!=e.default)return"object"==typeof e.default&&0===Object.keys(e.default).length?void 0:e.default}function Cr(e,t,n){return n&&"root"!==e.id||null!=t.clientLoader&&(!0===t.clientLoader.hydrate||!0!==e.hasLoader)}var Tr=new Set,_r=1e3,Pr=new Set,Lr=7680;function Or(e){return!e}function Dr(e,t,n,r){if(Or(n))return async({path:o,patch:a})=>{Pr.has(o)||await Mr([o],e,t,n,r,a)}}function Ar(e,t,n,r){ur.useEffect((()=>{if(!Or(r)||!0===navigator.connection?.saveData)return;function o(e){let t="FORM"===e.tagName?e.getAttribute("action"):e.getAttribute("href");if(!t)return;let n="A"===e.tagName?e.pathname:new URL(t,window.location.origin).pathname;Pr.has(n)||Tr.add(n)}async function a(){document.querySelectorAll("a[data-discover], form[data-discover]").forEach(o);let a=Array.from(Tr.keys()).filter((e=>!Pr.has(e)||(Tr.delete(e),!1)));if(0!==a.length)try{await Mr(a,t,n,r,e.basename,e.patchRoutes)}catch(e){console.error("Failed to fetch manifest patches",e)}}let i=function(e){let t;return(...n)=>{window.clearTimeout(t),t=window.setTimeout((()=>e(...n)),100)}}(a);a();let l=new MutationObserver((()=>i()));return l.observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["data-discover","href","action"]}),()=>l.disconnect()}),[r,t,n,e])}async function Mr(e,t,n,r,o,a){let i=`${null!=o?o:"/"}/__manifest`.replace(/\/+/g,"/"),l=new URL(i,window.location.origin);if(e.sort().forEach((e=>l.searchParams.append("p",e))),l.searchParams.set("version",t.version),l.toString().length>Lr)return void Tr.clear();let s=await fetch(l);if(!s.ok)throw new Error(`${s.status} ${s.statusText}`);if(s.status>=400)throw new Error(await s.text());let u=await s.json(),c=new Set(Object.keys(t.routes)),d=Object.values(u).reduce(((e,t)=>(t&&!c.has(t.id)&&(e[t.id]=t),e)),{});Object.assign(t.routes,d),e.forEach((e=>function(e,t){if(t.size>=_r){let e=t.values().next().value;t.delete(e)}t.add(e)}(e,Pr)));let f=new Set;Object.values(d).forEach((e=>{!e||e.parentId&&d[e.parentId]||f.add(e.parentId)})),f.forEach((e=>a(e||null,Er(d,n,null,r,e))))}function Nr(){let e=In.useContext(ft);return Fn(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function Ir(){let e=In.useContext(pt);return Fn(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}var Fr=In.createContext(void 0);function jr(){let e=In.useContext(Fr);return Fn(e,"You must render this element inside a <HydratedRouter> element"),e}function zr(e,t){return n=>{e&&e(n),n.defaultPrevented||t(n)}}function Ur(e,t,n){if(n&&!Vr)return[e[0]];if(t){let n=e.findIndex((e=>void 0!==t[e.route.id]));return e.slice(0,n+1)}return e}function Hr(){let{isSpaMode:e,manifest:t,routeModules:n,criticalCss:r}=jr(),{errors:o,matches:a}=Ir(),i=Ur(a,o,e),l=In.useMemo((()=>function(e,t,n){let r=e.map((e=>{let r=t[e.route.id],o=n.routes[e.route.id];return[o&&o.css?o.css.map((e=>({rel:"stylesheet",href:e}))):[],r?.links?.()||[]]})).flat(2),o=function(e,t){return Wn(e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1))}(e,n);return Vn(r,o)}(i,n,t)),[i,n,t]);return In.createElement(In.Fragment,null,r?In.createElement("style",{dangerouslySetInnerHTML:{__html:r}}):null,l.map((({key:e,link:t})=>Hn(t)?In.createElement($r,{key:e,...t}):In.createElement("link",{key:e,...t}))))}function $r({page:e,...t}){let{router:n}=Nr(),r=In.useMemo((()=>T(n.routes,e,n.basename)),[n.routes,e,n.basename]);return r?In.createElement(Br,{page:e,matches:r,...t}):null}function Br({page:e,matches:t,...n}){let r=Rt(),{manifest:o,routeModules:a}=jr(),{loaderData:i,matches:l}=Ir(),s=In.useMemo((()=>Bn(e,t,l,o,r,"data")),[e,t,l,o,r]),u=In.useMemo((()=>Bn(e,t,l,o,r,"assets")),[e,t,l,o,r]),c=In.useMemo((()=>{if(e===r.pathname+r.search+r.hash)return[];let n=new Set,l=!1;if(t.forEach((e=>{let t=o.routes[e.route.id];t&&t.hasLoader&&(!s.some((t=>t.route.id===e.route.id))&&e.route.id in i&&a[e.route.id]?.shouldRevalidate||t.hasClientLoader?l=!0:n.add(e.route.id))})),0===n.size)return[];let u=rr(e);return l&&n.size>0&&u.searchParams.set("_routes",t.filter((e=>n.has(e.route.id))).map((e=>e.route.id)).join(",")),[u.pathname+u.search]}),[i,r,o,s,t,e,a]),d=In.useMemo((()=>function(e,t){return Wn(e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1))}(u,o)),[u,o]),f=function(e){let{manifest:t,routeModules:n}=jr(),[r,o]=In.useState([]);return In.useEffect((()=>{let r=!1;return async function(e,t,n){let r=await Promise.all(e.map((async e=>{let r=t.routes[e.route.id];if(r){let e=await jn(r,n);return e.links?e.links():[]}return[]})));return Vn(r.flat(1).filter($n).filter((e=>"stylesheet"===e.rel||"preload"===e.rel)).map((e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"})))}(e,t,n).then((e=>{r||o(e)})),()=>{r=!0}}),[e,t,n]),r}(u);return In.createElement(In.Fragment,null,c.map((e=>In.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...n}))),d.map((e=>In.createElement("link",{key:e,rel:"modulepreload",href:e,...n}))),f.map((({key:e,link:t})=>In.createElement("link",{key:e,...t}))))}function Wr(){let{isSpaMode:e,routeModules:t}=jr(),{errors:n,matches:r,loaderData:o}=Ir(),a=Rt(),i=Ur(r,n,e),l=null;n&&(l=n[i[i.length-1].route.id]);let s=[],u=null,c=[];for(let e=0;e<i.length;e++){let n=i[e],r=n.route.id,d=o[r],f=n.params,p=t[r],h=[],m={id:r,data:d,meta:[],params:n.params,pathname:n.pathname,handle:n.route.handle,error:l};if(c[e]=m,p?.meta?h="function"==typeof p.meta?p.meta({data:d,params:f,location:a,matches:c,error:l}):Array.isArray(p.meta)?[...p.meta]:p.meta:u&&(h=[...u]),h=h||[],!Array.isArray(h))throw new Error("The route at "+n.route.path+" returns an invalid value. All route meta functions must return an array of meta objects.\n\nTo reference the meta function API, see https://remix.run/route/meta");m.meta=h,c[e]=m,s=[...h],u=s}return In.createElement(In.Fragment,null,s.flat().map((e=>{if(!e)return null;if("tagName"in e){let{tagName:t,...n}=e;if(!function(e){return"string"==typeof e&&/^(meta|link)$/.test(e)}(t))return console.warn(`A meta object uses an invalid tagName: ${t}. Expected either 'link' or 'meta'`),null;let r=t;return In.createElement(r,{key:JSON.stringify(n),...n})}if("title"in e)return In.createElement("title",{key:"title"},String(e.title));if("charset"in e&&(e.charSet??(e.charSet=e.charset),delete e.charset),"charSet"in e&&null!=e.charSet)return"string"==typeof e.charSet?In.createElement("meta",{key:"charSet",charSet:e.charSet}):null;if("script:ld+json"in e)try{let t=JSON.stringify(e["script:ld+json"]);return In.createElement("script",{key:`script:ld+json:${t}`,type:"application/ld+json",dangerouslySetInnerHTML:{__html:t}})}catch(e){return null}return In.createElement("meta",{key:JSON.stringify(e),...e})})))}Fr.displayName="FrameworkContext";var Vr=!1;function qr(e){let{manifest:t,serverHandoffString:n,isSpaMode:r,renderMeta:o}=jr(),{router:a,static:i,staticContext:l}=Nr(),{matches:s}=Ir(),u=Or(r);o&&(o.didRenderScripts=!0);let c=Ur(s,null,r);In.useEffect((()=>{Vr=!0}),[]);let d=In.useMemo((()=>{let r=l?`window.__reactRouterContext = ${n};window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());`:" ",o=i?`${t.hmr?.runtime?`import ${JSON.stringify(t.hmr.runtime)};`:""}${u?"":`import ${JSON.stringify(t.url)}`};\n${c.map(((e,n)=>`import * as route${n} from ${JSON.stringify(t.routes[e.route.id].module)};`)).join("\n")}\n  ${u?`window.__reactRouterManifest = ${JSON.stringify(function(e,t){let n=new Set(t.state.matches.map((e=>e.route.id))),r=t.state.location.pathname.split("/").filter(Boolean),o=["/"];for(r.pop();r.length>0;)o.push(`/${r.join("/")}`),r.pop();o.forEach((e=>{let r=T(t.routes,e,t.basename);r&&r.forEach((e=>n.add(e.route.id)))}));let a=[...n].reduce(((t,n)=>Object.assign(t,{[n]:e.routes[n]})),{});return{...e,routes:a}}(t,a),null,2)};`:""}\n  window.__reactRouterRouteModules = {${c.map(((e,t)=>`${JSON.stringify(e.route.id)}:route${t}`)).join(",")}};\n\nimport(${JSON.stringify(t.entry.module)});`:" ";return In.createElement(In.Fragment,null,In.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Qn(r),type:void 0}),In.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Qn(o),type:"module",async:!0}))}),[]),f=c.map((e=>{let n=t.routes[e.route.id];return n?(n.imports||[]).concat([n.module]):[]})).flat(1),p=Vr?[]:t.entry.imports.concat(f);return Vr?null:In.createElement(In.Fragment,null,u?null:In.createElement("link",{rel:"modulepreload",href:t.url,crossOrigin:e.crossOrigin}),In.createElement("link",{rel:"modulepreload",href:t.entry.module,crossOrigin:e.crossOrigin}),(h=p,[...new Set(h)]).map((t=>In.createElement("link",{key:t,rel:"modulepreload",href:t,crossOrigin:e.crossOrigin}))),d);var h}function Yr(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}var Qr="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{Qr&&(window.__reactRouterVersion="7.1.5")}catch(e){}function Gr(e,t){return we({basename:t?.basename,future:t?.future,history:y({window:t?.window}),hydrationData:t?.hydrationData||Xr(),routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation,window:t?.window}).initialize()}function Jr(e,t){return we({basename:t?.basename,future:t?.future,history:g({window:t?.window}),hydrationData:t?.hydrationData||Xr(),routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation,window:t?.window}).initialize()}function Xr(){let e=window?.__staticRouterHydrationData;return e&&e.errors&&(e={...e,errors:Kr(e.errors)}),e}function Kr(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new ae(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let o=new t(r.message);o.stack="",n[e]=o}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}function Zr({basename:e,children:t,window:n}){let r=Tn.useRef();null==r.current&&(r.current=y({window:n,v5Compat:!0}));let o=r.current,[a,i]=Tn.useState({action:o.action,location:o.location}),l=Tn.useCallback((e=>{Tn.startTransition((()=>i(e)))}),[i]);return Tn.useLayoutEffect((()=>o.listen(l)),[o,l]),Tn.createElement(bn,{basename:e,children:t,location:a.location,navigationType:a.action,navigator:o})}function eo({basename:e,children:t,window:n}){let r=Tn.useRef();null==r.current&&(r.current=g({window:n,v5Compat:!0}));let o=r.current,[a,i]=Tn.useState({action:o.action,location:o.location}),l=Tn.useCallback((e=>{Tn.startTransition((()=>i(e)))}),[i]);return Tn.useLayoutEffect((()=>o.listen(l)),[o,l]),Tn.createElement(bn,{basename:e,children:t,location:a.location,navigationType:a.action,navigator:o})}function to({basename:e,children:t,history:n}){let[r,o]=Tn.useState({action:n.action,location:n.location}),a=Tn.useCallback((e=>{Tn.startTransition((()=>o(e)))}),[o]);return Tn.useLayoutEffect((()=>n.listen(a)),[n,a]),Tn.createElement(bn,{basename:e,children:t,location:r.location,navigationType:r.action,navigator:n})}to.displayName="unstable_HistoryRouter";var no=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ro=Tn.forwardRef((function({onClick:e,discover:t="render",prefetch:n="none",relative:r,reloadDocument:o,replace:a,state:i,target:l,to:s,preventScrollReset:u,viewTransition:c,...d},f){let p,{basename:h}=Tn.useContext(gt),m="string"==typeof s&&no.test(s),y=!1;if("string"==typeof s&&m&&(p=s,Qr))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=W(t.pathname,h);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:y=!0}catch(e){b(!1,`<Link to="${s}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let g=Et(s,{relative:r}),[v,w,S]=function(e,t){let n=In.useContext(Fr),[r,o]=In.useState(!1),[a,i]=In.useState(!1),{onFocus:l,onBlur:s,onMouseEnter:u,onMouseLeave:c,onTouchStart:d}=t,f=In.useRef(null);In.useEffect((()=>{if("render"===e&&i(!0),"viewport"===e){let e=new IntersectionObserver((e=>{e.forEach((e=>{i(e.isIntersecting)}))}),{threshold:.5});return f.current&&e.observe(f.current),()=>{e.disconnect()}}}),[e]),In.useEffect((()=>{if(r){let e=setTimeout((()=>{i(!0)}),100);return()=>{clearTimeout(e)}}}),[r]);let p=()=>{o(!0)},h=()=>{o(!1),i(!1)};return n?"intent"!==e?[a,f,{}]:[a,f,{onFocus:zr(l,p),onBlur:zr(s,h),onMouseEnter:zr(u,p),onMouseLeave:zr(c,h),onTouchStart:zr(d,p)}]:[!1,f,{}]}(n,d),k=co(s,{replace:a,state:i,target:l,preventScrollReset:u,relative:r,viewTransition:c}),E=Tn.createElement("a",{...d,...S,href:p||g,onClick:y||o?e:function(t){e&&e(t),t.defaultPrevented||k(t)},ref:Yr(f,w),target:l,"data-discover":m||"render"!==t?void 0:"true"});return v&&!m?Tn.createElement(Tn.Fragment,null,E,Tn.createElement($r,{page:g})):E}));ro.displayName="Link";var oo=Tn.forwardRef((function({"aria-current":e="page",caseSensitive:t=!1,className:n="",end:r=!1,style:o,to:a,viewTransition:i,children:l,...s},u){let c=Nt(a,{relative:s.relative}),d=Rt(),f=Tn.useContext(pt),{navigator:p,basename:h}=Tn.useContext(gt),m=null!=f&&Ro(c)&&!0===i,y=p.encodeLocation?p.encodeLocation(c).pathname:c.pathname,g=d.pathname,v=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;t||(g=g.toLowerCase(),v=v?v.toLowerCase():null,y=y.toLowerCase()),v&&h&&(v=W(v,h)||v);const b="/"!==y&&y.endsWith("/")?y.length-1:y.length;let w,S=g===y||!r&&g.startsWith(y)&&"/"===g.charAt(b),k=null!=v&&(v===y||!r&&v.startsWith(y)&&"/"===v.charAt(y.length)),E={isActive:S,isPending:k,isTransitioning:m},x=S?e:void 0;w="function"==typeof n?n(E):[n,S?"active":null,k?"pending":null,m?"transitioning":null].filter(Boolean).join(" ");let R="function"==typeof o?o(E):o;return Tn.createElement(ro,{...s,"aria-current":x,className:w,ref:u,style:R,to:a,viewTransition:i},"function"==typeof l?l(E):l)}));oo.displayName="NavLink";var ao=Tn.forwardRef((({discover:e="render",fetcherKey:t,navigate:n,reloadDocument:r,replace:o,state:a,method:i=_n,action:l,onSubmit:s,relative:u,preventScrollReset:c,viewTransition:d,...f},p)=>{let h=mo(),m=yo(l,{relative:u}),y="get"===i.toLowerCase()?"get":"post",g="string"==typeof l&&no.test(l);return Tn.createElement("form",{ref:p,method:y,action:m,onSubmit:r?s:e=>{if(s&&s(e),e.defaultPrevented)return;e.preventDefault();let r=e.nativeEvent.submitter,l=r?.getAttribute("formmethod")||i;h(r||e.currentTarget,{fetcherKey:t,method:l,navigate:n,replace:o,state:a,relative:u,preventScrollReset:c,viewTransition:d})},...f,"data-discover":g||"render"!==e?void 0:"true"})}));function io({getKey:e,storageKey:t,...n}){let r=Tn.useContext(Fr),{basename:o}=Tn.useContext(gt),a=Rt(),i=Gt();ko({getKey:e,storageKey:t});let l=Tn.useMemo((()=>{if(!r||!e)return null;let t=So(a,i,o,e);return t!==a.key?t:null}),[]);if(!r||r.isSpaMode)return null;let s=((e,t)=>{if(!window.history.state||!window.history.state.key){let e=Math.random().toString(32).slice(2);window.history.replaceState({key:e},"")}try{let n=JSON.parse(sessionStorage.getItem(e)||"{}")[t||window.history.state.key];"number"==typeof n&&window.scrollTo(0,n)}catch(t){console.error(t),sessionStorage.removeItem(e)}}).toString();return Tn.createElement("script",{...n,suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:`(${s})(${JSON.stringify(t||bo)}, ${JSON.stringify(l)})`}})}function lo(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function so(e){let t=Tn.useContext(ft);return v(t,lo(e)),t}function uo(e){let t=Tn.useContext(pt);return v(t,lo(e)),t}function co(e,{target:t,replace:n,state:r,preventScrollReset:o,relative:a,viewTransition:i}={}){let l=Lt(),s=Rt(),u=Nt(e,{relative:a});return Tn.useCallback((c=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(c,t)){c.preventDefault();let t=void 0!==n?n:k(s)===k(u);l(e,{replace:t,state:r,preventScrollReset:o,relative:a,viewTransition:i})}}),[s,l,u,n,r,t,e,o,a,i])}function fo(e){b("undefined"!=typeof URLSearchParams,"You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.");let t=Tn.useRef(On(e)),n=Tn.useRef(!1),r=Rt(),o=Tn.useMemo((()=>function(e,t){let n=On(e);return t&&t.forEach(((e,r)=>{n.has(r)||t.getAll(r).forEach((e=>{n.append(r,e)}))})),n}(r.search,n.current?null:t.current)),[r.search]),a=Lt(),i=Tn.useCallback(((e,t)=>{const r=On("function"==typeof e?e(o):e);n.current=!0,a("?"+r,t)}),[a,o]);return[o,i]}ao.displayName="Form",io.displayName="ScrollRestoration";var po=0,ho=()=>`__${String(++po)}__`;function mo(){let{router:e}=so("useSubmit"),{basename:t}=Tn.useContext(gt),n=qt("useRouteId");return Tn.useCallback((async(r,o={})=>{let{action:a,method:i,encType:l,formData:s,body:u}=function(e,t){let n,r,o,a,i;if(Ln(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?W(i,t):null,n=e.getAttribute("method")||_n,o=Mn(e.getAttribute("enctype"))||Pn,a=new FormData(e)}else if(function(e){return Ln(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Ln(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?W(l,t):null,n=e.getAttribute("formmethod")||i.getAttribute("method")||_n,o=Mn(e.getAttribute("formenctype"))||Mn(i.getAttribute("enctype"))||Pn,a=new FormData(i,e),!function(){if(null===Dn)try{new FormData(document.createElement("form"),0),Dn=!1}catch(e){Dn=!0}return Dn}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?`${t}.`:"";a.append(`${e}x`,"0"),a.append(`${e}y`,"0")}else t&&a.append(t,r)}}else{if(Ln(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=_n,r=null,o=Pn,i=e}var l;return a&&"text/plain"===o&&(i=a,a=void 0),{action:r,method:n.toLowerCase(),encType:o,formData:a,body:i}}(r,t);if(!1===o.navigate){let t=o.fetcherKey||ho();await e.fetch(t,n,o.action||a,{preventScrollReset:o.preventScrollReset,formData:s,body:u,formMethod:o.method||i,formEncType:o.encType||l,flushSync:o.flushSync})}else await e.navigate(o.action||a,{preventScrollReset:o.preventScrollReset,formData:s,body:u,formMethod:o.method||i,formEncType:o.encType||l,replace:o.replace,state:o.state,fromRouteId:n,flushSync:o.flushSync,viewTransition:o.viewTransition})}),[e,t,n])}function yo(e,{relative:t}={}){let{basename:n}=Tn.useContext(gt),r=Tn.useContext(bt);v(r,"useFormAction must be used inside a RouteContext");let[o]=r.matches.slice(-1),a={...Nt(e||".",{relative:t})},i=Rt();if(null==e){a.search=i.search;let e=new URLSearchParams(a.search),t=e.getAll("index");if(t.some((e=>""===e))){e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();a.search=n?`?${n}`:""}}return e&&"."!==e||!o.route.index||(a.search=a.search?a.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(a.pathname="/"===a.pathname?n:J([n,a.pathname])),k(a)}function go({key:e}={}){let{router:t}=so("useFetcher"),n=uo("useFetcher"),r=Tn.useContext(mt),o=Tn.useContext(bt),a=o.matches[o.matches.length-1]?.route.id;v(r,"useFetcher must be used inside a FetchersContext"),v(o,"useFetcher must be used inside a RouteContext"),v(null!=a,'useFetcher can only be used on routes that contain a unique "id"');let i=Tn.useId(),[l,s]=Tn.useState(e||i);e&&e!==l&&s(e),Tn.useEffect((()=>(t.getFetcher(l),()=>t.deleteFetcher(l))),[t,l]);let u=Tn.useCallback((async(e,n)=>{v(a,"No routeId available for fetcher.load()"),await t.fetch(l,a,e,n)}),[l,a,t]),c=mo(),d=Tn.useCallback((async(e,t)=>{await c(e,{...t,navigate:!1,fetcherKey:l})}),[l,c]),f=Tn.useMemo((()=>{let e=Tn.forwardRef(((e,t)=>Tn.createElement(ao,{...e,navigate:!1,fetcherKey:l,ref:t})));return e.displayName="fetcher.Form",e}),[l]),p=n.fetchers.get(l)||he,h=r.get(l);return Tn.useMemo((()=>({Form:f,submit:d,load:u,...p,data:h})),[f,d,u,p,h])}function vo(){let e=uo("useFetchers");return Array.from(e.fetchers.entries()).map((([e,t])=>({...t,key:e})))}var bo="react-router-scroll-positions",wo={};function So(e,t,n,r){let o=null;return r&&(o=r("/"!==n?{...e,pathname:W(e.pathname,n)||e.pathname}:e,t)),null==o&&(o=e.key),o}function ko({getKey:e,storageKey:t}={}){let{router:n}=so("useScrollRestoration"),{restoreScrollPosition:r,preventScrollReset:o}=uo("useScrollRestoration"),{basename:a}=Tn.useContext(gt),i=Rt(),l=Gt(),s=Yt();Tn.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e){let{capture:t}={};Tn.useEffect((()=>{let n=null!=t?{capture:t}:void 0;return window.addEventListener("pagehide",e,n),()=>{window.removeEventListener("pagehide",e,n)}}),[e,t])}(Tn.useCallback((()=>{if("idle"===s.state){let t=So(i,l,a,e);wo[t]=window.scrollY}try{sessionStorage.setItem(t||bo,JSON.stringify(wo))}catch(e){b(!1,`Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${e}).`)}window.history.scrollRestoration="auto"}),[s.state,e,a,i,l,t])),"undefined"!=typeof document&&(Tn.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(t||bo);e&&(wo=JSON.parse(e))}catch(e){}}),[t]),Tn.useLayoutEffect((()=>{let t=n?.enableScrollRestoration(wo,(()=>window.scrollY),e?(t,n)=>So(t,n,a,e):void 0);return()=>t&&t()}),[n,a,e]),Tn.useLayoutEffect((()=>{if(!1!==r)if("number"!=typeof r){if(i.hash){let e=document.getElementById(decodeURIComponent(i.hash.slice(1)));if(e)return void e.scrollIntoView()}!0!==o&&window.scrollTo(0,0)}else window.scrollTo(0,r)}),[i,r,o]))}function Eo(e,t){let{capture:n}=t||{};Tn.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,n])}function xo({when:e,message:t}){let n=rn(e);Tn.useEffect((()=>{"blocked"===n.state&&(window.confirm(t)?setTimeout(n.proceed,0):n.reset())}),[n,t]),Tn.useEffect((()=>{"blocked"!==n.state||e||n.reset()}),[n,e])}function Ro(e,t={}){let n=Tn.useContext(ht);v(null!=n,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=so("useViewTransitionState"),o=Nt(e,{relative:t.relative});if(!n.isTransitioning)return!1;let a=W(n.currentLocation.pathname,r)||n.currentLocation.pathname,i=W(n.nextLocation.pathname,r)||n.nextLocation.pathname;return null!=$(o.pathname,i)||null!=$(o.pathname,a)}var Co=d(n("./node_modules/react/index.js"));function To({basename:e,children:t,location:n="/"}){"string"==typeof n&&(n=E(n));let r={pathname:n.pathname||"/",search:n.search||"",hash:n.hash||"",state:null!=n.state?n.state:null,key:n.key||"default"},o=Oo();return Co.createElement(bn,{basename:e,children:t,location:r,navigationType:"POP",navigator:o,static:!0})}function _o({context:e,router:t,hydrate:n=!0,nonce:r}){v(t&&e,"You must provide `router` and `context` to <StaticRouterProvider>");let o={router:t,navigator:Oo(),static:!0,staticContext:e,basename:e.basename||"/"},a=new Map,i="";if(!1!==n){let t={loaderData:e.loaderData,actionData:e.actionData,errors:Lo(e.errors)};i=`window.__staticRouterHydrationData = JSON.parse(${JSON.stringify(JSON.stringify(t)).replace(jo,(e=>Fo[e]))});`}let{state:l}=o.router;return Co.createElement(Co.Fragment,null,Co.createElement(ft.Provider,{value:o},Co.createElement(pt.Provider,{value:l},Co.createElement(mt.Provider,{value:a},Co.createElement(ht.Provider,{value:{isTransitioning:!1}},Co.createElement(bn,{basename:o.basename,location:l.location,navigationType:l.historyAction,navigator:o.navigator,static:o.static},Co.createElement(Po,{routes:t.routes,future:t.future,state:l})))))),i?Co.createElement("script",{suppressHydrationWarning:!0,nonce:r,dangerouslySetInnerHTML:{__html:i}}):null)}function Po({routes:e,future:t,state:n}){return Ft(e,void 0,n,t)}function Lo(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)ie(r)?n[e]={...r,__type:"RouteErrorResponse"}:r instanceof Error?n[e]={message:r.message,__type:"Error",..."Error"!==r.name?{__subType:r.name}:{}}:n[e]=r;return n}function Oo(){return{createHref:Mo,encodeLocation:No,push(e){throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(e)})\` somewhere in your app.`)},replace(e){throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(e)}, { replace: true })\` somewhere in your app.`)},go(e){throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${e})\` somewhere in your app.`)},back(){throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.")},forward(){throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.")}}}function Do(e,t){return Se(e,{...t,mapRouteProperties:cn})}function Ao(e,t,n={}){let r={},o=C(e,cn,void 0,r),a=t.matches.map((e=>{let t=r[e.route.id]||e.route;return{...e,route:t}})),i=e=>`You cannot use router.${e}() on the server because it is a stateless environment`;return{get basename(){return t.basename},get future(){return{...n?.future}},get state(){return{historyAction:"POP",location:t.location,matches:a,loaderData:t.loaderData,actionData:t.actionData,errors:t.errors,initialized:!0,navigation:pe,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",fetchers:new Map,blockers:new Map}},get routes(){return o},get window(){},initialize(){throw i("initialize")},subscribe(){throw i("subscribe")},enableScrollRestoration(){throw i("enableScrollRestoration")},navigate(){throw i("navigate")},fetch(){throw i("fetch")},revalidate(){throw i("revalidate")},createHref:Mo,encodeLocation:No,getFetcher:()=>he,deleteFetcher(){throw i("deleteFetcher")},dispose(){throw i("dispose")},getBlocker:()=>me,deleteBlocker(){throw i("deleteBlocker")},patchRoutes(){throw i("patchRoutes")},_internalFetchControllers:new Map,_internalSetRoutes(){throw i("_internalSetRoutes")}}}function Mo(e){return"string"==typeof e?e:k(e)}function No(e){let t="string"==typeof e?e:k(e);t=t.replace(/ $/,"%20");let n=Io.test(t)?new URL(t):new URL(t,"http://localhost");return{pathname:n.pathname,search:n.search,hash:n.hash}}var Io=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Fo={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},jo=/[&><\u2028\u2029]/g,zo=d(n("./node_modules/react/index.js"));function Uo({context:e,url:t,nonce:n}){"string"==typeof t&&(t=new URL(t));let{manifest:r,routeModules:o,criticalCss:a,serverHandoffString:i}=e,l=br(r.routes,o,e.future,e.isSpaMode);e.staticHandlerContext.loaderData={...e.staticHandlerContext.loaderData};for(let t of e.staticHandlerContext.matches){let n=t.route.id,r=o[n],a=e.manifest.routes[n];r&&a&&Cr(a,r,e.isSpaMode)&&(r.HydrateFallback||!a.hasLoader)&&delete e.staticHandlerContext.loaderData[n]}let s=Ao(l,e.staticHandlerContext);return zo.createElement(zo.Fragment,null,zo.createElement(Fr.Provider,{value:{manifest:r,routeModules:o,criticalCss:a,serverHandoffString:i,future:e.future,isSpaMode:e.isSpaMode,serializeError:e.serializeError,renderMeta:e.renderMeta}},zo.createElement(fr,{location:s.state.location},zo.createElement(_o,{router:s,context:e.staticHandlerContext,hydrate:!1}))),e.serverHandoffStream?zo.createElement(zo.Suspense,null,zo.createElement(Zn,{context:e,identifier:0,reader:e.serverHandoffStream.getReader(),textDecoder:new TextDecoder,nonce:n})):null)}var Ho=d(n("./node_modules/react/index.js"));function $o(e,t={}){return function({initialEntries:n,initialIndex:r,hydrationData:o,future:a}){let i=Ho.useRef(),l=Ho.useRef();if(null==i.current){l.current={future:{},manifest:{routes:{},entry:{imports:[],module:""},url:"",version:""},routeModules:{},isSpaMode:!1};let a=Bo(C(e,(e=>e)),t,l.current.manifest,l.current.routeModules);i.current=dn(a,{initialEntries:n,initialIndex:r,hydrationData:o})}return Ho.createElement(Fr.Provider,{value:l.current},Ho.createElement(pn,{router:i.current}))}}function Bo(e,t,n,r,o){return e.map((e=>{if(!e.id)throw new Error("Expected a route.id in @remix-run/testing processRoutes() function");let{loader:a,action:i}=e,l={id:e.id,path:e.path,index:e.index,Component:e.Component,HydrateFallback:e.HydrateFallback,ErrorBoundary:e.ErrorBoundary,action:i?e=>i({...e,context:t}):void 0,loader:a?e=>a({...e,context:t}):void 0,handle:e.handle,shouldRevalidate:e.shouldRevalidate},s={id:e.id,path:e.path,index:e.index,parentId:o,hasAction:null!=e.action,hasLoader:null!=e.loader,hasClientAction:!1,hasClientLoader:!1,hasErrorBoundary:null!=e.ErrorBoundary,module:"build/stub-path-to-module.js"};return n.routes[l.id]=s,r[e.id]={default:e.Component||gn,ErrorBoundary:e.ErrorBoundary||void 0,handle:e.handle,links:e.links,meta:e.meta,shouldRevalidate:e.shouldRevalidate},e.children&&(l.children=Bo(e.children,t,n,r,l.id)),l}))}var Wo=n("./node_modules/react-router/node_modules/cookie/dist/index.js"),Vo=new TextEncoder,qo=async(e,t)=>{let n=e.lastIndexOf("."),r=e.slice(0,n),o=e.slice(n+1),a=Vo.encode(r),i=await Yo(t,["verify"]),l=function(e){let t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(atob(o));return!!await crypto.subtle.verify("HMAC",i,l,a)&&r},Yo=async(e,t)=>crypto.subtle.importKey("raw",Vo.encode(e),{name:"HMAC",hash:"SHA-256"},!1,t),Qo=(e,t={})=>{let{secrets:n=[],...r}={path:"/",sameSite:"lax",...t};return function(e,t){sn(!t,`The "${e}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`)}(e,r.expires),{get name(){return e},get isSigned(){return n.length>0},get expires(){return void 0!==r.maxAge?new Date(Date.now()+1e3*r.maxAge):r.expires},async parse(t,o){if(!t)return null;let a=(0,Wo.parse)(t,{...r,...o});if(e in a){let t=a[e];if("string"==typeof t&&""!==t){let e=await async function(e,t){if(t.length>0){for(let n of t){let t=await qo(e,n);if(!1!==t)return Jo(t)}return null}return Jo(e)}(t,n);return e}return""}return null},serialize:async(t,o)=>(0,Wo.serialize)(e,""===t?"":await async function(e,t){let n=function(e){return btoa(function(e){let t,n,r=e.toString(),o="",a=0;for(;a<r.length;){if(t=r.charAt(a++),"%"===t)if("u"===r.charAt(a)){if(n=r.slice(a+1,a+5),/^[\da-f]{4}$/i.exec(n)){o+=String.fromCharCode(parseInt(n,16)),a+=5;continue}}else if(n=r.slice(a,a+2),/^[\da-f]{2}$/i.exec(n)){o+=String.fromCharCode(parseInt(n,16)),a+=2;continue}o+=t}return o}(encodeURIComponent(JSON.stringify(e))))}(e);return t.length>0&&(n=await(async(e,t)=>{let n=Vo.encode(e),r=await Yo(t,["sign"]),o=await crypto.subtle.sign("HMAC",r,n);return e+"."+btoa(String.fromCharCode(...new Uint8Array(o))).replace(/=+$/,"")})(n,t[0])),n}(t,n),{...r,...o})}},Go=e=>null!=e&&"string"==typeof e.name&&"boolean"==typeof e.isSigned&&"function"==typeof e.parse&&"function"==typeof e.serialize;function Jo(e){try{return JSON.parse(decodeURIComponent(function(e){let t,n,r=e.toString(),o="",a=0;for(;a<r.length;)t=r.charAt(a++),/[\w*+\-./@]/.exec(t)?o+=t:(n=t.charCodeAt(0),o+=n<256?"%"+Xo(n,2):"%u"+Xo(n,4).toUpperCase());return o}(atob(e))))}catch(e){return{}}}function Xo(e,t){let n=e.toString(16);for(;n.length<t;)n="0"+n;return n}var Ko=(e=>(e.Development="development",e.Production="production",e.Test="test",e))(Ko||{});function Zo(e,t){if(e instanceof Error&&"development"!==t){let e=new Error("Unexpected Server Error");return e.stack=void 0,e}return e}function ea(e,t){return Object.entries(e).reduce(((e,[n,r])=>Object.assign(e,{[n]:Zo(r,t)})),{})}function ta(e,t){let n=Zo(e,t);return{message:n.message,stack:n.stack}}function na(e,t){if(!e)return null;let n=Object.entries(e),r={};for(let[e,o]of n)if(ie(o))r[e]={...o,__type:"RouteErrorResponse"};else if(o instanceof Error){let n=Zo(o,t);r[e]={message:n.message,stack:n.stack,__type:"Error",..."Error"!==n.name?{__subType:n.name}:{}}}else r[e]=o;return r}function ra(e,t,n){let r=T(e,t,n);return r?r.map((e=>({params:e.params,pathname:e.pathname,route:e.route}))):null}async function oa(e,t){let n=await e({request:ia(aa(t.request)),params:t.params,context:t.context});if(Ke(n)&&n.init&&n.init.status&&et(n.init.status))throw new Response(null,n.init);return n}function aa(e){let t=new URL(e.url),n=t.searchParams.getAll("index");t.searchParams.delete("index");let r=[];for(let e of n)e&&r.push(e);for(let e of r)t.searchParams.append("index",e);let o={method:e.method,body:e.body,headers:e.headers,signal:e.signal};return o.body&&(o.duplex="half"),new Request(t.href,o)}function ia(e){let t=new URL(e.url);t.searchParams.delete("_routes");let n={method:e.method,body:e.body,headers:e.headers,signal:e.signal};return n.body&&(n.duplex="half"),new Request(t.href,n)}function la(e,t){if(!1===e||null==e)throw console.error("The following error is a bug in React Router; please open an issue! https://github.com/remix-run/react-router/issues/new/choose"),new Error(t)}function sa(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function ua(e,t="",n=sa(e)){return(n[t]||[]).map((t=>({...t,children:ua(e,t.id,n)})))}function ca(e,t,r="",o=sa(e)){return(o[r]||[]).map((r=>{let a={hasErrorBoundary:"root"===r.id||null!=r.module.ErrorBoundary,id:r.id,path:r.path,loader:r.module.loader?async e=>{if(e.request.headers.has("X-React-Router-Prerender-Data")){const t=e.request.headers.get("X-React-Router-Prerender-Data");let o=t?decodeURI(t):t;la(o,"Missing prerendered data for route");let a=(new TextEncoder).encode(o),i=new ReadableStream({start(e){e.enqueue(a),e.close()}}),l=(await ar(i,n.g)).value;la(l&&r.id in l,"Unable to decode prerendered data");let s=l[r.id];return la("data"in s,"Unable to process prerendered data"),s.data}return await oa(r.module.loader,e)}:void 0,action:r.module.action?e=>oa(r.module.action,e):void 0,handle:r.module.handle};return r.index?{index:!0,...a}:{caseSensitive:r.caseSensitive,children:ca(e,t,r.id,o),...a}}))}var da={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},fa=/[&><\u2028\u2029]/g;function pa(e){return JSON.stringify(e).replace(fa,(e=>da[e]))}var ha="__reactRouterDevServerHooks";function ma(e){globalThis[ha]=e}function ya(){return globalThis[ha]}var ga=n("./node_modules/turbo-stream/dist/turbo-stream.js"),va=n("./node_modules/set-cookie-parser/lib/set-cookie.js");function ba(e,t){let n,r=t.errors?t.matches.findIndex((e=>t.errors[e.route.id])):-1,o=r>=0?t.matches.slice(0,r+1):t.matches;if(r>=0){let{actionHeaders:e,actionData:o,loaderHeaders:a,loaderData:i}=t;t.matches.slice(r).some((t=>{let r=t.route.id;return!e[r]||o&&o.hasOwnProperty(r)?a[r]&&!i.hasOwnProperty(r)&&(n=a[r]):n=e[r],null!=n}))}return o.reduce(((r,a,i)=>{let{id:l}=a.route,s=e.routes[l];la(s,`Route with id "${l}" not found in build`);let u=s.module,c=t.loaderHeaders[l]||new Headers,d=t.actionHeaders[l]||new Headers,f=null!=n&&i===o.length-1,p=f&&n!==c&&n!==d;if(null==u.headers){let e=new Headers(r);return p&&wa(n,e),wa(d,e),wa(c,e),e}let h=new Headers(u.headers?"function"==typeof u.headers?u.headers({loaderHeaders:c,parentHeaders:r,actionHeaders:d,errorHeaders:f?n:void 0}):u.headers:void 0);return p&&wa(n,h),wa(d,h),wa(c,h),wa(r,h),h}),new Headers)}function wa(e,t){let n=e.get("Set-Cookie");if(n){let e=(0,va.splitCookiesString)(n),r=new Set(t.getSetCookie());e.forEach((e=>{r.has(e)||t.append("Set-Cookie",e)}))}}var Sa=202;function ka({isActionDataRequest:e,loadRouteIds:t}={}){return async({request:n,matches:r})=>{if(e&&"GET"===n.method)return{};let o=t?r.filter((e=>t.includes(e.route.id))):r;return(await Promise.all(o.map((e=>e.resolve())))).reduce(((e,t,n)=>Object.assign(e,{[o[n].route.id]:t})),{})}}function Ea(e,t,n){let r=t.get("Location");return n&&(r=W(r,n)||r),{redirect:r,status:e,revalidate:t.has("X-Remix-Revalidate")||t.has("Set-Cookie"),reload:t.has("X-Remix-Reload-Document"),replace:t.has("X-Remix-Replace")}}function xa(e,t,n,r){let o=new AbortController,a=setTimeout((()=>o.abort(new Error("Server Timeout"))),"number"==typeof n?n:4950);return t.addEventListener("abort",(()=>clearTimeout(a))),(0,ga.encode)(e,{signal:o.signal,plugins:[e=>{if(e instanceof Error){let{name:t,message:n,stack:o}="production"===r?Zo(e,r):e;return["SanitizedError",t,n,o]}if(e instanceof ae){let{data:t,status:n,statusText:r}=e;return["ErrorResponse",t,n,r]}if(e&&"object"==typeof e&&Kn in e)return["SingleFetchRedirect",e[Kn]]}],postPlugins:[e=>{if(e&&"object"==typeof e)return["SingleFetchClassInstance",Object.fromEntries(Object.entries(e))]},()=>["SingleFetchFallback"]]})}var Ra=new Set([100,101,204,205,304]);function Ca(e,t){let n=ua(e.routes),r=ca(e.routes,e.future),o="development"===(a=t)||"production"===a||"test"===a?t:"production";var a;let i=Se(r,{basename:e.basename}),l=e.entry.module.handleError||((e,{request:t})=>{"test"===o||t.signal.aborted||console.error(ie(e)&&e.error?e.error:e)});return{routes:n,dataRoutes:r,serverMode:o,staticHandler:i,errorHandler:l}}var Ta=(e,t)=>{let n,r,o,a,i;return async function(l,s={}){if(n="function"==typeof e?await e():e,"function"==typeof e){let e=Ca(n,t);r=e.routes,o=e.serverMode,a=e.staticHandler,i=e.errorHandler}else if(!(r&&o&&a&&i)){let e=Ca(n,t);r=e.routes,o=e.serverMode,a=e.staticHandler,i=e.errorHandler}let u=new URL(l.url),c={},d=e=>{"development"===t&&ya()?.processRequestError?.(e),i(e,{context:s,params:c,request:l})},f=`${n.basename??"/"}/__manifest`.replace(/\/+/g,"/");if(u.pathname===f)try{let e=await async function(e,t,n){let r={};if(n.searchParams.has("p")){for(let o of n.searchParams.getAll("p")){let n=ra(t,o,e.basename);if(n)for(let t of n){let n=t.route.id,o=e.assets.routes[n];o&&(r[n]=o)}}return Response.json(r,{headers:{"Cache-Control":"public, max-age=31536000, immutable"}})}return new Response("Invalid Request",{status:400})}(n,r,u);return e}catch(e){return d(e),new Response("Unknown Server Error",{status:500})}let p,h=ra(r,u.pathname,n.basename);if(h&&h.length>0&&Object.assign(c,h[0].params),u.pathname.endsWith(".data")){let e=new URL(l.url);e.pathname=e.pathname.replace(/\.data$/,"").replace(/^\/_root$/,"/");let t=ra(r,e.pathname,n.basename);if(p=await async function(e,t,n,r,o,a,i){let{result:l,headers:s,status:u}="GET"!==r.method?await async function(e,t,n,r,o,a,i){try{let l=new Request(o,{method:r.method,body:r.body,headers:r.headers,signal:r.signal,...r.body?{duplex:"half"}:void 0}),s=await n.query(l,{requestContext:a,skipLoaderErrorBubbling:!0,dataStrategy:ka({isActionDataRequest:!0})});if(Ze(s))return{result:Ea(s.status,s.headers,e.basename),headers:s.headers,status:Sa};let u,c=s,d=ba(e,c);return et(c.statusCode)&&d.has("Location")?{result:Ea(c.statusCode,d,e.basename),headers:d,status:Sa}:(c.errors&&(Object.values(c.errors).forEach((e=>{ie(e)&&!e.error||i(e)})),c.errors=ea(c.errors,t)),u=c.errors?{error:Object.values(c.errors)[0]}:{data:Object.values(c.actionData||{})[0]},{result:u,headers:d,status:c.statusCode})}catch(e){return i(e),{result:{error:e},headers:new Headers,status:500}}}(t,e,n,r,o,a,i):await async function(e,t,n,r,o,a,i){try{let l=new Request(o,{headers:r.headers,signal:r.signal}),s=new URL(r.url).searchParams.get("_routes")?.split(",")||void 0,u=await n.query(l,{requestContext:a,skipLoaderErrorBubbling:!0,dataStrategy:ka({loadRouteIds:s})});if(Ze(u))return{result:{[Kn]:Ea(u.status,u.headers,e.basename)},headers:u.headers,status:Sa};let c=u,d=ba(e,c);if(et(c.statusCode)&&d.has("Location"))return{result:{[Kn]:Ea(c.statusCode,d,e.basename)},headers:d,status:Sa};c.errors&&(Object.values(c.errors).forEach((e=>{ie(e)&&!e.error||i(e)})),c.errors=ea(c.errors,t));let f={};return(s?c.matches.filter((e=>e.route.loader&&s.includes(e.route.id))):c.matches).forEach((e=>{let{id:t}=e.route;c.errors&&c.errors.hasOwnProperty(t)?f[t]={error:c.errors[t]}:c.loaderData.hasOwnProperty(t)&&(f[t]={data:c.loaderData[t]})})),{result:f,headers:d,status:c.statusCode}}catch(e){return i(e),{result:{root:{error:e}},headers:new Headers,status:500}}}(t,e,n,r,o,a,i),c=new Headers(s);return c.set("X-Remix-Response","yes"),Ra.has(u)?new Response(null,{status:u,headers:c}):(c.set("Content-Type","text/x-script"),new Response(xa(l,r.signal,t.entry.module.streamTimeout,e),{status:u||200,headers:c}))}(o,n,a,l,e,s,d),n.entry.module.handleDataRequest&&(p=await n.entry.module.handleDataRequest(p,{context:s,params:t?t[0].params:{},request:l}),tt(p))){let e=Ea(p.status,p.headers,n.basename);"GET"===l.method&&(e={[Kn]:e});let t=new Headers(p.headers);return t.set("Content-Type","text/x-script"),new Response(xa(e,l.signal,n.entry.module.streamTimeout,o),{status:Sa,headers:t})}}else if(h&&null==h[h.length-1].route.module.default&&null==h[h.length-1].route.module.ErrorBoundary)p=await async function(e,t,n,r,o,a){try{let e=await t.queryRoute(r,{routeId:n,requestContext:o});return Ze(e)?e:"string"==typeof e?new Response(e):Response.json(e)}catch(t){return Ze(t)?(t.headers.set("X-Remix-Catch","yes"),t):ie(t)?(t&&a(t),function(e,t){return Response.json(ta(e.error||new Error("Unexpected Server Error"),t),{status:e.status,statusText:e.statusText,headers:{"X-Remix-Error":"yes"}})}(t,e)):(a(t),_a(t,e))}}(o,a,h.slice(-1)[0].route.id,l,s,d);else{let e="development"===t?await(ya()?.getCriticalCss?.(n,u.pathname)):void 0;p=await async function(e,t,n,r,o,a,i){let l;try{l=await n.query(r,{requestContext:o})}catch(e){return a(e),new Response(null,{status:500})}if(Ze(l))return l;let s=ba(t,l);if(Ra.has(l.statusCode))return new Response(null,{status:l.statusCode,headers:s});l.errors&&(Object.values(l.errors).forEach((e=>{ie(e)&&!e.error||a(e)})),l.errors=ea(l.errors,e));let u={loaderData:l.loaderData,actionData:l.actionData,errors:na(l.errors,e)},c={manifest:t.assets,routeModules:(f=t.routes,Object.keys(f).reduce(((e,t)=>{let n=f[t];return n&&(e[t]=n.module),e}),{})),staticHandlerContext:l,criticalCss:i,serverHandoffString:pa({basename:t.basename,criticalCss:i,future:t.future,isSpaMode:t.isSpaMode}),serverHandoffStream:xa(u,r.signal,t.entry.module.streamTimeout,e),renderMeta:{},future:t.future,isSpaMode:t.isSpaMode,serializeError:t=>ta(t,e)},d=t.entry.module.default;var f;try{return await d(r,l.statusCode,s,c,o)}catch(i){a(i);let u=i;if(Ze(i))try{let e=await function(e){let t=e.headers.get("Content-Type");return t&&/\bapplication\/json\b/.test(t)?null==e.body?null:e.json():e.text()}(i);u=new ae(i.status,i.statusText,e)}catch(e){}l=function(e,t,n){return{...t,statusCode:ie(n)?n.status:500,errors:{[t._deepestRenderedBoundaryId||e[0].id]:n}}}(n.dataRoutes,l,u),l.errors&&(l.errors=ea(l.errors,e));let f={loaderData:l.loaderData,actionData:l.actionData,errors:na(l.errors,e)};c={...c,staticHandlerContext:l,serverHandoffString:pa({basename:t.basename,future:t.future,isSpaMode:t.isSpaMode}),serverHandoffStream:xa(f,r.signal,t.entry.module.streamTimeout,e),renderMeta:{}};try{return await d(r,l.statusCode,s,c,o)}catch(t){return a(t),_a(t,e)}}}(o,n,a,l,s,d,e)}return"HEAD"===l.method?new Response(null,{headers:p.headers,status:p.status,statusText:p.statusText}):p}};function _a(e,t){let n="Unexpected Server Error";return"production"!==t&&(n+=`\n\n${String(e)}`),new Response(n,{status:500,headers:{"Content-Type":"text/plain"}})}function Pa(e){return`__flash_${e}__`}var La=(e={},t="")=>{let n=new Map(Object.entries(e));return{get id(){return t},get data(){return Object.fromEntries(n)},has:e=>n.has(e)||n.has(Pa(e)),get(e){if(n.has(e))return n.get(e);let t=Pa(e);if(n.has(t)){let e=n.get(t);return n.delete(t),e}},set(e,t){n.set(e,t)},flash(e,t){n.set(Pa(e),t)},unset(e){n.delete(e)}}},Oa=e=>null!=e&&"string"==typeof e.id&&void 0!==e.data&&"function"==typeof e.has&&"function"==typeof e.get&&"function"==typeof e.set&&"function"==typeof e.flash&&"function"==typeof e.unset;function Da({cookie:e,createData:t,readData:n,updateData:r,deleteData:o}){let a=Go(e)?e:Qo(e?.name||"__session",e);return Aa(a),{async getSession(e,t){let r=e&&await a.parse(e,t),o=r&&await n(r);return La(o||{},r||"")},async commitSession(e,n){let{id:o,data:i}=e,l=null!=n?.maxAge?new Date(Date.now()+1e3*n.maxAge):null!=n?.expires?n.expires:a.expires;return o?await r(o,i,l):o=await t(i,l),a.serialize(o,n)},destroySession:async(e,t)=>(await o(e.id),a.serialize("",{...t,maxAge:void 0,expires:new Date(0)}))}}function Aa(e){sn(e.isSigned,`The "${e.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`)}function Ma({cookie:e}={}){let t=Go(e)?e:Qo(e?.name||"__session",e);return Aa(t),{getSession:async(e,n)=>La(e&&await t.parse(e,n)||{}),async commitSession(e,n){let r=await t.serialize(e.data,n);if(r.length>4096)throw new Error("Cookie length will exceed browser maximum. Length: "+r.length);return r},destroySession:async(e,n)=>t.serialize("",{...n,maxAge:void 0,expires:new Date(0)})}}function Na({cookie:e}={}){let t=new Map;return Da({cookie:e,async createData(e,n){let r=Math.random().toString(36).substring(2,10);return t.set(r,{data:e,expires:n}),r},async readData(e){if(t.has(e)){let{data:n,expires:r}=t.get(e);if(!r||r>new Date)return n;r&&t.delete(e)}return null},async updateData(e,n,r){t.set(e,{data:n,expires:r})},async deleteData(e){t.delete(e)}})}function Ia(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new ae(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let o=new t(r.message);o.stack=r.stack,n[e]=o}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack=r.stack,n[e]=t}}else n[e]=r;return n}},"./node_modules/react-router/node_modules/cookie/dist/index.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=function(e,t){const n=new l,r=e.length;if(r<2)return n;const o=t?.decode||c;let a=0;do{const t=e.indexOf("=",a);if(-1===t)break;const i=e.indexOf(";",a),l=-1===i?r:i;if(t>l){a=e.lastIndexOf(";",t-1)+1;continue}const c=s(e,a,t),d=u(e,t,c),f=e.slice(c,d);if(void 0===n[f]){let r=s(e,t+1,l),a=u(e,l,r);const i=o(e.slice(r,a));n[f]=i}a=l+1}while(a<r);return n},t.serialize=function(e,t,l){const s=l?.encode||encodeURIComponent;if(!n.test(e))throw new TypeError(`argument name is invalid: ${e}`);const u=s(t);if(!r.test(u))throw new TypeError(`argument val is invalid: ${t}`);let c=e+"="+u;if(!l)return c;if(void 0!==l.maxAge){if(!Number.isInteger(l.maxAge))throw new TypeError(`option maxAge is invalid: ${l.maxAge}`);c+="; Max-Age="+l.maxAge}if(l.domain){if(!o.test(l.domain))throw new TypeError(`option domain is invalid: ${l.domain}`);c+="; Domain="+l.domain}if(l.path){if(!a.test(l.path))throw new TypeError(`option path is invalid: ${l.path}`);c+="; Path="+l.path}if(l.expires){if(!function(e){return"[object Date]"===i.call(e)}(l.expires)||!Number.isFinite(l.expires.valueOf()))throw new TypeError(`option expires is invalid: ${l.expires}`);c+="; Expires="+l.expires.toUTCString()}if(l.httpOnly&&(c+="; HttpOnly"),l.secure&&(c+="; Secure"),l.partitioned&&(c+="; Partitioned"),l.priority)switch("string"==typeof l.priority?l.priority.toLowerCase():void 0){case"low":c+="; Priority=Low";break;case"medium":c+="; Priority=Medium";break;case"high":c+="; Priority=High";break;default:throw new TypeError(`option priority is invalid: ${l.priority}`)}if(l.sameSite)switch("string"==typeof l.sameSite?l.sameSite.toLowerCase():l.sameSite){case!0:case"strict":c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"none":c+="; SameSite=None";break;default:throw new TypeError(`option sameSite is invalid: ${l.sameSite}`)}return c};const n=/^[\u0021-\u003A\u003C\u003E-\u007E]+$/,r=/^[\u0021-\u003A\u003C-\u007E]*$/,o=/^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i,a=/^[\u0020-\u003A\u003D-\u007E]*$/,i=Object.prototype.toString,l=(()=>{const e=function(){};return e.prototype=Object.create(null),e})();function s(e,t,n){do{const n=e.charCodeAt(t);if(32!==n&&9!==n)return t}while(++t<n);return n}function u(e,t,n){for(;t>n;){const n=e.charCodeAt(--t);if(32!==n&&9!==n)return t+1}return n}function c(e){if(-1===e.indexOf("%"))return e;try{return decodeURIComponent(e)}catch(t){return e}}},"./node_modules/react/cjs/react.development.js":(e,t,n)=>{e=n.nmd(e),function(){function n(e,t){Object.defineProperty(a.prototype,e,{get:function(){console.warn("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})}function r(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Q&&e[Q]||e["@@iterator"])?e:null}function o(e,t){var n=(e=(e=e.constructor)&&(e.displayName||e.name)||"ReactClass")+"."+t;G[n]||(console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,e),G[n]=!0)}function a(e,t,n){this.props=e,this.context=t,this.refs=K,this.updater=n||J}function i(){}function l(e,t,n){this.props=e,this.context=t,this.refs=K,this.updater=n||J}function s(e){return""+e}function u(e){try{s(e);var t=!1}catch(e){t=!0}if(t){var n=(t=console).error,r="function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n.call(t,"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",r),s(e)}}function c(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===ue?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case F:return"Fragment";case I:return"Portal";case z:return"Profiler";case j:return"StrictMode";case B:return"Suspense";case W:return"SuspenseList"}if("object"==typeof e)switch("number"==typeof e.tag&&console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),e.$$typeof){case H:return(e.displayName||"Context")+".Provider";case U:return(e._context.displayName||"Context")+".Consumer";case $:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case V:return null!==(t=e.displayName||null)?t:c(e.type)||"Memo";case q:t=e._payload,e=e._init;try{return c(e(t))}catch(e){}}return null}function d(e){return"string"==typeof e||"function"==typeof e||e===F||e===z||e===j||e===B||e===W||e===Y||"object"==typeof e&&null!==e&&(e.$$typeof===q||e.$$typeof===V||e.$$typeof===H||e.$$typeof===U||e.$$typeof===$||e.$$typeof===fe||void 0!==e.getModuleId)}function f(){}function p(e){if(void 0===he)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);he=t&&t[1]||"",me=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+he+e+me}function h(e,t){if(!e||ve)return"";var n,r=be.get(e);if(void 0!==r)return r;ve=!0,r=Error.prepareStackTrace,Error.prepareStackTrace=void 0,n=ce.H,ce.H=null,function(){if(0===pe){te=console.log,ne=console.info,re=console.warn,oe=console.error,ae=console.group,ie=console.groupCollapsed,le=console.groupEnd;var e={configurable:!0,enumerable:!0,value:f,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}pe++}();try{var o={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};o.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(o.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(o.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var i=o.DetermineComponentFrameRoot(),l=i[0],s=i[1];if(l&&s){var u=l.split("\n"),c=s.split("\n");for(i=a=0;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;for(;i<c.length&&!c[i].includes("DetermineComponentFrameRoot");)i++;if(a===u.length||i===c.length)for(a=u.length-1,i=c.length-1;1<=a&&0<=i&&u[a]!==c[i];)i--;for(;1<=a&&0<=i;a--,i--)if(u[a]!==c[i]){if(1!==a||1!==i)do{if(a--,0>--i||u[a]!==c[i]){var d="\n"+u[a].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),"function"==typeof e&&be.set(e,d),d}}while(1<=a&&0<=i);break}}}finally{ve=!1,ce.H=n,function(){if(0==--pe){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:X({},e,{value:te}),info:X({},e,{value:ne}),warn:X({},e,{value:re}),error:X({},e,{value:oe}),group:X({},e,{value:ae}),groupCollapsed:X({},e,{value:ie}),groupEnd:X({},e,{value:le})})}0>pe&&console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=r}return u=(u=e?e.displayName||e.name:"")?p(u):"","function"==typeof e&&be.set(e,u),u}function m(e){if(null==e)return"";if("function"==typeof e){var t=e.prototype;return h(e,!(!t||!t.isReactComponent))}if("string"==typeof e)return p(e);switch(e){case B:return p("Suspense");case W:return p("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case $:return h(e.render,!1);case V:return m(e.type);case q:t=e._payload,e=e._init;try{return m(e(t))}catch(e){}}return""}function y(){var e=ce.A;return null===e?null:e.getOwner()}function g(e){if(de.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function v(){var e=c(this.type);return Se[e]||(Se[e]=!0,console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.")),void 0!==(e=this.props.ref)?e:null}function b(e,t,n,r,o,a){return n=a.ref,e={$$typeof:N,type:e,key:t,props:a,_owner:o},null!==(void 0!==n?n:null)?Object.defineProperty(e,"ref",{enumerable:!1,get:v}):Object.defineProperty(e,"ref",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,"_debugInfo",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}function w(e,t){if("object"==typeof e&&e&&e.$$typeof!==we)if(se(e))for(var n=0;n<e.length;n++){var o=e[n];S(o)&&k(o,t)}else if(S(e))e._store&&(e._store.validated=1);else if("function"==typeof(n=r(e))&&n!==e.entries&&(n=n.call(e))!==e)for(;!(e=n.next()).done;)S(e.value)&&k(e.value,t)}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===N}function k(e,t){if(e._store&&!e._store.validated&&null==e.key&&(e._store.validated=1,t=function(e){var t="",n=y();return n&&(n=c(n.type))&&(t="\n\nCheck the render method of `"+n+"`."),t||(e=c(e))&&(t="\n\nCheck the top-level render call using <"+e+">."),t}(t),!ke[t])){ke[t]=!0;var n="";e&&null!=e._owner&&e._owner!==y()&&(n=null,"number"==typeof e._owner.tag?n=c(e._owner.type):"string"==typeof e._owner.name&&(n=e._owner.name),n=" It was passed a child from "+n+".");var r=ce.getCurrentStack;ce.getCurrentStack=function(){var t=m(e.type);return r&&(t+=r()||""),t},console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',t,n),ce.getCurrentStack=r}}function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(u(e.key),n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function x(){}function R(e,t,n,o,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var l,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case N:case I:c=!0;break;case q:return R((c=e._init)(e._payload),t,n,o,a)}}if(c){a=a(c=e);var d=""===o?"."+E(c,0):o;return se(a)?(n="",null!=d&&(n=d.replace(xe,"$&/")+"/"),R(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(null!=a.key&&(c&&c.key===a.key||u(a.key)),l=a,s=n+(null==a.key||c&&c.key===a.key?"":(""+a.key).replace(xe,"$&/")+"/")+d,(s=b(l.type,s,void 0,0,l._owner,l.props))._store.validated=l._store.validated,n=s,""!==o&&null!=c&&S(c)&&null==c.key&&c._store&&!c._store.validated&&(n._store.validated=2),a=n),t.push(a)),1}if(c=0,d=""===o?".":o+":",se(e))for(var f=0;f<e.length;f++)c+=R(o=e[f],t,n,i=d+E(o,f),a);else if("function"==typeof(f=r(e)))for(f===e.entries&&(Ee||console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),Ee=!0),e=f.call(e),f=0;!(o=e.next()).done;)c+=R(o=o.value,t,n,i=d+E(o,f++),a);else if("object"===i){if("function"==typeof e.then)return R(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(x,x):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,n,o,a);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function C(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return void 0===(t=e._result)&&console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",t),"default"in t||console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t),t.default;throw e._result}function _(){var e=ce.H;return null===e&&console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."),e}function P(){}function L(t){if(null===Te)try{var n=("require"+Math.random()).slice(0,7);Te=(e&&e[n]).call(e,"timers").setImmediate}catch(e){Te=function(e){!1===Ce&&(Ce=!0,"undefined"==typeof MessageChannel&&console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}return Te(t)}function O(e){return 1<e.length&&"function"==typeof AggregateError?new AggregateError(e):e[0]}function D(e,t){t!==_e-1&&console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),_e=t}function A(e,t,n){var r=ce.actQueue;if(null!==r)if(0!==r.length)try{return M(r),void L((function(){return A(e,t,n)}))}catch(e){ce.thrownErrors.push(e)}else ce.actQueue=null;0<ce.thrownErrors.length?(r=O(ce.thrownErrors),ce.thrownErrors.length=0,n(r)):t(e)}function M(e){if(!Le){Le=!0;var t=0;try{for(;t<e.length;t++)for(var n=e[t];;){ce.didUsePromise=!1;var r=n(!1);if(null===r)break;if(ce.didUsePromise)return e[t]=n,void e.splice(0,t);n=r}e.length=0}catch(n){e.splice(0,t+1),ce.thrownErrors.push(n)}finally{Le=!1}}}"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());var N=Symbol.for("react.transitional.element"),I=Symbol.for("react.portal"),F=Symbol.for("react.fragment"),j=Symbol.for("react.strict_mode"),z=Symbol.for("react.profiler");Symbol.for("react.provider");var U=Symbol.for("react.consumer"),H=Symbol.for("react.context"),$=Symbol.for("react.forward_ref"),B=Symbol.for("react.suspense"),W=Symbol.for("react.suspense_list"),V=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),Y=Symbol.for("react.offscreen"),Q=Symbol.iterator,G={},J={isMounted:function(){return!1},enqueueForceUpdate:function(e){o(e,"forceUpdate")},enqueueReplaceState:function(e){o(e,"replaceState")},enqueueSetState:function(e){o(e,"setState")}},X=Object.assign,K={};Object.freeze(K),a.prototype.isReactComponent={},a.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},a.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var Z,ee={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]};for(Z in ee)ee.hasOwnProperty(Z)&&n(Z,ee[Z]);i.prototype=a.prototype,(ee=l.prototype=new i).constructor=l,X(ee,a.prototype),ee.isPureReactComponent=!0;var te,ne,re,oe,ae,ie,le,se=Array.isArray,ue=Symbol.for("react.client.reference"),ce={H:null,A:null,T:null,S:null,actQueue:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1,didUsePromise:!1,thrownErrors:[],getCurrentStack:null},de=Object.prototype.hasOwnProperty,fe=Symbol.for("react.client.reference"),pe=0;f.__reactDisabledLog=!0;var he,me,ye,ge,ve=!1,be=new("function"==typeof WeakMap?WeakMap:Map),we=Symbol.for("react.client.reference"),Se={},ke={},Ee=!1,xe=/\/+/g,Re="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)},Ce=!1,Te=null,_e=0,Pe=!1,Le=!1,Oe="function"==typeof queueMicrotask?function(e){queueMicrotask((function(){return queueMicrotask(e)}))}:L;t.Children={map:C,forEach:function(e,t,n){C(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return C(e,(function(){t++})),t},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=a,t.Fragment=F,t.Profiler=z,t.PureComponent=l,t.StrictMode=j,t.Suspense=B,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=ce,t.act=function(e){var t=ce.actQueue,n=_e;_e++;var r=ce.actQueue=null!==t?t:[],o=!1;try{var a=e()}catch(e){ce.thrownErrors.push(e)}if(0<ce.thrownErrors.length)throw D(0,n),e=O(ce.thrownErrors),ce.thrownErrors.length=0,e;if(null!==a&&"object"==typeof a&&"function"==typeof a.then){var i=a;return Oe((function(){o||Pe||(Pe=!0,console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))})),{then:function(e,t){o=!0,i.then((function(o){if(D(0,n),0===n){try{M(r),L((function(){return A(o,e,t)}))}catch(e){ce.thrownErrors.push(e)}if(0<ce.thrownErrors.length){var a=O(ce.thrownErrors);ce.thrownErrors.length=0,t(a)}}else e(o)}),(function(e){D(0,n),0<ce.thrownErrors.length?(e=O(ce.thrownErrors),ce.thrownErrors.length=0,t(e)):t(e)}))}}}var l=a;if(D(0,n),0===n&&(M(r),0!==r.length&&Oe((function(){o||Pe||(Pe=!0,console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"))})),ce.actQueue=null),0<ce.thrownErrors.length)throw e=O(ce.thrownErrors),ce.thrownErrors.length=0,e;return{then:function(e,t){o=!0,0===n?(ce.actQueue=r,L((function(){return A(l,e,t)}))):e(l)}}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r,o=X({},e.props),a=e.key,i=e._owner;if(null!=t)for(l in(r=!(de.call(t,"ref")&&(r=Object.getOwnPropertyDescriptor(t,"ref").get)&&r.isReactWarning)&&void 0!==t.ref)&&(i=y()),g(t)&&(u(t.key),a=""+t.key),t)!de.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(o[l]=t[l]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){r=Array(l);for(var s=0;s<l;s++)r[s]=arguments[s+2];o.children=r}for(o=b(e.type,a,void 0,0,i,o),a=2;a<arguments.length;a++)w(arguments[a],o.type);return o},t.createContext=function(e){return(e={$$typeof:H,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:U,_context:e},e._currentRenderer=null,e._currentRenderer2=null,e},t.createElement=function(e,t,n){if(d(e))for(var r=2;r<arguments.length;r++)w(arguments[r],e);else{if(r="",(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(r+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."),null===e)var o="null";else se(e)?o="array":void 0!==e&&e.$$typeof===N?(o="<"+(c(e.type)||"Unknown")+" />",r=" Did you accidentally export a JSX literal instead of a component?"):o=typeof e;console.error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",o,r)}var a;if(r={},o=null,null!=t)for(a in ge||!("__self"in t)||"key"in t||(ge=!0,console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")),g(t)&&(u(t.key),o=""+t.key),t)de.call(t,a)&&"key"!==a&&"__self"!==a&&"__source"!==a&&(r[a]=t[a]);var i=arguments.length-2;if(1===i)r.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];Object.freeze&&Object.freeze(l),r.children=l}if(e&&e.defaultProps)for(a in i=e.defaultProps)void 0===r[a]&&(r[a]=i[a]);return o&&function(e,t){function n(){ye||(ye=!0,console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",t))}n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(r,"function"==typeof e?e.displayName||e.name||"Unknown":e),b(e,o,void 0,0,y(),r)},t.createRef=function(){var e={current:null};return Object.seal(e),e},t.forwardRef=function(e){null!=e&&e.$$typeof===V?console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?console.error("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&console.error("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&null!=e.defaultProps&&console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");var t,n={$$typeof:$,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,e.name||e.displayName||(Object.defineProperty(e,"name",{value:n}),e.displayName=n)}}),n},t.isValidElement=S,t.lazy=function(e){return{$$typeof:q,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){var n;return d(e)||console.error("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e),t={$$typeof:V,type:e,compare:void 0===t?null:t},Object.defineProperty(t,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,e.name||e.displayName||(Object.defineProperty(e,"name",{value:t}),e.displayName=t)}}),t},t.startTransition=function(e){var t=ce.T,n={};ce.T=n,n._updatedFibers=new Set;try{var r=e(),o=ce.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(P,Re)}catch(e){Re(e)}finally{null===t&&n._updatedFibers&&(e=n._updatedFibers.size,n._updatedFibers.clear(),10<e&&console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")),ce.T=t}},t.unstable_useCacheRefresh=function(){return _().useCacheRefresh()},t.use=function(e){return _().use(e)},t.useActionState=function(e,t,n){return _().useActionState(e,t,n)},t.useCallback=function(e,t){return _().useCallback(e,t)},t.useContext=function(e){var t=_();return e.$$typeof===U&&console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"),t.useContext(e)},t.useDebugValue=function(e,t){return _().useDebugValue(e,t)},t.useDeferredValue=function(e,t){return _().useDeferredValue(e,t)},t.useEffect=function(e,t){return _().useEffect(e,t)},t.useId=function(){return _().useId()},t.useImperativeHandle=function(e,t,n){return _().useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return _().useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return _().useLayoutEffect(e,t)},t.useMemo=function(e,t){return _().useMemo(e,t)},t.useOptimistic=function(e,t){return _().useOptimistic(e,t)},t.useReducer=function(e,t,n){return _().useReducer(e,t,n)},t.useRef=function(e){return _().useRef(e)},t.useState=function(e){return _().useState(e)},t.useSyncExternalStore=function(e,t,n){return _().useSyncExternalStore(e,t,n)},t.useTransition=function(){return _().useTransition()},t.version="19.0.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/react/index.js":(e,t,n)=>{e.exports=n("./node_modules/react/cjs/react.development.js")},"./node_modules/scheduler/cjs/scheduler.development.js":(e,t)=>{!function(){function e(){if(R){var e=t.unstable_now();_=e;var n=!0;try{e:{w=!1,S&&(S=!1,E(C),C=-1),b=!0;var a=v;try{t:{for(i(e),g=r(h);null!==g&&!(g.expirationTime>e&&s());){var u=g.callback;if("function"==typeof u){g.callback=null,v=g.priorityLevel;var d=u(g.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof d){g.callback=d,i(e),n=!0;break t}g===r(h)&&o(h),i(e)}else o(h);g=r(h)}if(null!==g)n=!0;else{var f=r(m);null!==f&&c(l,f.startTime-e),n=!1}}break e}finally{g=null,v=a,b=!1}n=void 0}}finally{n?P():R=!1}}}function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}function i(e){for(var t=r(m);null!==t;){if(null===t.callback)o(m);else{if(!(t.startTime<=e))break;o(m),t.sortIndex=t.expirationTime,n(h,t)}t=r(m)}}function l(e){if(S=!1,i(e),!w)if(null!==r(h))w=!0,u();else{var t=r(m);null!==t&&c(l,t.startTime-e)}}function s(){return!(t.unstable_now()-_<T)}function u(){R||(R=!0,P())}function c(e,n){C=k((function(){e(t.unstable_now())}),n)}if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error()),t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var d=performance;t.unstable_now=function(){return d.now()}}else{var f=Date,p=f.now();t.unstable_now=function(){return f.now()-p}}var h=[],m=[],y=1,g=null,v=3,b=!1,w=!1,S=!1,k="function"==typeof setTimeout?setTimeout:null,E="function"==typeof clearTimeout?clearTimeout:null,x="undefined"!=typeof setImmediate?setImmediate:null,R=!1,C=-1,T=5,_=-1;if("function"==typeof x)var P=function(){x(e)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,O=L.port2;L.port1.onmessage=e,P=function(){O.postMessage(null)}}else P=function(){k(e,0)};t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){w||b||(w=!0,u())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return v},t.unstable_getFirstCallbackNode=function(){return r(h)},t.unstable_next=function(e){switch(v){case 1:case 2:case 3:var t=3;break;default:t=v}var n=v;v=t;try{return e()}finally{v=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=v;v=e;try{return t()}finally{v=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:y++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>i?(e.sortIndex=a,n(m,e),null===r(h)&&e===r(m)&&(S?(E(C),C=-1):S=!0,c(l,a-i))):(e.sortIndex=s,n(h,e),w||b||(w=!0,u())),e},t.unstable_shouldYield=s,t.unstable_wrapCallback=function(e){var t=v;return function(){var n=v;v=t;try{return e.apply(this,arguments)}finally{v=n}}},"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error())}()},"./node_modules/scheduler/index.js":(e,t,n)=>{e.exports=n("./node_modules/scheduler/cjs/scheduler.development.js")},"./node_modules/set-cookie-parser/lib/set-cookie.js":e=>{var t={decodeValues:!0,map:!1,silent:!1};function n(e){return"string"==typeof e&&!!e.trim()}function r(e,r){var o=e.split(";").filter(n),a=function(e){var t="",n="",r=e.split("=");return r.length>1?(t=r.shift(),n=r.join("=")):n=e,{name:t,value:n}}(o.shift()),i=a.name,l=a.value;r=r?Object.assign({},t,r):t;try{l=r.decodeValues?decodeURIComponent(l):l}catch(e){console.error("set-cookie-parser encountered an error while decoding a cookie with value '"+l+"'. Set options.decodeValues to false to disable this feature.",e)}var s={name:i,value:l};return o.forEach((function(e){var t=e.split("="),n=t.shift().trimLeft().toLowerCase(),r=t.join("=");"expires"===n?s.expires=new Date(r):"max-age"===n?s.maxAge=parseInt(r,10):"secure"===n?s.secure=!0:"httponly"===n?s.httpOnly=!0:"samesite"===n?s.sameSite=r:"partitioned"===n?s.partitioned=!0:s[n]=r})),s}function o(e,o){if(o=o?Object.assign({},t,o):t,!e)return o.map?{}:[];if(e.headers)if("function"==typeof e.headers.getSetCookie)e=e.headers.getSetCookie();else if(e.headers["set-cookie"])e=e.headers["set-cookie"];else{var a=e.headers[Object.keys(e.headers).find((function(e){return"set-cookie"===e.toLowerCase()}))];a||!e.headers.cookie||o.silent||console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."),e=a}return Array.isArray(e)||(e=[e]),o.map?e.filter(n).reduce((function(e,t){var n=r(t,o);return e[n.name]=n,e}),{}):e.filter(n).map((function(e){return r(e,o)}))}e.exports=o,e.exports.parse=o,e.exports.parseString=r,e.exports.splitCookiesString=function(e){if(Array.isArray(e))return e;if("string"!=typeof e)return[];var t,n,r,o,a,i=[],l=0;function s(){for(;l<e.length&&/\s/.test(e.charAt(l));)l+=1;return l<e.length}for(;l<e.length;){for(t=l,a=!1;s();)if(","===(n=e.charAt(l))){for(r=l,l+=1,s(),o=l;l<e.length&&"="!==(n=e.charAt(l))&&";"!==n&&","!==n;)l+=1;l<e.length&&"="===e.charAt(l)?(a=!0,l=o,i.push(e.substring(t,r)),t=l):l=r+1}else l+=1;(!a||l>=e.length)&&i.push(e.substring(t,e.length))}return i}},"./src/Components/App.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;var o=r(n("./node_modules/react/index.js")),a=n("./src/Components/Header/Header.tsx"),i=n("./node_modules/react-router-dom/dist/index.js");t.App=function(){return o.default.createElement("div",{className:"cosi"},o.default.createElement(a.Header,null),o.default.createElement("div",null,o.default.createElement("h1",null,"hih")),o.default.createElement(i.Outlet,null))}},"./src/Components/Header/Header.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0;var o=r(n("./node_modules/react/index.js")),a=r(n("./src/assets/Header/controller.png")),i=r(n("./src/assets/Header/gamingLogo.png")),l=r(n("./src/assets/Header/Prime.png")),s=r(n("./src/assets/Header/search.png"));t.Header=function(){return o.default.createElement("header",{className:"header"},o.default.createElement("div",{className:"header__container container"},o.default.createElement("div",{className:"header__logos"},o.default.createElement("div",{className:"header__brand"},o.default.createElement("img",{src:a.default,alt:"controller",className:"header__brand-logo"}),o.default.createElement("img",{src:l.default,alt:"prime",className:"header__brand-logo"})),o.default.createElement("img",{src:i.default,alt:"gamingLogo",className:"header__main-gaming"})),o.default.createElement("button",{className:"header__search"},o.default.createElement("img",{src:s.default,alt:"search",className:"header__search-icon"})),o.default.createElement("nav",{className:"header__navigation"},o.default.createElement("ul",{className:"header__nav"},o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/",className:"header__nav-link"},"Home")),o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/news",className:"header__nav-link"},"News")),o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/store",className:"header__nav-link"},"Store")),o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/review",className:"header__nav-link"},"Review")),o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/guide",className:"header__nav-link"},"Guide")),o.default.createElement("li",{className:"header__nav-item"},o.default.createElement("a",{href:"/about",className:"header__nav-link"},"About Us")))),o.default.createElement("div",{className:"header__auth"},o.default.createElement("button",{className:"header__signup"},o.default.createElement("span",{className:"header__signup-text"},"Sign Up")),o.default.createElement("button",{className:"header__login"},o.default.createElement("span",{className:"header__login-text"},"Login")))))}},"./src/index.tsx":function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n("./src/styles/main.scss");var o=r(n("./node_modules/react/index.js")),a=n("./node_modules/react-dom/client.js"),i=n("./node_modules/react-router/dist/development/index.js"),l=n("./node_modules/react-router-dom/dist/index.js"),s=n("./src/Components/App.tsx"),u=document.getElementById("root");if(!u)throw new Error("root not found");var c=(0,a.createRoot)(u),d=(0,i.createBrowserRouter)([{path:"/",element:o.default.createElement(s.App,null),children:[{path:"da",element:o.default.createElement("h1",null,"da")},{path:"be",element:o.default.createElement("h1",null,"be")}]},{path:"/shop",element:o.default.createElement("h1",null,"shop")}]);c.render(o.default.createElement(l.RouterProvider,{router:d}))},"./node_modules/turbo-stream/dist/flatten.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=void 0;const r=n("./node_modules/turbo-stream/dist/utils.js");function o(e){const{indices:t}=this,n=t.get(e);if(n)return[n];if(void 0===e)return r.UNDEFINED;if(null===e)return r.NULL;if(Number.isNaN(e))return r.NAN;if(e===Number.POSITIVE_INFINITY)return r.POSITIVE_INFINITY;if(e===Number.NEGATIVE_INFINITY)return r.NEGATIVE_INFINITY;if(0===e&&1/e<0)return r.NEGATIVE_ZERO;const o=this.index++;return t.set(e,o),a.call(this,e,o),o}function a(e,t){const{deferred:n,plugins:a,postPlugins:i}=this,s=this.stringified,u=[[e,t]];for(;u.length>0;){const[e,t]=u.pop(),c=e=>Object.keys(e).map((t=>`"_${o.call(this,t)}":${o.call(this,e[t])}`)).join(",");let d=null;switch(typeof e){case"boolean":case"number":case"string":s[t]=JSON.stringify(e);break;case"bigint":s[t]=`["${r.TYPE_BIGINT}","${e}"]`;break;case"symbol":{const n=Symbol.keyFor(e);n?s[t]=`["${r.TYPE_SYMBOL}",${JSON.stringify(n)}]`:d=new Error("Cannot encode symbol unless created with Symbol.for()");break}case"object":{if(!e){s[t]=`${r.NULL}`;break}const i=Array.isArray(e);let u=!1;if(!i&&a)for(const n of a){const r=n(e);if(Array.isArray(r)){u=!0;const[e,...n]=r;s[t]=`[${JSON.stringify(e)}`,n.length>0&&(s[t]+=`,${n.map((e=>o.call(this,e))).join(",")}`),s[t]+="]";break}}if(!u){let a=i?"[":"{";if(i){for(let t=0;t<e.length;t++)a+=(t?",":"")+(t in e?o.call(this,e[t]):r.HOLE);s[t]=`${a}]`}else e instanceof Date?s[t]=`["${r.TYPE_DATE}",${e.getTime()}]`:e instanceof URL?s[t]=`["${r.TYPE_URL}",${JSON.stringify(e.href)}]`:e instanceof RegExp?s[t]=`["${r.TYPE_REGEXP}",${JSON.stringify(e.source)},${JSON.stringify(e.flags)}]`:e instanceof Set?e.size>0?s[t]=`["${r.TYPE_SET}",${[...e].map((e=>o.call(this,e))).join(",")}]`:s[t]=`["${r.TYPE_SET}"]`:e instanceof Map?e.size>0?s[t]=`["${r.TYPE_MAP}",${[...e].flatMap((([e,t])=>[o.call(this,e),o.call(this,t)])).join(",")}]`:s[t]=`["${r.TYPE_MAP}"]`:e instanceof Promise?(s[t]=`["${r.TYPE_PROMISE}",${t}]`,n[t]=e):e instanceof Error?(s[t]=`["${r.TYPE_ERROR}",${JSON.stringify(e.message)}`,"Error"!==e.name&&(s[t]+=`,${JSON.stringify(e.name)}`),s[t]+="]"):null===Object.getPrototypeOf(e)?s[t]=`["${r.TYPE_NULL_OBJECT}",{${c(e)}}]`:l(e)?s[t]=`{${c(e)}}`:d=new Error("Cannot encode object with prototype")}break}default:{let n=!1;if(!Array.isArray(e)&&a)for(const r of a){const a=r(e);if(Array.isArray(a)){n=!0;const[e,...r]=a;s[t]=`[${JSON.stringify(e)}`,r.length>0&&(s[t]+=`,${r.map((e=>o.call(this,e))).join(",")}`),s[t]+="]";break}}n||(d=new Error("Cannot encode function or unexpected type"))}}if(d){let n=!1;if(i)for(const r of i){const a=r(e);if(Array.isArray(a)){n=!0;const[e,...r]=a;s[t]=`[${JSON.stringify(e)}`,r.length>0&&(s[t]+=`,${r.map((e=>o.call(this,e))).join(",")}`),s[t]+="]";break}}if(!n)throw d}}}t.flatten=o;const i=Object.getOwnPropertyNames(Object.prototype).sort().join("\0");function l(e){const t=Object.getPrototypeOf(e);return t===Object.prototype||null===t||Object.getOwnPropertyNames(t).sort().join("\0")===i}},"./node_modules/turbo-stream/dist/turbo-stream.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=void 0;const r=n("./node_modules/turbo-stream/dist/flatten.js"),o=n("./node_modules/turbo-stream/dist/unflatten.js"),a=n("./node_modules/turbo-stream/dist/utils.js");async function i(e){const t=await e.read();if(!t.value)throw new SyntaxError;let n;try{n=JSON.parse(t.value)}catch(e){throw new SyntaxError}return{done:t.done,value:o.unflatten.call(this,n)}}async function l(e){let t=await e.read();for(;!t.done;){if(!t.value)continue;const n=t.value;switch(n[0]){case a.TYPE_PROMISE:{const e=n.indexOf(":"),t=Number(n.slice(1,e)),r=this.deferred[t];if(!r)throw new Error(`Deferred ID ${t} not found in stream`);const a=n.slice(e+1);let i;try{i=JSON.parse(a)}catch(e){throw new SyntaxError}const l=o.unflatten.call(this,i);r.resolve(l);break}case a.TYPE_ERROR:{const e=n.indexOf(":"),t=Number(n.slice(1,e)),r=this.deferred[t];if(!r)throw new Error(`Deferred ID ${t} not found in stream`);const a=n.slice(e+1);let i;try{i=JSON.parse(a)}catch(e){throw new SyntaxError}const l=o.unflatten.call(this,i);r.reject(l);break}default:throw new SyntaxError}t=await e.read()}}function s(e,t){if(!t)return e;if(t.aborted)return Promise.reject(t.reason||new Error("Signal was aborted."));const n=new Promise(((n,r)=>{t.addEventListener("abort",(e=>{r(t.reason||new Error("Signal was aborted."))})),e.then(n).catch(r)}));return n.catch((()=>{})),Promise.race([n,e])}t.decode=async function(e,t){const{plugins:n}=t??{},r=new a.Deferred,o=e.pipeThrough((0,a.createLineSplittingTransform)()).getReader(),s={values:[],hydrated:[],deferred:{},plugins:n},u=await i.call(s,o);let c=r.promise;return u.done?r.resolve():c=l.call(s,o).then(r.resolve).catch((e=>{for(const t of Object.values(s.deferred))t.reject(e);r.reject(e)})),{done:c.then((()=>o.closed)),value:u.value}},t.encode=function(e,t){const{plugins:n,postPlugins:o,signal:i}=t??{},l={deferred:{},index:0,indices:new Map,stringified:[],plugins:n,postPlugins:o,signal:i},u=new TextEncoder;let c=0;return new ReadableStream({async start(t){const n=r.flatten.call(l,e);if(Array.isArray(n))throw new Error("This should never happen");n<0?t.enqueue(u.encode(`${n}\n`)):(t.enqueue(u.encode(`[${l.stringified.join(",")}]\n`)),c=l.stringified.length-1);const o=new WeakSet;for(;Object.keys(l.deferred).length>0;){for(const[e,n]of Object.entries(l.deferred))o.has(n)||o.add(l.deferred[Number(e)]=s(n,l.signal).then((n=>{const o=r.flatten.call(l,n);if(Array.isArray(o))t.enqueue(u.encode(`${a.TYPE_PROMISE}${e}:[["${a.TYPE_PREVIOUS_RESOLVED}",${o[0]}]]\n`)),l.index++,c++;else if(o<0)t.enqueue(u.encode(`${a.TYPE_PROMISE}${e}:${o}\n`));else{const n=l.stringified.slice(c+1).join(",");t.enqueue(u.encode(`${a.TYPE_PROMISE}${e}:[${n}]\n`)),c=l.stringified.length-1}}),(n=>{n&&"object"==typeof n&&n instanceof Error||(n=new Error("An unknown error occurred"));const o=r.flatten.call(l,n);if(Array.isArray(o))t.enqueue(u.encode(`${a.TYPE_ERROR}${e}:[["${a.TYPE_PREVIOUS_RESOLVED}",${o[0]}]]\n`)),l.index++,c++;else if(o<0)t.enqueue(u.encode(`${a.TYPE_ERROR}${e}:${o}\n`));else{const n=l.stringified.slice(c+1).join(",");t.enqueue(u.encode(`${a.TYPE_ERROR}${e}:[${n}]\n`)),c=l.stringified.length-1}})).finally((()=>{delete l.deferred[Number(e)]})));await Promise.race(Object.values(l.deferred))}await Promise.all(Object.values(l.deferred)),t.close()}})}},"./node_modules/turbo-stream/dist/unflatten.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.unflatten=void 0;const r=n("./node_modules/turbo-stream/dist/utils.js"),o="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:void 0;function a(e){const{hydrated:t,values:n,deferred:a,plugins:i}=this;let l;const s=[[e,e=>{l=e}]];let u=[];for(;s.length>0;){const[e,l]=s.pop();switch(e){case r.UNDEFINED:l(void 0);continue;case r.NULL:l(null);continue;case r.NAN:l(NaN);continue;case r.POSITIVE_INFINITY:l(1/0);continue;case r.NEGATIVE_INFINITY:l(-1/0);continue;case r.NEGATIVE_ZERO:l(-0);continue}if(t[e]){l(t[e]);continue}const c=n[e];if(c&&"object"==typeof c)if(Array.isArray(c))if("string"==typeof c[0]){const[n,d,f]=c;switch(n){case r.TYPE_DATE:l(t[e]=new Date(d));continue;case r.TYPE_URL:l(t[e]=new URL(d));continue;case r.TYPE_BIGINT:l(t[e]=BigInt(d));continue;case r.TYPE_REGEXP:l(t[e]=new RegExp(d,f));continue;case r.TYPE_SYMBOL:l(t[e]=Symbol.for(d));continue;case r.TYPE_SET:const n=new Set;t[e]=n;for(let e=1;e<c.length;e++)s.push([c[e],e=>{n.add(e)}]);l(n);continue;case r.TYPE_MAP:const p=new Map;t[e]=p;for(let e=1;e<c.length;e+=2){const t=[];s.push([c[e+1],e=>{t[1]=e}]),s.push([c[e],e=>{t[0]=e}]),u.push((()=>{p.set(t[0],t[1])}))}l(p);continue;case r.TYPE_NULL_OBJECT:const h=Object.create(null);t[e]=h;for(const e of Object.keys(d).reverse()){const t=[];s.push([d[e],e=>{t[1]=e}]),s.push([Number(e.slice(1)),e=>{t[0]=e}]),u.push((()=>{h[t[0]]=t[1]}))}l(h);continue;case r.TYPE_PROMISE:if(t[d])l(t[e]=t[d]);else{const n=new r.Deferred;a[d]=n,l(t[e]=n.promise)}continue;case r.TYPE_ERROR:const[,m,y]=c;let g=y&&o&&o[y]?new o[y](m):new Error(m);t[e]=g,l(g);continue;case r.TYPE_PREVIOUS_RESOLVED:l(t[e]=t[d]);continue;default:if(Array.isArray(i)){const n=[],r=c.slice(1);for(let e=0;e<r.length;e++){const t=r[e];s.push([t,t=>{n[e]=t}])}u.push((()=>{for(const r of i){const o=r(c[0],...n);if(o)return void l(t[e]=o.value)}throw new SyntaxError}));continue}throw new SyntaxError}}else{const n=[];t[e]=n;for(let e=0;e<c.length;e++){const t=c[e];t!==r.HOLE&&s.push([t,t=>{n[e]=t}])}l(n)}else{const n={};t[e]=n;for(const e of Object.keys(c).reverse()){const t=[];s.push([c[e],e=>{t[1]=e}]),s.push([Number(e.slice(1)),e=>{t[0]=e}]),u.push((()=>{n[t[0]]=t[1]}))}l(n)}else t[e]=c,l(c)}for(;u.length>0;)u.pop()();return l}t.unflatten=function(e){const{hydrated:t,values:n}=this;if("number"==typeof e)return a.call(this,e);if(!Array.isArray(e)||!e.length)throw new SyntaxError;const r=n.length;for(const t of e)n.push(t);return t.length=n.length,a.call(this,r)}},"./node_modules/turbo-stream/dist/utils.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createLineSplittingTransform=t.Deferred=t.TYPE_PREVIOUS_RESOLVED=t.TYPE_URL=t.TYPE_SYMBOL=t.TYPE_SET=t.TYPE_REGEXP=t.TYPE_PROMISE=t.TYPE_NULL_OBJECT=t.TYPE_MAP=t.TYPE_ERROR=t.TYPE_DATE=t.TYPE_BIGINT=t.UNDEFINED=t.POSITIVE_INFINITY=t.NULL=t.NEGATIVE_ZERO=t.NEGATIVE_INFINITY=t.NAN=t.HOLE=void 0,t.HOLE=-1,t.NAN=-2,t.NEGATIVE_INFINITY=-3,t.NEGATIVE_ZERO=-4,t.NULL=-5,t.POSITIVE_INFINITY=-6,t.UNDEFINED=-7,t.TYPE_BIGINT="B",t.TYPE_DATE="D",t.TYPE_ERROR="E",t.TYPE_MAP="M",t.TYPE_NULL_OBJECT="N",t.TYPE_PROMISE="P",t.TYPE_REGEXP="R",t.TYPE_SET="S",t.TYPE_SYMBOL="Y",t.TYPE_URL="U",t.TYPE_PREVIOUS_RESOLVED="Z",t.Deferred=class{promise;resolve;reject;constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}},t.createLineSplittingTransform=function(){const e=new TextDecoder;let t="";return new TransformStream({transform(n,r){const o=e.decode(n,{stream:!0}),a=(t+o).split("\n");t=a.pop()||"";for(const e of a)r.enqueue(e)},flush(e){t&&e.enqueue(t)}})}},"./src/assets/Header/Prime.png":(e,t,n)=>{e.exports=n.p+"assets/images/Prime.png"},"./src/assets/Header/controller.png":(e,t,n)=>{e.exports=n.p+"assets/images/controller.png"},"./src/assets/Header/gamingLogo.png":(e,t,n)=>{e.exports=n.p+"assets/images/gamingLogo.png"},"./src/assets/Header/search.png":(e,t,n)=>{e.exports=n.p+"assets/images/search.png"}},e=>{e(e.s="./src/index.tsx")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,